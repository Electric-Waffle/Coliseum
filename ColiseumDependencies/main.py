import controleur
import os
from pygame import mixer
import random
import sys
import csv
import ast
import time
import tkinter as tk
from tkinter import PhotoImage
import threading
import traceback
from turtle import *
import math


# 0nom 1description 2stigma+ 3stigma- 4stigma* 5techniques
# 6sorts 7items 8talents 9vie 10mana 11force
# 12inteligence 13defence 14tauxcoupcrit
# 15degatcoupcrit 16tauxsortcrit 17degatsortcrit
# 18tauxesquive 19gold
LISTETECHNIQUES = [
    "Attaque Légère",
    "Lance Rapide", 
    "Lance Statique",
    "Lance Electrique",
    "Lance de l'Eclair",
    "Lance Foudroyante",
    "Lance de la Mort Blanche",
    "Bô Chaud",  #
    "Bô Brulant",  #
    "Bô Enflammé",  #
    "Bô de la Fournaise",
    "Bô Magmatique",
    "Bô Solaire",
    "Katana Bleu",
    "Katana Froid",
    "Katana Givré",
    "Katana Glacial",
    "Katana Polaire",
    "Katana Zéro",
    "Corne Argile",  #
    "Corne Lapis",  #
    "Corne Granite",  #
    "Corne Obsidienne",
    "Corne de la Montagne",
    "Corne Continentale",
    "Poing Léger",  #
    "Poing Renforcé",  #
    "Poing Lourd",  #
    "Poing Maitrisé",  #
    "Poing Fatal",  #
    "Poing de la Comète",
    "Dague Volevie",
    "Dague Siphoneuse",
    "Dague Vampirique",
    "Dague Parasite",
    "Dague Destructrice",
    "Dague Créatrice",
]
LISTESORTS = [
    "Tir Arcanique",
    "Faisceau Rapide",
    "Faisceau Statique",
    "Faisceau Electrique",
    "Faisceau de l'Eclair",
    "Faisceau Foudroyant",
    "Faisceau de la Mort Blanche",
    "Thermosphère Chaude",
    "Thermosphère Brulante",
    "Thermosphère Enflammée",
    "Thermosphère de la Fournaise",
    "Thermosphère Magmatique",
    "Thermosphère Solaire",
    "Pic Bleu",
    "Pic Froid",
    "Pic Givré",
    "Pic Glacial",
    "Pic Polaire",
    "Pic Zéro",
    "Création d'Argile",
    "Création de Lapis",
    "Création de Granite",
    "Création Obsidienne",
    "Création de la Montagne",
    "Création Continentale",
    "Explosion Légère",
    "Explosion Renforcée",
    "Explosion Lourde",
    "Explosion Maitrisée",
    "Explosion Fatale",
    "Explosion de la Comète",
    "Dance Volevie",
    "Dance Siphoneuse",
    "Dance Vampirique",
    "Dance Parasite",
    "Dance Destructrice",
    "Dance Créatrice",
    "Sonata Pitoyable",  # 3% ou 8pv
    "Sonata Miséricordieuse",  # 5% ou 15pv
    "Sonata Empathique",  # 12% ou 20pv
    "Sonata Sincère",  # 17% ou 25pv
    "Sonata Bienveillante",  # 20% ou 33pv
    "Sonata Absolutrice",  # 25% ou 40pv
]
LISTEACTIONRANG1 = [
    "Lance Rapide",
    "Bô Chaud", 
    "Katana Bleu",
    "Corne Argile",
    "Poing Léger",
    "Dague Volevie",
    "Faisceau Rapide",
    "Thermosphère Chaude",
    "Pic Bleu",
    "Création d'Argile",
    "Explosion Légère",
    "Dance Volevie",
    "Sonata Pitoyable",
]
LISTEACTIONRANG2 = [
    "Lance Statique",
    "Bô Brulant",
    "Katana Froid",
    "Corne Lapis",
    "Poing Renforcé",
    "Dague Siphoneuse",
    "Faisceau Statique",
    "Thermosphère Brulante",
    "Pic Froid",
    "Création de Lapis",
    "Explosion Renforcée",
    "Dance Siphoneuse",
    "Sonata Miséricordieuse",
]
LISTEACTIONRANG3 = [
    "Lance Electrique",
    "Bô Enflammé",
    "Katana Givré",
    "Corne Granite",
    "Poing Lourd",
    "Dague Vampirique",
    "Faisceau Electrique",
    "Thermosphère Enflammée",
    "Pic Givré",
    "Création de Granite",
    "Explosion Lourde",
    "Dance Vampirique",
    "Sonata Empathique",
]
LISTEACTIONRANG4 = [
    "Lance de l'Eclair",
    "Bô de la Fournaise",
    "Katana Glacial",
    "Corne Obsidienne",
    "Poing Maitrisé",
    "Dague Parasite",
    "Faisceau de l'Eclair",
    "Thermosphère de la Fournaise",
    "Pic Glacial",
    "Création Obsidienne",
    "Explosion Maitrisée",
    "Dance Parasite",
    "Sonata Sincère", 
]
UPPGRADESPOSSIBLES = {
    "Chapeau" : 0,
    "Boucles d'Oreille" : 0,
    "Collier" : 0,
    "Cotte de Maille" : 0,
    "Bracelet" : 0,
    "Gants" : 0,
    "Anneau" : 0,
    "Bottes" : 0,
    "Fiole de Sève" : 0,
    "Fiole de Rosée" : 0,
    "Tisane d'Ecorce" : 0,
    "Tisane de Racine" : 0,
    "Charge de Feu" : 0,
    "Charge de Glace" : 0,
    "Charge de Foudre" : 0,
    "Charge de Terre" : 0,
    "Charge de Chair" : 0,
    "Charge de Sang" : 0,
    "Ration Jindagee" : 0,
    "Ration Jindagee Raffinée" : 0,
    "Ration Aatma" : 0,
    "Ration Aatma Rafinée" : 0,
    "Ration Cristalline" : 0,
    "Ration d'Hydromel" : 0,
    "Ration Ambroisie" : 0,
    "Ration Explosive" : 0,
    "Ration Explosive Raffinée" : 0,
    "Pack de Fléchettes" : 0,
    "Pack de Flèches" : 0,
    "Pack Premier Tour" : 0,
    "Médaillon de Leprechaun" : 0,
    "Noyau d'Aurelionite" : 0,
    "Sacoche" : 0,
    "Emblème de la Fin" : 0,
    "Clé" : 0,
    "Carte" : 0
}
MATERIAUXRANG1 = [
    "Coeur Gravitaire",
    "Ectoplasme Chaud",
    "Poussière Animée",
    "Ether Non-Newtonien",
    "Eclat de Verre",
]
MATERIAUXRANG2 = [
    "Fluide Alien",
    "Morceau de Cloche",
    "Ecaille de Phénix",
    "Roche Glycérine",
    "Poil Gelé",
]
MATERIAUXRANG3 = [
    "Moustache de Chat", 
    "Fragment Osseux",
    "Iris du Malheur",
    "Velour de Cervidé",
    "Composants Electroniques", 
]
MATERIAUXRANG4 = [
    "Eclat de Crystal",
    "Pilules de Roulette",
    "Fragment de Jade",
    "Poussière Dorée Animée",
    "Gemme Bleue",
]
MATERIAUXRANG5 = [
    "Essence de Vitalitée",
    "Essence de Magie",
    "Essence de Fortitude",
    "Essence de Sagesse",
    "Essence de Résistance",
]
MATERIAUXRANG6 = [
    "Fragment Mélioratif",
    "Fragment Sophiste",
    "Fragment de Fatalité",
    "Fragment Insatiable", 
    "Hors Stock",
]
MATERIAUXRANG7 = [
    "Essence Dorée",
    "Essence Astrale",
    "Essence Carmine",

    "Clochette",
    "Oeuf de Fabergé",
    "Néphrite Brut",
    "Nitroglycérine",
    "Feu Grégorien",
    "Perle de Chance",
    "Réceptacle Anastral",
    "Orbe Convergeant",
    "Gemme Prismatique",
    "Fluide Nutritif",
    "Ecaille Chitineuse",
    "Antenne de Cérémonie",
    "Circuit Biomécanique",
    "Encre de Pouvoir",
    "Tissu Perceptif",
    "Ichor Divin"
]

LISTERUMEURS = [
    "ACE, la magie utilisée pour faire venir la nuit, voudrait dire *Arbitrary Code Execution*.",
    "Le maitre des artefacts situé dans le quartier commercial possèderait tout les artefacts du Coliseumn qu'il aurait réussi a emmener avec lui aux champs du Crépuscules a sa mort. Tant qu'il ne les redonne pas a celui qui livre les objets aux nouveaux aventuriers, personne ne peut les avoir dans les boites a artefact.",
    "Un homme passerait son temps à observer la lune, quelque part dans les champs a l'ouest le soir. Et la clé pour comprendre quels objets fusionner dans le fabricateur se trouverait dans ses histoires.",
    "Il existe une bibliothèque au 8eme étage qui contient toute sortes d'informations, y compris la manière de pécher dans les trous au sol !",
    "Les redcoins, on peut en avoir en pêchant ! Mais c'est très très dur apparemment...",
    "On gagne une essence pour chaque paquet de 25 points de force ou intelligence qu'on avait a notre mort.",
    "On gagne une essence pour chaque paquet de 15 points de défence qu'on avait a notre mort.",
    "On gagne une essence pour chaque paquet de 25 âmes absorbées qu'on avait a notre mort.",
    "On gagne une essence pour chaque paquet de 50 points de vie max ou mana max qu'on avait a notre mort.",
    "Les artefacts qui augmentent les caractéristiques donnent des Fragments Mélioratifs a notre mort.",
    "Les artefacts qui changent les mécaniques de combat donnent des Fragments Sophistes a notre mort.",
    "Un certain monstre qui prend l'apparence d'un coffre lache des Fragments Insatiable a sa mort.",
    "On ne peut échanger des materiaux obtenus a un étage que contre des materiaux du même étage a la Banque.",
    "Certaines personnes ont vu une salle étrange dans le Coliseum, avec une bête figée en son milieu. Ces personnes parlent aussi d'un monstre deux étages plus fort possédant une Carte de même forme que les machines devant la Bête.",
    "On peut obtenir un artefact extrêmement utile en secouant les arbres méchaniques des méchanismes anciens. Seul bémol : l'artefact se brise en changeant d'étage.",
    "Acheter plein de certificats vendu par la machine d'un des méchanismes anciens permet de garder les artefacts temporaire vendus par la machine pendant très longtemps. ",
    "Re-observer une salle avec des bols permet de faire apparaitre plus de bols, sans aucune limite. Pratique si vous voulez perdre votre argent !",
    "Il existe une très faible chance de récuperer tout l'argent jeté dans l'oasis du troisieme étage, lorsque l'on jette son argent dedans.",
    "Utiliser l'artefact Larmes de Vénus dans le puit du 6eme étage fait completement changer l'ambiance du 7eme étage.",
    "Le deuxieme étage contient un artefact qui peut aider les aventuriers orientés Force ou les aventuriers orientés Magie, selon si vous avez changé son ambiance avec le puit du premier étage, ou pas.",
    "Chaque étages possèdent une salle secrête avec un méchanisme qui peut aider les avenurier d'une manière ou d'une autre. On peut aussi obtenir un artefact a chaque étages .",
    "La salle a artefact du quatrieme étage contient une énigme assez complexe. Mais il faudrait apparemment faire attention aux nombres, qui signifieraient des positions spécifiques auxquelles se rendre.",
    "Les chercheurs d'artefacts se servant des positions des salles oublient souvent que l'arene prend un carré de 3x3 au centre de la carte. Par exemple : la première salle a droite de l'arène n'est pas aux coordonnées x=1 y=0, mais x=2 y=0.",
    "On peut rencontrer 4 couleurs de brazier differents dans les salles : bleu vert rouge ou noir. Il y a 3 artefacts que l'on peut obtenir en sacrifiant un gros nombre du bon item au brazier noir, et l'un de ces items sacrifiables est le fruit jindagee.",
    "Sacrifier un item dans le brazier vert permet d'augmenter une de ses caractéristiques, en référence avec l'item sacrifié.",
    "Sacrifier un item dans le brazier rouge permet d'en avoir un autre de manière alétaoire. Sacrifiez le dans le brazier bleu, et vous aurez la version améliorée de cet item.", # moitié des rumeurs
    "Il y à un Tout-Premier qui passe son temps a observer la lune dans la décharge à l'Ouest.\nApparemment, il avait trouvé toute les recettes du fabricateur et les auraient mises de manière cryptique, dans des histoires comme moyen mémo-technique, afin de s'en rapeller.",
    "Si il y a un monstre dopé a un étage, alors il y a aussi une salle étrange dans laquelle une bête féroce dort.\nLa corrélation entre les deux est incertaines, mais ce qui est sur, c'est que la bête n'est pas assez forte pour battre le boss toute seule.",
    "Certaines personnes auraient vu des symboles étranges sur le livre de la cigogne blueu au premier étage.\nElles sont sorties pour voir si elles étaient dans la bonne salle, et quand elles sont re-rentrées, les symboles avaient disparus.\nEt si on rentrait et sortiat de la salle jusqu'a voir les symboles ?",
    "Il y aurait un aventurier qui a vu une baleine dans l'oasis du troisième étage.\nEt alors qu'il jetait des pièces dedans, il a eu la meilleure chance possible dans ses gains !",
    "Un aventurier prometteur aurait disparu au deuxieme étage.\nLorsque des gens ont demandé au majordome qui prend les commandes et les emmene au premier étage ce qui s'était passé, il a simplement répondu qu'il est allé étancher sa soif a la fontaine alors qu'il était a l'article de la mort, sans magie.",
    "Apparemment, si on arrive a augmenter le rang de son gain à ??? , a l'oasis du troisieme étage, quelque chose de terrifiant se passe.\nTellement terrifiant, que la seule aventuriere a avoir tenté l'experience a fuit l'étage sans se retourner.",
    "La pierre philosophale, Magnum Opus de tout les alchimistes, ne se trouve pas au quatrieme étage.\nLa bas, il n'y a qu'une prototype qui peut transformer un aventurier en or si il touche la pierre trop longtemps.\nCa doit être bizarre de se tranformer en or...",
    "La tour d'horloge du cinquième étage est coincée sur un nombre particulier, mais personne ne sait ou inserer ce nombre.",
    "La quête de rang S de l'automate du sixieme étage est tellement dure que personne ne l'a jamais réussie.\nMais d'apres lui, c'est une bonne chose, car il ne pourrait plus la donner si quqlqu'un la réussissait.",
    "Il existe un livre a l'étage sept qui permet d'oublier des technique en échange de caractéristiques.\nMais si on oublie un groupe de certaines caractéristiques, on gagne des effets supplémentaires.\nCes groupes seraient indiqués sur la page du livre par des symboles similaires...",
    "Seul les plus curieux arriveront a trouver la bibliothèque personnelle du Maitre Mage à l'étage huit.\nMais deux livres ont le prénom Jean inscrit à la premiere page : Naissance du Monde et Comprendre la Noosphère.",
    "Les infromations sur les salles ou les étages viennent d'un peu tout le monde, mais les informations sur les monstres ne viennent que de ces personnes là, vu que c'est compliqué de retenir des informations en plein combat.\nCes personnes ont deux points en commun : ils ont un esprit bien rangé, et ils se plaignet de ne pas avoir un livre ou noter leurs informations.",
    "Le Brasier Noir accepte les fruits aatma, les fruits jindagee, et les crystaux élémentaires.\nMais pour qu'il donne un artefact en échange, il faut sacrifier un bon nombre de ces objets là.",
    "Les Méchanismes Anciens sont enfaite des machines avec lesquelles les Dieux et Déesse experimentaient, pour voir les différentes applications que leurs pouvoirs divins pourraient avoir.\nUtilisés par des humains, les machines ont tendance a avoir des effets négatifs.\nMais si on pouvait prouver à ces machines que nous somme des Dieux, ces effets pourraient bien disparaitre...",
    "Les marchand du quartier commercial ont pour ordre de ne pas vendre leurs plus précieux produits, car ils pourraient être perdus si l'aventurier sponsorisé mourrait avant le troisieme étage.\nCepandant, il peuvent prodiguer ces services aux détenteurs d'un Emblème de la Fin, un emblème porté par les Tout-Premiers et qui confère une authorité sans faille.",
    "Il existe 4 livres de la Cigogne.\nLa Cigogne Rouge du 8ème étage absorbe les sorts.\nLa Cigogne Bleue du 1er étage permet d'apprendre les sorts absorbés par la Cigogne Rouge, et peut donner certains artefacts spéciaux.\nLa Cigogne Noire du 7ème étage permet d'oublier les sorts et techniques en échange de plus de pouvoir.\nLa Cigogne Blanche est un glossaire qui se lierait a un individu et écrirait ses pensées a chaque fois qu'il se synchronise avec lui, cepandant ce livre a été perdu quelque part dans les Champs du Crépuscule.",
    "Les mimiques sont des monstres surpuissants qui utilisent les sorts et techniques de tout les montres de leur étage.\nElle seraient enfaite des dieux cupides nés des prières de plusieurs cultes dans le Colyseum, auquel aurait été donné un corps composé des cadavres des monstres cousus a un coffre d'artefact.",
    "Des fresques apparaissent dans le Colyseum, parce que quelque chose veut que l'on connaisse les évenements qui ont donné naissance au donjon maudit.\nSi quelqu'un les regarde toute, il pourrait etre récompensé.",
    "De mystérieux obélisques a écran tactile se sont implantés dans certaines salles.\nC'est par eux que le marchand peut avoir tout les objets qu'il vend, et il peut donner des tokens a utiliser là bas si l'on dépense plein de golds en une seule fois dans son magasin.",
    "La Chamane dans le Temple au Sud ne serait pas une Tout-Première, mais un avatar créé par les supplications des Tout-Premier quand ils sont arrivé ici.\nElle possederait ainsi l'entiereté des malédictions et de la misère de celles et ceux qui l'ont priée, mais aussi les bénédictions nées du bohneur des gens qui ont trouvé une nouvelle vie dans les Champs du Crépuscule.",
    "Le Maitre Mage ne serait pas un véritable Maitre, ni un véritable Mage.\nD'après les Tout-Premiers, l'appelation Mage pour les sorciers de haut niveaux ou même Maitre pour les plus grands de leur domaine n'est apparue qu'après la naissance de l'individu.\nEnfaite, Maitre Mage, c'est juste son nom et son prénom, et son apétance a la magie est telle, que l'on a utilisé son identité comme un adjectif.",
    "Le Roi Déchu n'est pas intrinsèquement paranoïaque et sociopathe.\nC'était une ordure, mais il est devenu fou soudainement, après une manifestation des paysans contre lui.",
    "Après le jour ou il s'est jeté dans le Colyseum, plus personne n'a entendu parler de la femme du Roi : la Reine.\nLe bruit court qu'elle aurait été fait prisonniere dans une cage du 7eme étage, mais on ne trouve la bas que des barreaux défoncés et le livre de la Cigogne Noire.",
    "Le Marchand du Colyseum serait le fils de la Reine.\nCertains disent que son visage est déformé a cause de la concentration de mana, d'autre pense que la Reine a été battue quand elle était en période de grossesse, mais tout les Tout-Premiers s'accordent sur une chose :\nLe chiffon sale sur lequel sont disposé ses produit porte l'embleme du Royaume du Roi Déchu, et n'a pu appartenir qu'a la Reine.",
    ]
LISTERECETTES = [
    "...le signal des messes, et l'or dans son état primitif...",
    "...la fenetre d'une âme de malchance, et l'éclat d'une promesse : celle de devenir meilleur...",
    "...un bout du fils et un bout du père, unis dans le vert de la jalousie et le blanc de la puretée...",
    "...celui qui ne suit pas les règles de la physique et son compagnon au tempérament explosif...",
    "...la chaleur qui venait d'ailleurs, la couleur dans laquelle finiront par baigner nos coeurs...",
    "...petite bille, réceptacle de nos peines et bohneurs, objet de notre contemplation, animée par un éclat arraché au destin par des mains suppliantes...",
    "...une volontée prise dans la roche, a laquelle on donne le pouvoir de conception des ames articficielles...",
    "...autour du coeur orbite la magie et l'émerveillement...",
    "...ordonné et non-ordonné, silice et maille, fait par l'homme et fait par la nature : un prisme de ce qui est possible...",
    "...un reflet de nos vie, venu d'ailleurs, déformé par l'espace, mais quand même porteur des mêmes énergies qui nous font se mouvoir...",
    "...pourquoi protéger ce qui revient a la vie , si ce n'est pour renforcer une idée de *résister a la mort*...",
    "...ils atterissent tout le temps sur le sol, du même coté, comme guidés par des petites antennes sur leurs levres, ou peut être la connaissance de la position du sol...",
    "...ils mangent, ils avalent, ils engloutissent, comme des animaux programmés a la naissance pour la satisfaction a l'excès : electroniquement imparfaits...",
    "...on reconnait à la force du lion, la douceur de son poil. Pourquoi donc la nature mélange autant de contradictions....",
    "...quand on les entend parler pour rien dire, faisant des illogismes a chaque tournure de phrase, amenant la logique dans des coins obscurs ou elle se fait confondre par de grossières erreurs, l'homme avisé entendra le brâme d'un animal sans capacité de raisonnement...",
    "...pourquoi donc les dieux ameraient ils le doré si il coule dans leurs veines, comme mué, animé, par la force de leur lignée et les défauts de leurs personnalitées ? Le sang me parait, pour de tels êtres, un materiau bien plus précieux...",
]
DICTIONNAIREMATERIAUFUSION = {
    "Clochette" : ["Morceau de Cloche","Essence Dorée"],
    "Oeuf de Fabergé" : ["Iris du Malheur","Fragment Mélioratif"],
    "Néphrite Brut" : ["Fragment de Jade","Fragment Osseux"],
    "Nitroglycérine" : ["Ether Non-Newtonien","Roche Glycérine"],
    "Feu Grégorien" : ["Ectoplasme Chaud","Gemme Bleue"],
    "Perle de Chance" : ["Pilules de Roulette","Fragment de Fatalité"],
    "Réceptacle Anastral" : ["Essence Astrale","Poussière Animée"],
    "Orbe Convergeant" : ["Coeur Gravitaire","Essence de Magie"],
    "Gemme Prismatique" : ["Eclat de Verre","Eclat de Crystal"],
    "Fluide Nutritif" : ["Fluide Alien","Essence de Vitalitée"],
    "Ecaille Chitineuse" : ["Ecaille de Phénix","Essence de Résistance"],
    "Antenne de Cérémonie" : ["Moustache de Chat","Essence de Sagesse"],
    "Circuit Biomécanique" : ["Fragment Insatiable","Composants Electroniques"],
    "Encre de Pouvoir" : ["Poil Gelé","Essence de Fortitude"],
    "Tissu Perceptif" : ["Velour de Cervidé","Fragment Sophiste"],
    "Ichor Divin" : ["Poussière Dorée Animée","Essence Carmine"]
}
ANNUAIREPRIXVILLAGE = {

    # forgeron

    "Chapeau": [
        {  # Niveau 1
            "Eclat de Verre": 4,  # Rang 1
            "Poussière Animée": 2,  # Rang 1
        },
        {  # Niveau 2
            "Fluide Alien": 3,  # Rang 2
            "Ectoplasme Chaud": 2,  # Rang 1
        },
        {  # Niveau 3
            "Ecaille de Phénix": 4,  # Rang 2
            "Coeur Gravitaire": 3,  # Rang 1
        },
        {  # Niveau 4
            "Fragment Osseux": 3,  # Rang 3
            "Velour de Cervidé": 2,  # Rang 3
            "Ether Non-Newtonien": 2,  # Rang 1
        },
        {  # Niveau 5
            "Iris du Malheur": 3,  # Rang 3
            "Poil Gelé": 3,  # Rang 2
            "Poussière Animée": 1,  # Rang 1
        },
        {  # Niveau 6
            "Fragment de Jade": 2,  # Rang 4
            "Gemme Bleue": 1,  # Rang 4
            "Moustache de Chat": 2,  # Rang 3
        },
        {  # Niveau 7
            "Poussière Dorée Animée": 2,  # Rang 4
            "Roche Glycérine": 2,  # Rang 2
            "Fragment Osseux": 3,  # Rang 3
        },
        {  # Niveau 8
            "Essence de Magie": 5,  # Rang 5
            "Fragment de Jade": 5,  # Rang 4
        },
        {  # Niveau 9
            "Essence de Fortitude": 8,  # Rang 5
            "Pilules de Roulette": 6,  # Rang 4
        },
        {  # Niveau 10
            "Fragment Sophiste": 3,  # Rang 6
            "Essence de Sagesse": 4,  # Rang 5
        },
        {  # Niveau 11
            "Fragment Insatiable": 5,  # Rang 6
            "Essence de Résistance": 6,  # Rang 5
        },
        {  # Niveau 12
            "Circuit Biomécanique": 4,  # Rang 7
            "Encre de Pouvoir": 5,  # Rang 7
        },
        {  # Niveau 13
            "Ichor Divin": 7,  # Rang 7
            "Gemme Prismatique": 7,  # Rang 7
            "Essence Astrale": 7,  # Rang 7
        },
    ],

    "Boucles d'Oreille": [  # taux sort critique
        {  # Niveau 1
            "Morceau de Cloche": 2,  # Rang 2
            "Fluide Alien": 3,       # Rang 2
            "Ether Non-Newtonien": 5,  # Rang 1
        },
        {  # Niveau 2
            "Morceau de Cloche": 5,  # Rang 2
            "Iris du Malheur": 2,    # Rang 3
            "Ecaille de Phénix": 6,  # Rang 2
        },
        {  # Niveau 3
            "Composants Electroniques": 3,  # Rang 3
            "Poil Gelé": 4,                 # Rang 2
            "Ectoplasme Chaud": 2,          # Rang 1
        },
        {  # Niveau 4
            "Fragment Osseux": 4,      # Rang 3
            "Velour de Cervidé": 2,    # Rang 3
            "Poussière Animée": 3,     # Rang 1
        },
        {  # Niveau 5
            "Eclat de Crystal": 3,        # Rang 4
            "Fragment de Jade": 2,        # Rang 4
            "Moustache de Chat": 2,       # Rang 3
        },
        {  # Niveau 6
            "Poussière Dorée Animée": 2,  # Rang 4
            "Fluide Alien": 3,            # Rang 2
            "Coeur Gravitaire": 2,        # Rang 1
        },
        {  # Niveau 7
            "Essence de Vitalitée": 1,    # Rang 5
            "Essence de Magie": 1,        # Rang 5
            "Gemme Bleue": 1,             # Rang 4
        },
        {  # Niveau 8
            "Essence de Fortitude": 2,     # Rang 5
            "Pilules de Roulette": 2,      # Rang 4
            "Poil Gelé": 2,                # Rang 2
        },
        {  # Niveau 9
            "Fragment Mélioratif": 2,      # Rang 6
            "Essence de Résistance": 1,    # Rang 5
        },
        {  # Niveau 10
            "Fragment Sophiste": 2,        # Rang 6
            "Essence de Sagesse": 1,       # Rang 5
            "Velour de Cervidé": 1,        # Rang 3
        },
        {  # Niveau 11
            "Essence Astrale": 1,              # Rang 7
            "Clochette": 1,                    # Rang 7
            "Circuit Biomécanique": 1,         # Rang 7
        },
        {  # Niveau 12
            "Perle de Chance": 2,              # Rang 7
            "Tissu Perceptif": 5,              # Rang 7
            "Essence Carmine": 3,              # Rang 7
        },
        {  # Niveau 13
            "Ichor Divin": 7,                  # Rang 7
            "Encre de Pouvoir": 3,             # Rang 7
            "Orbe Convergeant": 7,             # Rang 7
        },
    ],

    "Collier": [  # taux coup critique
        {  # Niveau 1
            "Morceau de Cloche": 2,           # Rang 2
            "Eclat de Verre": 4,              # Rang 1
            "Coeur Gravitaire": 5,            # Rang 1
        },
        {  # Niveau 2
            "Morceau de Cloche": 6,           # Rang 2
            "Ether Non-Newtonien": 4,         # Rang 1
            "Poil Gelé": 5,                   # Rang 2
        },
        {  # Niveau 3
            "Ecaille de Phénix": 4,           # Rang 2
            "Ectoplasme Chaud": 3,            # Rang 1
            "Fluide Alien": 3,                # Rang 2
        },
        {  # Niveau 4
            "Iris du Malheur": 2,             # Rang 3
            "Composants Electroniques": 2,    # Rang 3
            "Eclat de Verre": 2,              # Rang 1
        },
        {  # Niveau 5
            "Velour de Cervidé": 3,           # Rang 3
            "Fragment Osseux": 2,             # Rang 3
            "Roche Glycérine": 2,             # Rang 2
        },
        {  # Niveau 6
            "Fragment de Jade": 2,            # Rang 4
            "Poussière Dorée Animée": 2,      # Rang 4
            "Poil Gelé": 2,                   # Rang 2
        },
        {  # Niveau 7
            "Eclat de Crystal": 3,            # Rang 4
            "Moustache de Chat": 5,           # Rang 3
            "Ether Non-Newtonien": 5,         # Rang 1
        },
        {  # Niveau 8
            "Essence de Magie": 6,            # Rang 5
            "Fragment de Jade": 4,            # Rang 4
            "Ectoplasme Chaud": 10,            # Rang 1
        },
        {  # Niveau 9
            "Essence de Sagesse": 3,          # Rang 5
            "Gemme Bleue": 8,                 # Rang 4
            "Composants Electroniques": 2,    # Rang 3
        },
        {  # Niveau 10
            "Fragment Mélioratif": 4,         # Rang 6
            "Essence de Fortitude": 5,        # Rang 5
            "Poussière Animée": 5,            # Rang 1
        },
        {  # Niveau 11
            "Fragment Sophiste": 6,           # Rang 6
            "Essence de Résistance": 6,       # Rang 5
            "Fluide Alien": 15,                # Rang 2
        },
        {  # Niveau 12
            "Essence Astrale": 4,             # Rang 7
            "Clochette": 5,                   # Rang 7
            "Essence de Magie": 9,            # Rang 5
        },
        {  # Niveau 13
            "Ichor Divin": 7,                 # Rang 7
            "Perle de Chance": 7,             # Rang 7
            "Orbe Convergeant": 7,            # Rang 7
        },
    ],

    "Cotte de Maille": [  # défense
        {  # Niveau 1
            "Coeur Gravitaire": 2,              # Rang 1
            "Essence de Résistance": 2,          # Rang 5
            "Poussière Animée": 5,               # Rang 1
        },
        {  # Niveau 2
            "Eclat de Verre": 8,                # Rang 1
            "Coeur Gravitaire": 1,              # Rang 1
            "Ecaille de Phénix": 3,              # Rang 2
        },
        {  # Niveau 3
            "Poil Gelé": 6,                      # Rang 2
            "Fluide Alien": 5,                   # Rang 2
            "Poussière Animée": 4,               # Rang 1
        },
        {  # Niveau 4
            "Fragment Osseux": 4,                # Rang 3
            "Velour de Cervidé": 3,              # Rang 3
            "Roche Glycérine": 4,                # Rang 2
        },
        {  # Niveau 5
            "Composants Electroniques": 3,       # Rang 3
            "Iris du Malheur": 2,                # Rang 3
            "Ectoplasme Chaud": 5,               # Rang 1
        },
        {  # Niveau 6
            "Eclat de Crystal": 3,               # Rang 4
            "Fragment de Jade": 3,               # Rang 4
            "Poil Gelé": 6,                      # Rang 2
        },
        {  # Niveau 7
            "Poussière Dorée Animée": 4,         # Rang 4
            "Fragment Osseux": 5,                # Rang 3
            "Ether Non-Newtonien": 5,            # Rang 1
        },
        {  # Niveau 8
            "Essence de Résistance": 4,          # Rang 5
            "Essence de Fortitude": 3,           # Rang 5
            "Moustache de Chat": 5,              # Rang 3
        },
        {  # Niveau 9
            "Gemme Bleue": 6,                    # Rang 4
            "Essence de Sagesse": 3,             # Rang 5
            "Composants Electroniques": 4,       # Rang 3
        },
        {  # Niveau 10
            "Fragment Mélioratif": 3,            # Rang 6
            "Essence de Résistance": 5,          # Rang 5
            "Poil Gelé": 10,                     # Rang 2
        },
        {  # Niveau 11
            "Fragment Sophiste": 5,              # Rang 6
            "Essence de Fortitude": 6,           # Rang 5
            "Ectoplasme Chaud": 12,              # Rang 1
        },
        {  # Niveau 12
            "Essence Astrale": 5,                # Rang 7
            "Circuit Biomécanique": 4,           # Rang 7
            "Essence de Résistance": 7,          # Rang 5
        },
        {  # Niveau 13
            "Ichor Divin": 7,                    # Rang 7
            "Gemme Prismatique": 7,              # Rang 7
            "Orbe Convergeant": 7,               # Rang 7
        },
    ],

    "Bracelet": [  # force
        {  # Niveau 1
            "Ectoplasme Chaud": 4,               # Rang 1
            "Poussière Animée": 5,               # Rang 1
            "Essence de Fortitude": 2,           # Rang 5
        },
        {  # Niveau 2
            "Roche Glycérine": 5,                # Rang 2
            "Ectoplasme Chaud": 2,              # Rang 1
            "Essence de Fortitude": 3,           # Rang 5
        },
        {  # Niveau 3
            "Poil Gelé": 5,                      # Rang 2
            "Fluide Alien": 5,                   # Rang 2
            "Eclat de Verre": 6,                 # Rang 1
        },
        {  # Niveau 4
            "Iris du Malheur": 3,                # Rang 3
            "Fragment Osseux": 3,                # Rang 3
            "Poussière Animée": 4,               # Rang 1
        },
        {  # Niveau 5
            "Velour de Cervidé": 3,              # Rang 3
            "Moustache de Chat": 4,              # Rang 3
            "Roche Glycérine": 4,                # Rang 2
        },
        {  # Niveau 6
            "Fragment de Jade": 3,               # Rang 4
            "Poussière Dorée Animée": 2,         # Rang 4
            "Fluide Alien": 6,                   # Rang 2
        },
        {  # Niveau 7
            "Eclat de Crystal": 3,               # Rang 4
            "Fragment Osseux": 5,                # Rang 3
            "Ectoplasme Chaud": 6,               # Rang 1
        },
        {  # Niveau 8
            "Essence de Fortitude": 4,           # Rang 5
            "Essence de Résistance": 2,          # Rang 5
            "Coeur Gravitaire": 10,              # Rang 1
        },
        {  # Niveau 9
            "Gemme Bleue": 7,                    # Rang 4
            "Fragment de Jade": 4,               # Rang 4
            "Ether Non-Newtonien": 8,            # Rang 1
        },
        {  # Niveau 10
            "Fragment Mélioratif": 3,            # Rang 6
            "Essence de Fortitude": 6,           # Rang 5
            "Roche Glycérine": 8,                # Rang 2
        },
        {  # Niveau 11
            "Fragment Sophiste": 5,              # Rang 6
            "Essence de Résistance": 6,          # Rang 5
            "Poil Gelé": 10,                     # Rang 2
        },
        {  # Niveau 12
            "Essence Carmine": 5,                # Rang 7
            "Perle de Chance": 5,                # Rang 7
            "Essence de Fortitude": 7,           # Rang 5
        },
        {  # Niveau 13
            "Ichor Divin": 7,                    # Rang 7
            "Feu Grégorien": 7,                  # Rang 7
            "Essence Astrale": 7,                # Rang 7
        },
    ],

    "Gants": [  # dégâts coup critique
        {  # Niveau 1
            "Roche Glycérine": 3,                # Rang 2
            "Poussière Animée": 8,              # Rang 1
        },
        {  # Niveau 2
            "Roche Glycérine": 7,                # Rang 2
            "Ectoplasme Chaud": 5,              # Rang 1
            "Essence de Fortitude": 2,           # Rang 5
        },
        {  # Niveau 3
            "Ecaille de Phénix": 6,              # Rang 2
            "Eclat de Verre": 5,                 # Rang 1
            "Poil Gelé": 4,                      # Rang 2
        },
        {  # Niveau 4
            "Iris du Malheur": 3,                # Rang 3
            "Moustache de Chat": 4,              # Rang 3
            "Ether Non-Newtonien": 6,            # Rang 1
        },
        {  # Niveau 5
            "Fragment Osseux": 3,                # Rang 3
            "Velour de Cervidé": 3,              # Rang 3
            "Fluide Alien": 5,                   # Rang 2
        },
        {  # Niveau 6
            "Eclat de Crystal": 3,               # Rang 4
            "Fragment de Jade": 2,               # Rang 4
            "Poussière Animée": 5,               # Rang 1
        },
        {  # Niveau 7
            "Gemme Bleue": 3,                    # Rang 4
            "Moustache de Chat": 5,              # Rang 3
            "Coeur Gravitaire": 10,              # Rang 1
        },
        {  # Niveau 8
            "Essence de Fortitude": 4,           # Rang 5
            "Composants Electroniques": 3,       # Rang 3
            "Ectoplasme Chaud": 8,               # Rang 1
        },
        {  # Niveau 9
            "Essence de Magie": 3,               # Rang 5
            "Fragment de Jade": 5,               # Rang 4
            "Poil Gelé": 5,                      # Rang 2
        },
        {  # Niveau 10
            "Fragment de Fatalité": 3,           # Rang 6
            "Essence de Fortitude": 5,           # Rang 5
            "Eclat de Verre": 10,                # Rang 1
        },
        {  # Niveau 11
            "Fragment Sophiste": 5,              # Rang 6
            "Essence de Résistance": 5,          # Rang 5
            "Fluide Alien": 12,                  # Rang 2
        },
        {  # Niveau 12
            "Essence Dorée": 4,                  # Rang 7
            "Clochette": 4,                      # Rang 7
            "Essence de Magie": 7,               # Rang 5
        },
        {  # Niveau 13
            "Tissu Perceptif": 7,                # Rang 7
            "Encre de Pouvoir": 7,               # Rang 7
            "Orbe Convergeant": 7,               # Rang 7
        },
    ],

    "Anneau": [  # dégâts sort critique
        {  # Niveau 1 (total 7)
            "Ether Non-Newtonien": 4,         # Rang 1
            "Poussière Animée": 3,            # Rang 1
        },
        {  # Niveau 2 (total 7)
            "Ecaille de Phénix": 5,           # Rang 2
            "Essence de Magie": 2,            # Rang 5
        },
        {  # Niveau 3 (total 6)
            "Fluide Alien": 4,                # Rang 2
            "Eclat de Verre": 2,              # Rang 1
        },
        {  # Niveau 4
            "Moustache de Chat": 3,           # Rang 3
            "Iris du Malheur": 2,             # Rang 3
            "Ectoplasme Chaud": 3,            # Rang 1
        },
        {  # Niveau 5
            "Composants Electroniques": 4,    # Rang 3
            "Poil Gelé": 3,                   # Rang 2
            "Roche Glycérine": 3,             # Rang 2
        },
        {  # Niveau 6
            "Fragment de Jade": 3,            # Rang 4
            "Poussière Dorée Animée": 3,      # Rang 4
            "Moustache de Chat": 3,           # Rang 3
        },
        {  # Niveau 7
            "Eclat de Crystal": 4,            # Rang 4
            "Ether Non-Newtonien": 6,         # Rang 1
            "Ecaille de Phénix": 5,           # Rang 2
        },
        {  # Niveau 8
            "Essence de Magie": 5,            # Rang 5
            "Essence de Sagesse": 3,          # Rang 5
            "Fragment de Jade": 5,            # Rang 4
        },
        {  # Niveau 9
            "Gemme Bleue": 6,                 # Rang 4
            "Velour de Cervidé": 5,           # Rang 3
            "Ectoplasme Chaud": 5,            # Rang 1
        },
        {  # Niveau 10
            "Fragment Mélioratif": 4,         # Rang 6
            "Essence de Magie": 6,            # Rang 5
            "Poil Gelé": 10,                  # Rang 2
        },
        {  # Niveau 11
            "Fragment Sophiste": 6,           # Rang 6
            "Essence de Sagesse": 6,          # Rang 5
            "Ether Non-Newtonien": 10,        # Rang 1
        },
        {  # Niveau 12
            "Essence Astrale": 5,             # Rang 7
            "Clochette": 5,                   # Rang 7
            "Essence de Magie": 7,            # Rang 5
        },
        {  # Niveau 13
            "Ichor Divin": 7,                 # Rang 7
            "Gemme Prismatique": 7,           # Rang 7
            "Orbe Convergeant": 7,            # Rang 7
        },
    ],

    "Bottes": [  # taux esquive
        {  # Niveau 1 (total 6)
            "Coeur Gravitaire": 3,            # Rang 1
            "Ectoplasme Chaud": 2,            # Rang 1
            "Poussière Animée": 1,            # Rang 1
        },
        {  # Niveau 2 (total 6)
            "Essence de Vitalitée": 2,        # Rang 5
            "Essence de Fortitude": 2,        # Rang 5
            "Eclat de Verre": 2,              # Rang 1
        },
        {  # Niveau 3 (total 7)
            "Fluide Alien": 3,                # Rang 2
            "Poil Gelé": 3,                   # Rang 2
            "Ether Non-Newtonien": 1,         # Rang 1
        },
        {  # Niveau 4
            "Fragment Osseux": 3,             # Rang 3
            "Velour de Cervidé": 2,           # Rang 3
            "Ectoplasme Chaud": 3,            # Rang 1
        },
        {  # Niveau 5
            "Roche Glycérine": 4,             # Rang 2
            "Moustache de Chat": 3,           # Rang 3
            "Poussière Animée": 4,            # Rang 1
        },
        {  # Niveau 6
            "Fragment de Jade": 3,            # Rang 4
            "Gemme Bleue": 3,                 # Rang 4
            "Ether Non-Newtonien": 4,         # Rang 1
        },
        {  # Niveau 7
            "Poussière Dorée Animée": 3,      # Rang 4
            "Iris du Malheur": 3,             # Rang 3
            "Fluide Alien": 5,                # Rang 2
        },
        {  # Niveau 8
            "Essence de Vitalitée": 5,        # Rang 5
            "Essence de Résistance": 3,       # Rang 5
            "Fragment de Jade": 4,            # Rang 4
        },
        {  # Niveau 9
            "Gemme Bleue": 6,                 # Rang 4
            "Poil Gelé": 6,                   # Rang 2
            "Ectoplasme Chaud": 4,            # Rang 1
        },
        {  # Niveau 10
            "Fragment Mélioratif": 4,         # Rang 6
            "Essence de Fortitude": 6,        # Rang 5
            "Coeur Gravitaire": 10,           # Rang 1
        },
        {  # Niveau 11
            "Fragment Sophiste": 5,           # Rang 6
            "Essence de Résistance": 5,       # Rang 5
            "Poussière Animée": 12,           # Rang 1
        },
        {  # Niveau 12
            "Essence Dorée": 5,               # Rang 7
            "Perle de Chance": 5,             # Rang 7
            "Essence de Fortitude": 7,        # Rang 5
        },
        {  # Niveau 13
            "Ichor Divin": 7,                 # Rang 7
            "Feu Grégorien": 7,               # Rang 7
            "Tissu Perceptif": 7,             # Rang 7
        },
    ],


    # sorciere

    "Fiole de Sève": [  # + mana
        {  # Niveau 1 (total 6)
            "Poussière Animée": 3,            # Rang 1
            "Eclat de Verre": 2,              # Rang 1
            "Ether Non-Newtonien": 1,         # Rang 1
        },
        {  # Niveau 2 (total 6)
            "Ectoplasme Chaud": 4,            # Rang 1
            "Fluide Alien": 2,                # Rang 2
        },
        {  # Niveau 3 (total 7)
            "Ecaille de Phénix": 4,           # Rang 2
            "Poil Gelé": 3,                   # Rang 2
        },
        {  # Niveau 4
            "Iris du Malheur": 3,             # Rang 3
            "Composants Electroniques": 3,    # Rang 3
            "Eclat de Verre": 3,              # Rang 1
        },
        {  # Niveau 5
            "Velour de Cervidé": 3,           # Rang 3
            "Fluide Alien": 5,                # Rang 2
            "Ether Non-Newtonien": 4,         # Rang 1
        },
        {  # Niveau 6
            "Fragment de Jade": 3,            # Rang 4
            "Poussière Dorée Animée": 2,      # Rang 4
            "Poil Gelé": 6,                   # Rang 2
        },
        {  # Niveau 7
            "Eclat de Crystal": 3,            # Rang 4
            "Moustache de Chat": 4,           # Rang 3
            "Essence de Magie": 2,            # Rang 5
        },
        {  # Niveau 8
            "Essence de Sagesse": 5,          # Rang 5
            "Essence de Vitalitée": 4,        # Rang 5
            "Fragment de Jade": 4,            # Rang 4
        },
        {  # Niveau 9
            "Gemme Bleue": 6,                 # Rang 4
            "Velour de Cervidé": 5,           # Rang 3
            "Ectoplasme Chaud": 5,            # Rang 1
        },
        {  # Niveau 10
            "Fragment Sophiste": 3,           # Rang 6
            "Essence de Magie": 6,            # Rang 5
            "Fluide Alien": 10,               # Rang 2
        },
        {  # Niveau 11
            "Fragment Mélioratif": 5,         # Rang 6
            "Essence de Sagesse": 6,          # Rang 5
            "Poussière Animée": 12,           # Rang 1
        },
        {  # Niveau 12
            "Essence Astrale": 5,             # Rang 7
            "Clochette": 5,                   # Rang 7
            "Essence de Magie": 7,            # Rang 5
        },
        {  # Niveau 13
            "Ichor Divin": 7,                 # Rang 7
            "Orbe Convergeant": 7,            # Rang 7
            "Essence Dorée": 7,               # Rang 7
        },
    ],

    "Fiole de Rosée": [
        {  # Niveau 1 (total 6)
            "Poussière Animée": 3,           # Rang 1
            "Coeur Gravitaire": 3,           # Rang 1
        },
        {  # Niveau 2 (total 6)
            "Ectoplasme Chaud": 3,           # Rang 1
            "Fluide Alien": 3,               # Rang 2
        },
        {  # Niveau 3 (total 7)
            "Ecaille de Phénix": 4,          # Rang 2
            "Poil Gelé": 3,                  # Rang 2
        },
        {  # Niveau 4
            "Velour de Cervidé": 3,          # Rang 3
            "Iris du Malheur": 3,            # Rang 3
            "Eclat de Verre": 3,             # Rang 1
        },
        {  # Niveau 5
            "Composants Electroniques": 4,   # Rang 3
            "Moustache de Chat": 4,          # Rang 3
            "Ether Non-Newtonien": 2,        # Rang 1
        },
        {  # Niveau 6
            "Fragment de Jade": 3,           # Rang 4
            "Gemme Bleue": 2,                # Rang 4
            "Poussière Dorée Animée": 3,     # Rang 4
        },
        {  # Niveau 7
            "Eclat de Crystal": 4,           # Rang 4
            "Essence de Vitalitée": 5,       # Rang 5
            "Ectoplasme Chaud": 6,           # Rang 1
        },
        {  # Niveau 8
            "Essence de Résistance": 5,      # Rang 5
            "Poil Gelé": 6,                  # Rang 2
            "Fragment de Jade": 4,           # Rang 4
        },
        {  # Niveau 9
            "Gemme Bleue": 6,                # Rang 4
            "Velour de Cervidé": 5,          # Rang 3
            "Ether Non-Newtonien": 6,        # Rang 1
        },
        {  # Niveau 10
            "Fragment Mélioratif": 4,        # Rang 6
            "Essence de Fortitude": 6,       # Rang 5
            "Fluide Alien": 10,              # Rang 2
        },
        {  # Niveau 11
            "Fragment Sophiste": 5,          # Rang 6
            "Essence de Résistance": 5,      # Rang 5
            "Poussière Animée": 12,          # Rang 1
        },
        {  # Niveau 12
            "Essence Astrale": 5,            # Rang 7
            "Clochette": 5,                  # Rang 7
            "Essence de Vitalitée": 7,       # Rang 5
        },
        {  # Niveau 13
            "Ichor Divin": 7,                # Rang 7
            "Orbe Convergeant": 7,           # Rang 7
            "Gemme Prismatique": 7,          # Rang 7
        },
    ],

    "Tisane d'Ecorce": [
        {  # Niveau 1 (total 6)
            "Ectoplasme Chaud": 3,           # Rang 1
            "Poussière Animée": 3,           # Rang 1
        },
        {  # Niveau 2 (total 7)
            "Coeur Gravitaire": 4,           # Rang 1
            "Poil Gelé": 3,                  # Rang 2
        },
        {  # Niveau 3 (total 7)
            "Ecaille de Phénix": 3,          # Rang 2
            "Eclat de Verre": 2,             # Rang 1
            "Ether Non-Newtonien": 2,        # Rang 1
        },
        {  # Niveau 4
            "Moustache de Chat": 3,          # Rang 3
            "Iris du Malheur": 3,            # Rang 3
            "Poussière Animée": 3,           # Rang 1
        },
        {  # Niveau 5
            "Composants Electroniques": 4,   # Rang 3
            "Fluide Alien": 4,               # Rang 2
            "Roche Glycérine": 3,            # Rang 2
        },
        {  # Niveau 6
            "Fragment de Jade": 3,           # Rang 4
            "Poussière Dorée Animée": 3,     # Rang 4
            "Essence de Vitalitée": 2,       # Rang 5
        },
        {  # Niveau 7
            "Gemme Bleue": 4,                # Rang 4
            "Velour de Cervidé": 4,          # Rang 3
            "Poussière Animée": 5,           # Rang 1
        },
        {  # Niveau 8
            "Essence de Résistance": 5,      # Rang 5
            "Essence de Fortitude": 4,       # Rang 5
            "Fragment de Jade": 4,           # Rang 4
        },
        {  # Niveau 9
            "Eclat de Crystal": 6,           # Rang 4
            "Ether Non-Newtonien": 6,        # Rang 1
            "Poil Gelé": 6,                  # Rang 2
        },
        {  # Niveau 10
            "Fragment Mélioratif": 4,        # Rang 6
            "Essence de Vitalitée": 6,       # Rang 5
            "Fluide Alien": 10,              # Rang 2
        },
        {  # Niveau 11
            "Fragment Sophiste": 6,          # Rang 6
            "Essence de Fortitude": 6,       # Rang 5
            "Poussière Animée": 12,          # Rang 1
        },
        {  # Niveau 12
            "Essence Astrale": 5,            # Rang 7
            "Clochette": 5,                  # Rang 7
            "Essence de Résistance": 7,      # Rang 5
        },
        {  # Niveau 13
            "Ichor Divin": 7,                # Rang 7
            "Orbe Convergeant": 7,           # Rang 7
            "Essence Dorée": 7,              # Rang 7
        },
    ],

    "Tisane de Racine": [
        {  # Niveau 1 (total 6)
            "Ether Non-Newtonien": 3,        # Rang 1
            "Poussière Animée": 3,           # Rang 1
        },
        {  # Niveau 2 (total 6)
            "Ectoplasme Chaud": 3,           # Rang 1
            "Fluide Alien": 3,               # Rang 2
        },
        {  # Niveau 3 (total 7)
            "Ecaille de Phénix": 4,          # Rang 2
            "Eclat de Verre": 3,             # Rang 1
        },
        {  # Niveau 4
            "Poil Gelé": 3,                  # Rang 2
            "Iris du Malheur": 3,            # Rang 3
            "Composants Electroniques": 2,   # Rang 3
        },
        {  # Niveau 5
            "Roche Glycérine": 4,            # Rang 2
            "Moustache de Chat": 4,          # Rang 3
            "Poussière Animée": 3,           # Rang 1
        },
        {  # Niveau 6
            "Fragment de Jade": 3,           # Rang 4
            "Poussière Dorée Animée": 3,     # Rang 4
            "Essence de Magie": 2,           # Rang 5
        },
        {  # Niveau 7
            "Eclat de Crystal": 4,           # Rang 4
            "Velour de Cervidé": 4,          # Rang 3
            "Fluide Alien": 5,               # Rang 2
        },
        {  # Niveau 8
            "Essence de Sagesse": 5,         # Rang 5
            "Essence de Magie": 4,           # Rang 5
            "Fragment de Jade": 4,           # Rang 4
        },
        {  # Niveau 9
            "Gemme Bleue": 6,                # Rang 4
            "Ether Non-Newtonien": 6,        # Rang 1
            "Ecaille de Phénix": 5,          # Rang 2
        },
        {  # Niveau 10
            "Fragment Mélioratif": 4,        # Rang 6
            "Essence de Magie": 6,           # Rang 5
            "Poil Gelé": 10,                 # Rang 2
        },
        {  # Niveau 11
            "Fragment Sophiste": 6,          # Rang 6
            "Essence de Sagesse": 6,         # Rang 5
            "Poussière Animée": 12,          # Rang 1
        },
        {  # Niveau 12
            "Essence Astrale": 5,            # Rang 7
            "Clochette": 5,                  # Rang 7
            "Essence de Magie": 7,           # Rang 5
        },
        {  # Niveau 13
            "Ichor Divin": 7,                # Rang 7
            "Orbe Convergeant": 7,           # Rang 7
            "Gemme Prismatique": 7,          # Rang 7
        },
    ],


    "Charge de Feu": [
        {  # Niveau 1 (6 ingrédients)
            "Poussière Animée": 3,            # Rang 1
            "Ether Non-Newtonien": 3,         # Rang 1
        },
        {  # Niveau 2 (6 ingrédients)
            "Ectoplasme Chaud": 3,            # Rang 1
            "Ecaille de Phénix": 4,          # Rang 2
        },
        {  # Niveau 3 (7 ingrédients)
            "Ecaille de Phénix": 15,          # Rang 2
        },
        {  # Niveau 4
            "Iris du Malheur": 4,             # Rang 3
            "Velour de Cervidé": 3,           # Rang 3
            "Poussière Animée": 3,            # Rang 1
        },
        {  # Niveau 5
            "Roche Glycérine": 4,         # Rang 3
            "Essence de Magie": 8,            # Rang 5
        },
        {  # Niveau 6
            "Fragment de Jade": 3,            # Rang 4
            "Poussière Dorée Animée": 3,      # Rang 4
            "Essence de Fortitude": 2,        # Rang 5
        },
        {  # Niveau 7
            "Essence de Magie": 4,            # Rang 5
            "Ether Non-Newtonien": 5,         # Rang 1
        },
        {  # Niveau 8
            "Essence de Sagesse": 14,          # Rang 5
            "Fragment de Jade": 4,            # Rang 4
        },
        {  # Niveau 9
            "Eclat de Crystal": 16,            # Rang 4
            "Essence de Fortitude": 4,        # Rang 5
        },
        {  # Niveau 10
            "Fragment Mélioratif": 4,         # Rang 6
            "Essence de Magie": 6,            # Rang 5
            "Roche Glycérine": 6,         # Rang 3
        },
        {  # Niveau 11
            "Fragment Sophiste": 6,           # Rang 6
            "Essence de Sagesse": 6,          # Rang 5
            "Poussière Dorée Animée": 6,         # Rang 6
        },
        {  # Niveau 12
            "Essence Astrale": 5,             # Rang 7
            "Clochette": 5,                   # Rang 7
            "Essence de Magie": 7,            # Rang 5
        },
        {  # Niveau 13
            "Ichor Divin": 7,                 # Rang 7
            "Orbe Convergeant": 7,            # Rang 7
            "Gemme Prismatique": 7,           # Rang 7
        },
    ],

    "Charge de Glace": [
        {  # Niveau 1
            "Poussière Animée": 3,
            "Ether Non-Newtonien": 3,
        },
        {  # Niveau 2
            "Poil Gelé": 3,
            "Fluide Alien": 3,
        },
        {  # Niveau 3
            "Eclat de Verre": 13,
        },
        {  # Niveau 4
            "Iris du Malheur": 7,
            "Poussière Animée": 3,
        },
        {  # Niveau 5
            "Moustache de Chat": 4,
            "Velour de Cervidé": 4,
            "Essence de Sagesse": 2,
        },
        {  # Niveau 6
            "Fragment de Jade": 3,
            "Poussière Dorée Animée": 3,
            "Essence de Résistance": 2,
        },
        {  # Niveau 7
            "Gemme Bleue": 4,
            "Essence de Sagesse": 4,
            "Poil Gelé": 5,
        },
        {  # Niveau 8
            "Velour de Cervidé": 4,
            "Essence de Résistance": 4,
            "Essence Astrale": 5,
        },
        {  # Niveau 9
            "Eclat de Crystal": 5,
            "Fragment de Jade": 5,
            "Essence de Magie": 4,
        },
        {  # Niveau 10
            "Fragment Mélioratif": 4,
            "Essence de Résistance": 6,
            "Poil Gelé": 8,
        },
        {  # Niveau 11
            "Fragment Sophiste": 6,
            "Essence de Sagesse": 6,
            "Fluide Alien": 10,
        },
        {  # Niveau 12
            "Essence Astrale": 5,
            "Clochette": 5,
            "Essence de Résistance": 7,
        },
        {  # Niveau 13
            "Ichor Divin": 7,
            "Orbe Convergeant": 7,
            "Gemme Prismatique": 7,
        },
    ],

    "Charge de Foudre": [
        {  # Niveau 1
            "Ether Non-Newtonien": 3,
            "Poussière Animée": 3,
        },
        {  # Niveau 2
            "Coeur Gravitaire": 12,
        },
        {  # Niveau 3
            "Ecaille de Phénix": 3,
            "Eclat de Verre": 2,
            "Roche Glycérine": 2,
        },
        {  # Niveau 4
            "Iris du Malheur": 3,
            "Composants Electroniques": 4,
            "Poussière Animée": 3,
        },
        {  # Niveau 5
            "Velour de Cervidé": 4,
            "Essence de Fortitude": 13,
        },
        {  # Niveau 6
            "Fragment de Jade": 3,
            "Poussière Dorée Animée": 3,
            "Essence de Sagesse": 2,
        },
        {  # Niveau 7
            "Essence de Fortitude": 8,
            "Poil Gelé": 5,
        },
        {  # Niveau 8
            "Essence de Magie": 4,
            "Ecaille de Phénix": 5,
            "Fragment de Jade": 4,
        },
        {  # Niveau 9
            "Eclat de Crystal": 6,
            "Ether Non-Newtonien": 5,
            "Composants Electroniques": 5,
        },
        {  # Niveau 10
            "Fragment Mélioratif": 4,
            "Essence de Sagesse": 6,
            "Poil Gelé": 5,
        },
        {  # Niveau 11
            "Fragment Sophiste": 6,
            "Essence de Fortitude": 6,
            "Poussière Animée": 12,
        },
        {  # Niveau 12
            "Essence Astrale": 5,
            "Clochette": 5,
            "Essence de Sagesse": 7,
        },
        {  # Niveau 13
            "Ichor Divin": 7,
            "Orbe Convergeant": 7,
            "Gemme Prismatique": 7,
        },
    ],

    "Charge de Terre": [
        {  # Niveau 1
            "Roche Glycérine": 3,              # Rang 1
            "Poussière Animée": 3,             # Rang 1
        },
        {  # Niveau 2
            "Ectoplasme Chaud": 10,             # Rang 1
        },
        {  # Niveau 3
            "Morceau de Cloche": 3,            # Rang 2
            "Poil Gelé": 3,                    # Rang 2
        },
        {  # Niveau 4
            "Ecaille de Phénix": 4,            # Rang 3
            "Velour de Cervidé": 3,            # Rang 3
            "Fluide Alien": 2,                 # Rang 2
        },
        {  # Niveau 5
            "Fragment de Jade": 3,             # Rang 4
            "Essence de Fortitude": 2,         # Rang 5
        },
        {  # Niveau 6
            "Essence de Résistance": 3,        # Rang 5
            "Eclat de Crystal": 3,             # Rang 4
            "Poil Gelé": 4,                    # Rang 2
        },
        {  # Niveau 7
            "Roche Glycérine": 6,
            "Essence de Fortitude": 4,
            "Fragment de Jade": 4,
        },
        {  # Niveau 8
            "Essence de Magie": 4,
            "Velour de Cervidé": 4,
            "Ecaille de Phénix": 5,
        },
        {  # Niveau 9
            "Essence de Résistance": 11,
            "Poussière Animée": 6,
        },
        {  # Niveau 10
            "Fragment Mélioratif": 4,
            "Essence de Sagesse": 5,
        },
        {  # Niveau 11
            "Fragment Sophiste": 6,
            "Poil Gelé": 8,
            "Essence de Fortitude": 6,
        },
        {  # Niveau 12
            "Essence Astrale": 5,
            "Clochette": 5,
            "Essence de Magie": 7,
        },
        {  # Niveau 13
            "Ichor Divin": 7,
            "Orbe Convergeant": 7,
            "Gemme Prismatique": 7,
        },
    ],

    "Charge de Chair": [
    {  # Niveau 1
        "Ectoplasme Chaud": 3,
        "Poussière Animée": 3,
    },
    {  # Niveau 2
        "Fluide Alien": 3,
        "Poil Gelé": 3,
    },
    {  # Niveau 3
        "Essence de Fortitude": 2,
        "Roche Glycérine": 4,
    },
    {  # Niveau 4
        "Ecaille de Phénix": 4,
        "Iris du Malheur": 3,
        "Eclat de Verre": 3,
    },
    {  # Niveau 5
        "Essence de Fortitude": 3,
        "Velour de Cervidé": 3,
    },
    {  # Niveau 6
        "Roche Glycérine": 5,
        "Poil Gelé": 4,
        "Essence de Résistance": 3,
    },
    {  # Niveau 7
        "Fragment de Jade": 4,
        "Essence de Fortitude": 4,
        "Ectoplasme Chaud": 6,
    },
    {  # Niveau 8
        "Essence de Magie": 4,
        "Essence de Sagesse": 4,
    },
    {  # Niveau 9
        "Eclat de Crystal": 5,
        "Velour de Cervidé": 5,
        "Essence de Fortitude": 5,
    },
    {  # Niveau 10
        "Fragment Mélioratif": 4,
        "Essence de Résistance": 6,
        "Poil Gelé": 6,
    },
    {  # Niveau 11
        "Fragment Sophiste": 6,
        "Essence de Fortitude": 6,
        "Roche Glycérine": 8,
    },
    {  # Niveau 12
        "Essence Astrale": 5,
        "Clochette": 5,
        "Essence de Magie": 7,
    },
    {  # Niveau 13
        "Ichor Divin": 7,
        "Orbe Convergeant": 7,
        "Gemme Prismatique": 7,
    },
],

    "Charge de Sang": [
    {  # Niveau 1
        "Fluide Alien": 3,
        "Poussière Animée": 3,
    },
    {  # Niveau 2
        "Ectoplasme Chaud": 3,
        "Ether Non-Newtonien": 3,
    },
    {  # Niveau 3
        "Poil Gelé": 3,
        "Essence de Résistance": 2,
    },
    {  # Niveau 4
        "Iris du Malheur": 3,
        "Roche Glycérine": 3,
    },
    {  # Niveau 5
        "Ecaille de Phénix": 4,
        "Essence de Magie": 3,
    },
    {  # Niveau 6
        "Velour de Cervidé": 4,
        "Essence de Sagesse": 3,
        "Eclat de Verre": 4,
    },
    {  # Niveau 7
        "Fragment de Jade": 8,
        "Essence de Résistance": 4,
    },
    {  # Niveau 8
        "Essence de Fortitude": 4,
        "Poil Gelé": 5,
        "Ecaille de Phénix": 5,
    },
    {  # Niveau 9
        "Eclat de Crystal": 5,
        "Essence de Magie": 5,
    },
    {  # Niveau 10
        "Fragment Mélioratif": 4,
        "Essence de Sagesse": 15,
    },
    {  # Niveau 11
        "Fragment Sophiste": 6,
        "Essence de Fortitude": 6,
        "Roche Glycérine": 7,
    },
    {  # Niveau 12
        "Essence Astrale": 5,
        "Clochette": 5,
        "Essence de Magie": 7,
    },
    {  # Niveau 13
        "Ichor Divin": 7,
        "Orbe Convergeant": 7,
        "Gemme Prismatique": 7,
    },
],


    # herboriste

    "Ration Jindagee": [
        {  # Niveau 1
            "Eclat de Verre": 3,              # Rang 1
            "Ether Non-Newtonien": 3,         # Rang 1
            "Poil Gelé": 1,                   # Rang 2
        },
        {  # Niveau 2
            "Fluide Alien": 3,                # Rang 2
            "Poussière Animée": 3,            # Rang 1
            "Ecaille de Phénix": 2,           # Rang 2
        },
        {  # Niveau 3
            "Velour de Cervidé": 2,           # Rang 3
            "Composants Electroniques": 2,    # Rang 3
            "Iris du Malheur": 1,             # Rang 3
        },
        {  # Niveau 4
            "Gemme Bleue": 2,                 # Rang 4
            "Fragment de Jade": 2,            # Rang 4
            "Moustache de Chat": 3,           # Rang 3
        },
        {  # Niveau 5
            "Essence de Vitalitée": 3,        # Rang 5
            "Fragment Sophiste": 2,           # Rang 6
            "Poussière Animée": 4,            # Rang 1
        },
    ],
    "Ration Jindagee Raffinée": [
        {  # Niveau 1
            "Coeur Gravitaire": 3,            # Rang 1
            "Ectoplasme Chaud": 2,            # Rang 1
            "Roche Glycérine": 2,             # Rang 2
        },
        {  # Niveau 2
            "Ecaille de Phénix": 3,           # Rang 2
            "Fluide Alien": 2,                # Rang 2
            "Essence de Magie": 2,            # Rang 5
        },
        {  # Niveau 3
            "Fragment Osseux": 3,             # Rang 3
            "Velour de Cervidé": 2,           # Rang 3
            "Eclat de Crystal": 1,            # Rang 4
        },
        {  # Niveau 4
            "Poussière Dorée Animée": 3,      # Rang 4
            "Fragment Mélioratif": 2,         # Rang 6
            "Essence de Fortitude": 3,        # Rang 5
        },
        {  # Niveau 5
            "Clochette": 5,                   # Rang 7
            "Perle de Chance": 5,             # Rang 7
            "Essence de Magie": 6,            # Rang 5
        },
    ],
    "Ration Aatma": [
        {  # Niveau 1
            "Poussière Animée": 4,            # Rang 1
            "Ectoplasme Chaud": 3,            # Rang 1
        },
        {  # Niveau 2
            "Fluide Alien": 3,                # Rang 2
            "Morceau de Cloche": 2,           # Rang 2
            "Ether Non-Newtonien": 2,         # Rang 1
        },
        {  # Niveau 3
            "Fragment Osseux": 2,             # Rang 3
            "Composants Electroniques": 2,    # Rang 3
            "Poil Gelé": 3,                   # Rang 2
        },
        {  # Niveau 4
            "Gemme Bleue": 2,                 # Rang 4
            "Eclat de Crystal": 2,            # Rang 4
            "Velour de Cervidé": 3,           # Rang 3
        },
        {  # Niveau 5
            "Fragment Sophiste": 2,           # Rang 6
            "Essence de Résistance": 4,       # Rang 5
            "Poussière Animée": 5,            # Rang 1
        },
    ],

    "Ration Aatma Rafinée": [
        {  # Niveau 1
            "Ether Non-Newtonien": 3,         # Rang 1
            "Poil Gelé": 2,                   # Rang 2
            "Eclat de Verre": 2,              # Rang 1
        },
        {  # Niveau 2
            "Ecaille de Phénix": 3,           # Rang 2
            "Essence de Sagesse": 2,          # Rang 5
            "Fluide Alien": 3,                # Rang 2
        },
        {  # Niveau 3
            "Moustache de Chat": 2,           # Rang 3
            "Fragment de Jade": 2,            # Rang 4
            "Fragment Osseux": 2,             # Rang 3
        },
        {  # Niveau 4
            "Essence de Fortitude": 4,        # Rang 5
            "Poussière Dorée Animée": 3,      # Rang 4
            "Fragment de Fatalité": 2,        # Rang 6
        },
        {  # Niveau 5
            "Tissu Perceptif": 5,             # Rang 7
            "Ichor Divin": 5,                 # Rang 7
            "Essence de Magie": 6,            # Rang 5
        },
    ],
    "Ration Cristalline": [
        {  # Niveau 1
            "Eclat de Verre": 3,              # Rang 1
            "Ether Non-Newtonien": 3,         # Rang 1
            "Eclat de Crystal": 1,            # Rang 4
        },
        {  # Niveau 2
            "Eclat de Crystal": 3,            # Rang 4
            "Gemme Bleue": 2,                 # Rang 4
            "Poil Gelé": 2,                   # Rang 2
        },
        {  # Niveau 3
            "Fragment Mélioratif": 2,         # Rang 6
            "Poussière Dorée Animée": 3,      # Rang 4
            "Velour de Cervidé": 3,           # Rang 3
        },
        {  # Niveau 4
            "Essence de Sagesse": 3,          # Rang 5
            "Fragment Sophiste": 2,           # Rang 6
            "Composants Electroniques": 3,    # Rang 3
        },
        {  # Niveau 5
            "Gemme Prismatique": 5,           # Rang 7
            "Orbe Convergeant": 5,            # Rang 7
            "Essence de Magie": 6,            # Rang 5
        },
    ],
    "Ration d'Hydromel": [
        {  # Niveau 1
            "Ectoplasme Chaud": 4,            # Rang 1
            "Ether Non-Newtonien": 2,         # Rang 1
        },
        {  # Niveau 2
            "Morceau de Cloche": 3,           # Rang 2
            "Roche Glycérine": 3,             # Rang 2
            "Poussière Animée": 2,            # Rang 1
        },
        {  # Niveau 3
            "Composants Electroniques": 3,    # Rang 3
            "Iris du Malheur": 2,             # Rang 3
            "Ecaille de Phénix": 3,           # Rang 2
        },
        {  # Niveau 4
            "Fragment de Jade": 3,            # Rang 4
            "Poussière Dorée Animée": 2,      # Rang 4
            "Essence de Fortitude": 3,        # Rang 5
        },
        {  # Niveau 5
            "Encre de Pouvoir": 5,            # Rang 7
            "Circuit Biomécanique": 5,        # Rang 7
            "Essence de Vitalitée": 6,        # Rang 5
        },
    ],
    "Ration Ambroisie": [
        {  # Niveau 1
            "Ether Non-Newtonien": 3,         # Rang 1
            "Ectoplasme Chaud": 3,            # Rang 1
            "Eclat de Verre": 2,              # Rang 1
        },
        {  # Niveau 2
            "Fluide Alien": 3,                # Rang 2
            "Ecaille de Phénix": 2,           # Rang 2
            "Essence de Sagesse": 2,          # Rang 5
        },
        {  # Niveau 3
            "Velour de Cervidé": 3,           # Rang 3
            "Fragment Osseux": 2,             # Rang 3
            "Fragment de Jade": 2,            # Rang 4
        },
        {  # Niveau 4
            "Essence de Magie": 4,            # Rang 5
            "Fragment Mélioratif": 2,         # Rang 6
            "Poil Gelé": 4,                   # Rang 2
        },
        {  # Niveau 5
            "Ichor Divin": 5,                 # Rang 7
            "Réceptacle Anastral": 5,         # Rang 7
            "Essence de Sagesse": 6,          # Rang 5
        },
    ],
    "Ration Explosive": [
        {  # Niveau 1
            "Poussière Animée": 3,              # Rang 1
            "Eclat de Verre": 2,                # Rang 1
            "Poil Gelé": 2,                     # Rang 2
        },
        {  # Niveau 2
            "Fluide Alien": 3,                  # Rang 2
            "Ecaille de Phénix": 3,             # Rang 2
            "Ether Non-Newtonien": 1,           # Rang 1
        },
        {  # Niveau 3
            "Fragment Osseux": 3,               # Rang 3
            "Velour de Cervidé": 2,             # Rang 3
            "Composants Electroniques": 2,      # Rang 3
        },
        {  # Niveau 4
            "Fragment de Jade": 3,              # Rang 4
            "Poussière Dorée Animée": 2,        # Rang 4
            "Essence de Fortitude": 2,          # Rang 5
        },
        {  # Niveau 5
            "Fragment Sophiste": 2,             # Rang 6
            "Essence de Résistance": 4,         # Rang 5
            "Perle de Chance": 5,               # Rang 7
        },
    ],
    "Ration Explosive Raffinée": [
        {  # Niveau 1
            "Ether Non-Newtonien": 3,           # Rang 1
            "Coeur Gravitaire": 3,              # Rang 1
            "Roche Glycérine": 1,               # Rang 2
        },
        {  # Niveau 2
            "Fluide Alien": 2,                  # Rang 2
            "Morceau de Cloche": 2,             # Rang 2
            "Ecaille de Phénix": 2,             # Rang 2
        },
        {  # Niveau 3
            "Fragment Osseux": 2,               # Rang 3
            "Composants Electroniques": 2,      # Rang 3
            "Iris du Malheur": 2,               # Rang 3
        },
        {  # Niveau 4
            "Fragment de Fatalité": 2,          # Rang 6
            "Poussière Dorée Animée": 3,        # Rang 4
            "Essence de Magie": 2,              # Rang 5
        },
        {  # Niveau 5
            "Encre de Pouvoir": 5,              # Rang 7
            "Tissu Perceptif": 5,               # Rang 7
            "Essence de Fortitude": 4,          # Rang 5
        },
    ],
    "Pack de Fléchettes": [
        {  # Niveau 1
            "Ether Non-Newtonien": 2,           # Rang 1
            "Poussière Animée": 3,              # Rang 1
            "Eclat de Verre": 2,                # Rang 1
        },
        {  # Niveau 2
            "Morceau de Cloche": 3,             # Rang 2
            "Poil Gelé": 2,                     # Rang 2
            "Roche Glycérine": 2,               # Rang 2
        },
        {  # Niveau 3
            "Velour de Cervidé": 2,             # Rang 3
            "Composants Electroniques": 2,      # Rang 3
            "Ecaille de Phénix": 3,             # Rang 2
        },
        {  # Niveau 4
            "Essence de Vitalitée": 3,          # Rang 5
            "Fragment Mélioratif": 2,           # Rang 6
            "Gemme Bleue": 2,                   # Rang 4
        },
        {  # Niveau 5
            "Ichor Divin": 5,                   # Rang 7
            "Clochette": 5,                     # Rang 7
            "Essence de Sagesse": 4,            # Rang 5
        },
    ],
    "Pack de Flèches": [
        {  # Niveau 1
            "Ether Non-Newtonien": 3,           # Rang 1
            "Ectoplasme Chaud": 3,              # Rang 1
            "Eclat de Verre": 1,                # Rang 1
        },
        {  # Niveau 2
            "Fluide Alien": 2,                  # Rang 2
            "Poil Gelé": 2,                     # Rang 2
            "Roche Glycérine": 2,               # Rang 2
        },
        {  # Niveau 3
            "Fragment Osseux": 2,               # Rang 3
            "Iris du Malheur": 2,               # Rang 3
            "Velour de Cervidé": 2,             # Rang 3
        },
        {  # Niveau 4
            "Essence de Fortitude": 3,          # Rang 5
            "Poussière Dorée Animée": 2,        # Rang 4
            "Fragment Sophiste": 2,             # Rang 6
        },
        {  # Niveau 5
            "Gemme Prismatique": 5,             # Rang 7
            "Orbe Convergeant": 5,              # Rang 7
            "Essence de Résistance": 4,         # Rang 5
        },
    ],
    "Pack Premier Tour": [
        {  # Niveau 1
            "Poussière Animée": 3,              # Rang 1
            "Ether Non-Newtonien": 2,           # Rang 1
            "Ectoplasme Chaud": 2,              # Rang 1
        },
        {  # Niveau 2
            "Fluide Alien": 3,                  # Rang 2
            "Poil Gelé": 2,                     # Rang 2
            "Morceau de Cloche": 2,             # Rang 2
        },
        {  # Niveau 3
            "Velour de Cervidé": 2,             # Rang 3
            "Fragment Osseux": 2,               # Rang 3
            "Ecaille de Phénix": 3,             # Rang 2
        },
    ],

    # banque

    "Médaillon de Leprechaun": [
        {  # Niveau 1
            "Poussière Animée": 3,              # Rang 1
            "Eclat de Verre": 3,                # Rang 1
            "Poil Gelé": 1,                     # Rang 2
        },
        {  # Niveau 2
            "Ecaille de Phénix": 3,             # Rang 2
            "Fluide Alien": 2,                  # Rang 2
            "Fragment Osseux": 2,               # Rang 3
        },
        {  # Niveau 3
            "Composants Electroniques": 2,      # Rang 3
            "Velour de Cervidé": 2,             # Rang 3
            "Gemme Bleue": 2,                   # Rang 4
        },
    ],


    "Noyau d'Aurelionite": [
        {  # Niveau 1
            "Ether Non-Newtonien": 3,           # Rang 1
            "Coeur Gravitaire": 2,              # Rang 1
            "Eclat de Verre": 2,                # Rang 1
        },
        {  # Niveau 2
            "Fluide Alien": 2,                  # Rang 2
            "Poil Gelé": 2,                     # Rang 2
            "Morceau de Cloche": 3,             # Rang 2
        },
        {  # Niveau 3
            "Velour de Cervidé": 3,             # Rang 3
            "Ecaille de Phénix": 3,             # Rang 2
            "Fragment Osseux": 2,               # Rang 3
        },
        {  # Niveau 4
            "Composants Electroniques": 2,      # Rang 3
            "Gemme Bleue": 2,                   # Rang 4
            "Fragment de Jade": 2,              # Rang 4
        },
        {  # Niveau 5
            "Essence de Vitalitée": 3,          # Rang 5
            "Fragment Mélioratif": 2,           # Rang 6
            "Essence de Fortitude": 3,          # Rang 5
        },
        {  # Niveau 6
            "Perle de Chance": 5,               # Rang 7
            "Ichor Divin": 5,                   # Rang 7
            "Essence de Magie": 4,              # Rang 5
        },
        {  # Niveau 7
            "Réceptacle Anastral": 5,           # Rang 7
            "Clochette": 5,                     # Rang 7
            "Essence de Résistance": 4,         # Rang 5
        },
        {  # Niveau 8
            "Encre de Pouvoir": 5,              # Rang 7
            "Tissu Perceptif": 5,               # Rang 7
            "Essence de Sagesse": 4,            # Rang 5
        },
        {  # Niveau 9
            "Orbe Convergeant": 5,              # Rang 7
            "Gemme Prismatique": 5,             # Rang 7
            "Essence de Fortitude": 4,          # Rang 5
        },
        {  # Niveau 10
            "Fragment Sophiste": 4,             # Rang 6
            "Fragment de Fatalité": 3,          # Rang 6
            "Essence de Résistance": 4,         # Rang 5
        },
        {  # Niveau 11
            "Poussière Dorée Animée": 4,        # Rang 4
            "Composants Electroniques": 3,      # Rang 3
            "Gemme Bleue": 3,                   # Rang 4
        },
        {  # Niveau 12
            "Ecaille de Phénix": 3,             # Rang 2
            "Fluide Alien": 2,                  # Rang 2
            "Poussière Animée": 3,              # Rang 1
        },
    ],


    # ancien

    "Sacoche" : [ # garde redcoin
        {
            "Essence Dorée" : 50 ,
        },
    ],
    "Emblème de la Fin" : [ # + d'objets chez marchand
        {
            "Essence Dorée" : 1 ,
            "Essence Astrale" : 1 ,
            "Essence Carmine" : 1 ,
            "Clochette" : 1 ,
            "Oeuf de Fabergé" : 1 ,
            "Néphrite Brut" : 1 ,
            "Nitroglycérine" : 1 ,
            "Feu Grégorien" : 1 ,
            "Perle de Chance" : 1 ,
            "Réceptacle Anastral" : 1 ,
            "Orbe Convergeant" : 1 ,
            "Gemme Prismatique" : 1 ,
            "Fluide Nutritif" : 1 ,
            "Ecaille Chitineuse" : 1 ,
            "Antenne de Cérémonie" : 1 ,
            "Circuit Biomécanique" : 1 ,
            "Encre de Pouvoir" : 1 ,
            "Tissu Perceptif" : 1,
            "Ichor Divin" : 1
        },
    ],

    # Mage Hollistique

    "Clé" : [ # clé des étages
        {
            "Fluide Alien" : 5,
            "Roche Glycérine" : 5,
            "Poil Gelé" : 5,
            "Fragment Insatiable" : 5
        },
        {
            "Moustache de Chat" : 5,
            "Fragment Osseux" : 2,
            "Iris du Malheur" : 5,
            "Essence Astrale" : 15,
        },
        {
            "Coeur Gravitaire" : 15,
            "Poil Gelé" : 15,
            "Iris du Malheur" : 15,
        },
        {
            "Composants Electroniques" : 10,
            "Eclat de Crystal" : 10,
            "Poussière Dorée Animée" : 10
        },
        {
            "Eclat de Crystal" : 7,
            "Pilules de Roulette" : 7,
            "Fragment de Jade" : 7,
            "Poussière Dorée Animée" : 7,
            "Gemme Bleue" : 7,
        },
        {
            "Fragment Mélioratif" : 15,
            "Fragment Sophiste" : 15,
            "Fragment de Fatalité" : 15,
            "Fragment Insatiable" : 15,
        },
    ],
    
    # Chuchoteur de carte

    "Carte" : [ # carte des étages
        {
            "Carte Mentale" : 10
        },
        {
            "Carte Mentale" : 12
        },
        {
            "Carte Mentale" : 14
        },
        {
            "Carte Mentale" : 16
        },
        {
            "Carte Mentale" : 18
        },
        {
            "Carte Mentale" : 20
        },
        {
            "Carte Mentale" : 22
        },
    ],
}
ANNUAIRESORTSSOIN = {  # cout moins élevé quand utilise sort en dehors combat
    "Sonata Pitoyable": 6,
    "Sonata Miséricordieuse": 13,
    "Sonata Empathique": 18,
    "Sonata Sincère": 23,
    "Sonata Bienveillante": 18,
    "Sonata Absolutrice": 38,
}
ANNUAIREDESCRIPTIONSORTSSOIN = {
    "Sonata Pitoyable": "Un bruit pathétique vous enveloppe et apaise la douleur de vos blessures.",
    "Sonata Miséricordieuse": "Un son a peine apréciable se plaque contre votre peau et referme vos blessures.",
    "Sonata Empathique": "Une musique potable soulage votre âme et vos blessures.",
    "Sonata Sincère": "Un chant cristallin inspire votre esprit et revigore votre corps.",
    "Sonata Bienveillante": "Une chorale glorieuse vous fait oublier les problèmes de votre situation et cicatrise vos blessures.",
    "Sonata Absolutrice": "Une mélodie féerique ramène votre être tout entier a un état optimal.",
}
POURCENTAGESORTSOIN = {
    "Sonata Pitoyable": 5,
    "Sonata Miséricordieuse": 7,
    "Sonata Empathique": 14,
    "Sonata Sincère": 19,
    "Sonata Bienveillante": 22,
    "Sonata Absolutrice": 27,
}
SOINMINIMUMSORTSOIN = {
    "Sonata Pitoyable": 10,
    "Sonata Miséricordieuse": 17,
    "Sonata Empathique": 22,
    "Sonata Sincère": 27,
    "Sonata Bienveillante": 35,
    "Sonata Absolutrice": 42,
}
LISTEDEPERSONNAGE = {
    "Saumel": [  # char
        "Saumel",
        (
            "Chasseur hermite, ancien esclave pour un bourgeois fanatique de l'argent."
            "\n           Parti dans le Coliseum pour devenir plus fort afin de prendre sa revanche."
        ),  # char
        "Solide",  # char stigma +
        "Chrometophobia",  # char stigma -
        "Aucun",  # char stigma *
        ["Attaque Légère"],  # char list technic
        ["Explosion Légère"],  # char list sorts
        {
            "Feuille Jindagee": 3,
            "Fruit Jindagee": 1,
            "Feuille Aatma": 2,
            "Remède": 5,
            "Fléchette Bleue": 2,
            "Mutagène Rouge": 1,
        },  # char dict of int items
        ["Affinitée Physique"],  # char list
        40,  # int vie
        15,  # int mana
        2,  # int force
        2,  # int intelligence
        2,  # int defence
        15,  # int taux coup crit
        5,  # int degat coup crit
        10,  # int taux sort crit
        10,  # int degat sort crit
        8,  # int taux esquive
        0,  # int gold
        []  # char artefact
    ],
    "Elma": [  # char
        "Elma",
        (
            "Quinquagénère, Voleuse inarrêtable, surnommée Princesse de Suie, a la tête d'un gang de sans-abris."
            "\n           Jetée dans le Colliseum par le prétendant au titre de chef, plus jeune et plus soutenu."
            "\n           Son corps brisé à trempé dans une fontaine de fée, et l'a assez revigoré pour qu'elle tente de sortir pour reprendre sa place à la surface."
        ),  # char
        "Bénie par les Fées",  # char stigma +
        "Famine",  # char stigma -
        "Aucun",  # char stigma *
        ["Attaque Légère", "Dague Volevie"],  # char list technic
        [],  # char list sorts
        {},  # char dict of int items
        [],  # char list
        35,  # int vie
        10,  # int mana
        1,  # int force
        2,  # int intelligence
        0,  # int defence
        20,  # int taux coup crit
        10,  # int degat coup crit
        20,  # int taux sort crit
        10,  # int degat sort crit
        10,  # int taux esquive
        0,  # int gold
        []  # char artefact
    ],
    "Auguste": [  # char
        "Auguste",
        (
            "Un écrivain brillant ayant perdu ses mains dans un accident de voiture."
            "\n           Parti dans le Coliseum après avoir entendu parler de la puissance qu'on peut y acquérir."
            "\n           Pense pouvoir y trouver un moyen de retrouver des mains biologiques, artificielles ou...magiques."
        ),  # char
        "Diligent",  # char stigma +
        "Manchot",  # char stigma -
        "Aucun",  # char stigma *
        [
            "Attaque Légère",
        ],  # char list technic
        ["Thermosphère Chaude", "Sonata Pitoyable"],  # char list sorts
        {},  # char dict of int items
        [],  # char list
        30,  # int vie
        20,  # int mana
        1,  # int force
        4,  # int intelligence
        0,  # int defence
        10,  # int taux coup crit
        5,  # int degat coup crit
        25,  # int taux sort crit
        0,  # int degat sort crit
        0,  # int taux esquive
        20,  # int gold
        []  # char artefact
    ],
    "Saria": [  # char
        "Saria",
        (
            "Une des dernières druidesses encore en vie pendant les affres de L'inquisition espagnole"
            "\n           Est venue se cacher des buchers et des horreurs dans le seul endroit ou on la considererait morte sans l'être vraiment : le Coliseum."
            "\n           S'étonne que son lien avec la nature dans cet endroit sordide ne soit pas brisé, malgrès l'omniprésence de la mort."
        ),  # char
        "Cueilleuse",  # char stigma +
        "Incompatible",  # char stigma -
        "Aucun",  # char stigma *
        [
            "Attaque Légère",
        ],  # char list technic
        ["Sonata Miséricordieuse"],  # char list sorts
        {
            "Feuille Jindagee": 5,
            "Fruit Jindagee": 5,
            "Feuille Aatma": 5,
            "Fruit Aatma": 5,
        },  # char dict of int items
        ["Affinitée de Terre"],  # char list
        30,  # int vie
        17,  # int mana
        0,  # int force
        4,  # int intelligence
        1,  # int defence
        10,  # int taux coup crit
        2,  # int degat coup crit
        10,  # int taux sort crit
        2,  # int degat sort crit
        8,  # int taux esquive
        20,  # int gold
        []  # char artefact
    ],
    "Vesperum": [  # char
        "Vesperum",
        (
            "Un homme devenu démon par amour et ayant échappé aux enfers, à la recherche de pouvoir afin de prendre le controle de l'Au-Dela."
            "\n           A été attiré au Coliseum par l'odeur de mort qui s'en échappe, et le son de millions d'âmes emprisonnées entre ses murs."
            "\n           Ne sait pas pourquoi, mais les troupes du Paradis et de l'Enfer à ses trousses ne viennent pas le chercher ici."
        ),  # char
        "Forces Obscures",  # char stigma +
        "Maudit",  # char stigma -
        "Aucun",  # char stigma *
        ["Attaque Légère", "Katana Bleu"],  # char list technic
        ["Dance Volevie"],  # char list sorts
        {},  # char dict of int items
        ["Affinitée de Sang"],  # char list
        35,  # int vie
        10,  # int mana
        2,  # int force
        2,  # int intelligence
        1,  # int defence
        0,  # int taux coup crit
        5,  # int degat coup crit
        0,  # int taux sort crit
        15,  # int degat sort crit
        5,  # int taux esquive
        0,  # int gold
        []  # char artefact
    ],
    "Lucien": [  # char
        "Lucien",
        (
            "Descendant du mage qui à crée le Coliseum, brillant magicien toujours comparé a son ancêtre."
            "\n           Venu régler ses comptes avec le grand Maitre Mage afin de décider qui des deux est le meilleur."
            "\n           Revient de 5 ans a écumer les mers aux coté de son fidèle équipage de pirate"
        ),  # char
        "Grande Connaissance",  # char stigma +
        "Colérique",  # char stigma -
        "Logique au dessus des Cieux",  # char stigma *
        ["Attaque Légère", "Poing Renforcé"],  # char list technic
        [
            "Faisceau Statique",
            "Thermosphère Brulante",
            "Pic Froid",
            "Création de Lapis",
            "Explosion Renforcée",
            "Dance Siphoneuse",
            "Sonata Miséricordieuse",
        ],  # char list sorts
        {},  # char dict of int items
        [],  # char list
        25,  # int vie
        25,  # int mana
        0,  # int force
        5,  # int intelligence
        0,  # int defence
        0,  # int taux coup crit
        0,  # int degat coup crit
        0,  # int taux sort crit
        0,  # int degat sort crit
        0,  # int taux esquive
        0,  # int gold
        ["Vieux Couteau Rouillé"]  # char artefact
    ],
    "Élémia": [  # char
        "Élémia",
        (
            "Inventeuse, créatrice, artiste, elle à tout fait, à part peut être suivre le destin qu'on lui à donné."
            "\n           Venue tester sa toute dernière invention en condition réelle : une armure de Deus-ex-machinium."
            "\n           On dit du dernier héros ayant besoin d'une inventrice dans son"
            " équipe pour sauver le monde... "
            "\n           ...qu'il est ressorti de son village avec un bras en moins a cause d'une des inventions ratée d'élémia."
        ),  # char
        "Débrouillarde",  # char stigma +
        "Flemme",  # char stigma -
        "Emotion au dessus des Cieux",  # char stigma *
        [
            "Attaque Légère",
        ],  # char list technic
        [],  # char list sorts
        {},  # char dict of int items
        [],  # char list
        35,  # int vie
        25,  # int mana
        2,  # int force
        2,  # int intelligence
        5,  # int defence
        40,  # int taux coup crit
        0,  # int degat coup crit
        40,  # int taux sort crit
        0,  # int degat sort crit
        0,  # int taux esquive
        50,  # int gold
        []  # char artefact
    ],
    "Samantha": [  # char
        "Samantha",
        (
            "Une doctoresse diplomée de l'Universitée Prestigieuse de Prestige-City. Endettée jusque au cou **grâce** a son prêt etudiant."
            "\n           Entre payer sa detter sur les 50 prochaines années de sa vie ou entrer dans le Coliseum pour gagner des richesses, elle à fait son choix."
            "\n           Elle a pillée les réserves médicales de son école avant de venir ici."
        ),  # char
        "Pharmacodynamisme",  # char stigma +
        "Serment d'Hyppocrate",  # char stigma -
        "Aucun",  # char stigma *
        [
            "Attaque Légère",
        ],  # char list technic
        [],  # char list sorts
        {
            "Remède": 15,
            "Pillule": 15,
            "Grand Mutagène Doré": 1,
        },  # char dict of int items
        [],  # char list
        30,  # int vie
        5,  # int mana
        1,  # int force
        4,  # int intelligence
        1,  # int defence
        20,  # int taux coup crit
        8,  # int degat coup crit
        20,  # int taux sort crit
        8,  # int degat sort crit
        5,  # int taux esquive
        0,  # int gold
        []  # char artefact
    ],
    "Emy": [  # char
        "Emy",
        (
            "Une ancienne Louve de glace devenue humaine, prise d'affection pour un vieil homme tombé par hasard dans le Coliseum."
            "\n           Après sa transformation, sentant naitre de nouvelles émotions et sensations, elle a paniquée et s'est retrouvée au premier étage."
            "\n           On dit qu'elle est devenue humaine lorsque le vieil homme dont elle s'occupait, se sentant mourir, lui à offert son coeur plein de compassion."
            "\n           Littéralement."
        ),  # char
        "Conception du Mana",  # char stigma +
        "Attache Physique",  # char stigma -
        "Chaos Emotionel",  # char stigma *
        ["Attaque Légère", "Katana Bleu"],  # char list technic
        ["Pic Bleu", "Pic Froid"],  # char list sorts
        {},  # char dict of int items
        ["Affinitée de Glace", "Ere Glaciaire"],  # char list
        25,  # int vie
        0,  # int mana
        2,  # int force
        5,  # int intelligence
        0,  # int defence
        15,  # int taux coup crit
        15,  # int degat coup crit
        15,  # int taux sort crit
        15,  # int degat sort crit
        14,  # int taux esquive
        0,  # int gold
        ["Demi-Marque du ???"]  # char artefact
    ],
    "Terah": [  # char
        "Terah",
        (
            "Un adolescent sans histoire, sans famille, sans amis. Surnommé *Enfant Maudit* sans qu'il ne sache pourquoi, tout son village l'évite."
            "\n           Il n'a aucune attache au monde des vivant. Alors quand il a entendu la voix des morts qui l'appelait, il n'a pas hésité une seconde a rentrer dans le Coliseum."
            "\n           Amenez le moi."
        ),  # char
        "Endurci",  # char stigma +
        "Incontrolable",  # char stigma -
        "Sanjiva",  # char stigma *
        ["Attaque Légère", "Lance Rapide"],  # char list technic
        [],  # char list sorts
        {},  # char dict of int items
        [],  # char list
        33,  # int vie
        23,  # int mana
        2,  # int force
        2,  # int intelligence
        2,  # int defence
        13,  # int taux coup crit
        13,  # int degat coup crit
        13,  # int taux sort crit
        13,  # int degat sort crit
        13,  # int taux esquive
        13,  # int gold
        []  # char artefact
    ],
    "Peralta": [  # char
        "Peralta",
        (
            "Une policière sous couverture, accusée a tort par un collègue corrompu, attendant son procès."
            "\n           Enlevée de la prison par le gang qu'elle infiltrait, jetée dans le Coliseum pour éviter qu'elle ne parle, déterminée a sortir de là."
            "\n           Elle à un caractère bien trempée, et est connue dans son service pour son coup de boule phénoménal."
        ),  # char
        "Bergentruckung",  # char stigma +
        "Mauvaise Réputation",  # char stigma -
        "Aucun",  # char stigma *
        ["Attaque Légère", "Lance Rapide"],  # char list technic
        [],  # char list sorts
        {},  # char dict of int items
        [],  # char list
        36,  # int vie
        16,  # int mana
        5,  # int force
        0,  # int intelligence
        4,  # int defence
        5,  # int taux coup crit
        15,  # int degat coup crit
        0,  # int taux sort crit
        8,  # int degat sort crit
        10,  # int taux esquive
        0,  # int gold
        []  # char artefact
    ],
    "Redde": [  # char
        "Redde",
        (
            "Un streamer de jeux vidéo en burnout total, perdu dans son propre monde et persuadé d'être le personnage principal d'une histoire dont seul lui connait le déroulement."
            "\n           Entre dans le Coliseum pour vivre **l'aventure ultime**."
            "\n           Est connu pour son sens du showmanship inégalé."
        ),  # char
        "Dernier Choix",  # char stigma +
        "Pas d'Echappatoire",  # char stigma -
        "Aucun",  # char stigma *
        [
            "Attaque Légère",
        ],  # char list technic
        [],  # char list sorts
        {},  # char dict of int items
        [],  # char list
        30,  # int vie
        10,  # int mana
        1,  # int force
        1,  # int intelligence
        1,  # int defence
        10,  # int taux coup crit
        10,  # int degat coup crit
        10,  # int taux sort crit
        10,  # int degat sort crit
        9,  # int taux esquive
        250,  # int gold
        []  # char artefact
    ],
    "Valfreya": [  # char
        "Valfreya",
        (
            "Une Valkirie envoyée prouver sa valeur dans le Coliseum après que Thor aie critiqué Odin pour s'entourer d'un harem de femmes inutiles au combat."
            "\n           Entre dans le Coliseum dans une envellope charnelle trop faible, en poussant un long soupir."
            "\n           On dit qu'elle aurait renversé un gobelet de bière sur le pantalon d'Odin il y a des millénaires de cela,"
            "\n           et que c'est pour ca qu'elle aurait été choisie."
        ),  # char
        "Manteau de Faucon",  # char stigma +
        "Ange Déchue",  # char stigma -
        "Faveurs d'Odin",  # char stigma *
        [
            "Attaque Légère",
        ],  # char list technic
        [],  # char list sorts
        {
            "Ambroisie": 10,
            "Hydromel": 10,
            "Fruit Jindagee": 10,
        },  # char dict of int items
        [
            "Affinitée de Foudre"
        ],  # char list
        20,  # int vie
        25,  # int mana
        1,  # int force
        3,  # int intelligence
        0,  # int defence
        25,  # int taux coup crit
        10,  # int degat coup crit
        25,  # int taux sort crit
        10,  # int degat sort crit
        25,  # int taux esquive
        100,  # int gold
        []  # char artefact
    ],
    "Bob": [  # char
        "Bob",
        (
            "Un pyrobarbare bruyant à l'allure fière, agent sur terre d'une ancienne divinitée du feu."
            "\n           Venu chercher la gloire a coup de hache, de feu, et de grands cris dans les couloirs du Coliseum."
            "\n           Que dire de plus ? Il est musculeux !"
        ),  # char
        "Ange de Feu",  # char stigma +
        "Fair Play",  # char stigma -
        "Musculeux",  # char stigma *
        ["Attaque Légère", "Bô Brulant"],  # char list technic
        [
            "Thermosphère Chaude",
            "Thermosphère Brulante",
        ],  # char list sorts
        {
            "Crystal Elémentaire": 2,
            "Hydromel": 3,
            "Orbe de Furie": 1,
            "Fléchette Bleue": 4,
        },  # char dict of int items
        ["Affinitée de Feu", "Pyrophile"],  # char list
        40,  # int vie
        20,  # int mana
        2,  # int force
        2,  # int intelligence
        2,  # int defence
        15,  # int taux coup crit
        5,  # int degat coup crit
        15,  # int taux sort crit
        5,  # int degat sort crit
        0,  # int taux esquive
        25,  # int gold
        ["Grand Sac A Dos"]  # char artefact
    ],
    "Voyageur": [  # char
        "Voyageur",
        (
            "Une existance superieure, intriguée par les histoires se déroulant dans le Coliseum, venue en faire partie le temps d'un souffle."
            "\n           Elle s'est dotée d'une armure impénétrable afin de profiter de tout ca sans se prendre la tête avec les combats."
            "\n           Nuisant a l'Equilibre Karmique, le voyageur n'est pas très apprécié par le système..."
        ),  # char
        "Féerique",  # char stigma +
        "Indigérable",  # char stigma -
        "Musculeux",  # char stigma *
        ["Attaque Légère"],  # char list technic
        ["Tir Arcanique"
        ],  # char list sorts
        {
            "Crystal Elémentaire": 10
        },  # char dict of int items
        [],  # char list
        20,  # int vie
        20,  # int mana
        1,  # int force
        1,  # int intelligence
        999999,  # int defence
        1,  # int taux coup crit
        1,  # int degat coup crit
        1,  # int taux sort crit
        1,  # int degat sort crit
        1,  # int taux esquive
        11111,  # int gold
        ["Armure de Vibranium"]  # char artefact
    ],
    "Ahti": [  # char
        "Ahti",
        (
            "L'homme d'entretien du Coliseum, une entité mystérieuse qui peut aller et venir a sa guise dans la batisse."
            "\n           Son sang froid légendaire, sa sagesse infinie, et son fidèle walkman ne servent qu'un seul maitre :"
            "\n           La propreté."
        ),  # char
        "Esprit bien rangé, esprit libéré",  # char stigma +
        "Trouble Obsessionnel Compulsif",  # char stigma -
        "Scripte",  # char stigma *
        ["Attaque Légère"],  # char list technic
        [],  # char list sorts
        {
            "Bombe Explosive" : 10,
            "Gourde de Poison" : 10,
            "Mutagène Bleu" : 10,
            "Mutagène Rouge" : 10,
            "Mutagène Vert" : 10,
            "Mutagène Doré" : 3,
        },  # char dict of int items
        [],  # char list
        30,  # int vie
        60,  # int mana
        2,  # int force
        7,  # int intelligence
        2,  # int defence
        7,  # int taux coup crit
        2,  # int degat coup crit
        7,  # int taux sort crit
        7,  # int degat sort crit
        0,  # int taux esquive
        25,  # int gold
        ["Walkman v.777"]  # char artefact
    ],
    "Alex": [  # char
        "Alex",
        (
            "Individu non binaire remplacant Philippidès après sa dernière course entre Athènes et Sparte."
            "\n           Iel est rentré dans le Coliseum pour s'abriter de la pluie,"
            "\n           et cherche à en sortir le plus vite possible pour apporter un message urgent."
        ),  # char
        "Second Souffle",  # char stigma +
        "Fatigue Chronique",  # char stigma -
        "Aucun",  # char stigma *
        ["Attaque Légère", "Poing Renforcé"],  # char list technic
        [],  # char list sorts
        {
            "Remède" : 10,
            "Pillule" : 10
        },  # char dict of int items
        [],  # char list
        40,  # int vie
        10,  # int mana
        6,  # int force
        2,  # int intelligence
        3,  # int defence
        10,  # int taux coup crit
        10,  # int degat coup crit
        0,  # int taux sort crit
        0,  # int degat sort crit
        10,  # int taux esquive
        0,  # int gold
        ["Message Scellé"]  # char artefact
    ],
    "Terrance": [  # char
        "Terrance",
        (
            "Un Chef Cuisinier gras et glouton qui peut transformer le gout des aliments en mana pur."
            "\n           Venu chercher de nouveaux ingrédients : la viande de monstre."
        ),  # char
        "Recharge Rapide",  # char stigma +
        "Pause Repas",  # char stigma -
        "Démanteleur",  # char stigma *
        ["Attaque Légère"],  # char list technic
        ["Thermosphère Chaude", "Pic Bleu"],  # char list sorts
        {
            "Remède" : 5,
            "Gourde de Poison" : 5,
        },  # char dict of int items
        ["Pharmacodynamisme"],  # char list
        45,  # int vie
        45,  # int mana
        0,  # int force
        1,  # int intelligence
        0,  # int defence
        0,  # int taux coup crit
        0,  # int degat coup crit
        0,  # int taux sort crit
        0,  # int degat sort crit
        0,  # int taux esquive
        100,  # int gold
        []  # char artefact
    ],
    "Cassandra": [  # char
        "Cassandra",
        (
            "Cassandra Jekyll est une chercheuse en transhumanisme qui a hérité de son pere"
            "\nl'incontrollable faculté de se transformer en la plus méchante partie d'elle meme :"
            "\nMiss Hyde."
            "\n           Cherche un antidote au soluté que son père s'est injecté, source de"
            "\n           tout ses problèmes."
        ),  # char
        "Transhumanisme",  # char stigma +
        "Miss Hyde",  # char stigma -
        "Aucun",  # char stigma *
        ["Attaque Légère","Corne Argile"],  # char list technic
        ["Dance Volevie"],  # char list sorts
        {
            "Bombe Explosive" : 10,
            "Gourde de Poison" : 10,
            "Mutagène Bleu" : 10,
            "Mutagène Rouge" : 10,
            "Mutagène Vert" : 10,
            "Mutagène Doré" : 3,
        },  # char dict of int items
        [],  # char list
        20,  # int vie
        20,  # int mana
        5,  # int force
        5,  # int intelligence
        6,  # int defence
        51,  # int taux coup crit
        0,  # int degat coup crit
        0,  # int taux sort crit
        15,  # int degat sort crit
        11,  # int taux esquive
        0,  # int gold
        []  # char artefact
    ],
    "Neil": [  # char
        "Neil",
        (
            "Une experience non terminée, oubliée dans sa capsule après la chute des Dieux qui travaillaient dessus."
            "\n           Ne cherche qu'une seule chose : le bohneur."
        ),  # char
        "Aucun",  # char stigma +
        "Aucun",  # char stigma -
        "Aucun",  # char stigma *
        ["Attaque Légère"],  # char list technic
        [],  # char list sorts
        {
            "Pillule" : 10,
            "Mutagène Bleu" : 3,
            "Mutagène Rouge" : 3,
            "Mutagène Vert" : 3,
            "Mutagène Doré" : 1,
        },  # char dict of int items
        [],  # char list
        40,  # int vie
        10,  # int mana
        6,  # int force
        1,  # int intelligence
        2,  # int defence
        0,  # int taux coup crit
        8,  # int degat coup crit
        0,  # int taux sort crit
        5,  # int degat sort crit
        4,  # int taux esquive
        0,  # int gold
        []  # char artefact
    ],
}
BIBLIOTHEQUEFINALE = {
    "The Presence": [
        "Its hands push at the seams\nLike a drowning animal\nTrying to get out from beneath\nBut the surface is of ice",
        "It can see the world outside\nHe's in a soon-to-be corpse\nKinda state, all the time,",
        "Born from the ripple in the laws\nUnder the shadow of the waves\nA parasite of untold years\nGrown around the noosphere",
        "Divine in shape, Devil in form\nDreaming the freedom his fate stole\nLurking right outside your mind\nBehind the art block you despise",
    ],
    "Analyse de la Réaction Chimique du Métamorphoseur Volcanique": [
        "L'échantillon de métamorphoseur volcanique, prélevé à une profondeur de 2000 mètres sous le cratère actif, présentait une composition minérale complexe.",
        "Lorsqu'il a été exposé à des conditions de température et de pression similaires à celles du milieu d'origine, une réaction exothermique s'est produite, accompagnée d'une émission de gaz.",
        "L'observation au microscope électronique a révélé des changements structuraux significatifs, avec la formation de cristaux de silicate à la surface de l'échantillon.",
        "L'analyse spectroscopique a identifié la présence de composés sulfurés dans les émanations gazeuses, suggérant une réaction catalytique impliquant des éléments volatils.",
        "Ces résultats suggèrent un mécanisme de transformation complexe impliquant des interactions entre les minéraux et les fluides magmatiques, ouvrant de nouvelles perspectives sur la compréhension des processus géochimiques dans les environnements volcaniques.",
    ],
    "Texte Incohérent": [
        "Le vent soufflait doucement à travers les arbres, caressant les feuilles "
        "et créant une symphonie apaisante.\n",
        "Les oiseaux chantaient leur mélodie matinale, remplissant l'air de leur "
        "joie contagieuse.\n",
        "Les nuages dérivaient paresseusement dans le ciel, prenant des formes "
        "fantaisistes et changeantes.\n",
        "Soudain, un lapin blanc surgit de derrière un buisson, agitant "
        "frénétiquement une montre de poche.\n",
        "Il sembla hésiter un instant, puis se précipita dans un terrier à "
        "proximité, disparaissant dans l'obscurité.\n",
        "Un sourire énigmatique se dessina sur le visage d'un chat rayé qui "
        "observait la scène, perché sur une branche basse.\n",
        "Il ouvrit la bouche pour dire quelque chose, mais aucun son ne sortit.\n",
        "Puis, réalisant qu'il était seul, il se mit à miauler de manière "
        "répétitive, comme s'il cherchait désespérément une réponse à une "
        "question invisible.\n",
        "La forêt écouta en silence, absorbant les bruits étranges qui "
        "remplissaient l'air.\n",
        "Finalement, le silence retomba, et la scène reprit son cours habituel, "
        "comme si rien d'étrange ne s'était jamais produit.",
    ],
    "Traité sur l'Enchantement et le pouvoir des noms": [
        "Nous pouvons détenir un certain pouvoir sur les choses, si nous consentons a leur donner un nom.",
        "Et pas n'importe quel nom, justement.",
        "Selon l'origine et la signification du nom, la nature de la chose qui recoit le nom, et la relation entre nommeur et nommé, et d'autre facteurs divers, on peut avoir plusieurs effets.",
        "Le premier exemple qui me vient a l'esprit, c'est les démons.\nLeur nom, donné par le roi des enfer en personne, est autant une signification de ce qu'ils représentent, qu'une représentation de ce qu'ils signifient.\nIl leur donne pouvoir et superiorité dans la bouche de Lucifer.",
        "Mais dans celle des mortels, c'est une chaine qui les force a être invoqué, ainsi qu'une barrière de sécurité entre invoqueur et invoqués.",
        "J'ai passé ma vie a arpenter les différentes légendes et mythes, a suivre des noms qui se transforment d'une langue a une autre, d'un médium d'écriture a un autre, d'une région a une autre, sans véritablement changer de signification, ou en changeant complètement d'idée véhiculée.\nVoici la somme de mes connaissances:",
        (
            "           - TYPES DE MOTS PUISSANTS (1/2) -"
         "\n\n~Rouge~ : La vie qui revient de 2 fois"
         "\n~Carmin~ : L'origine de la vie qui reprend son cours de 4 fois"
         "\n~Violet~ : La magie, attirée de 2 fois"
         "\n~Pourpre~ : L'essence de la magie, reprenant ses droits de 4 fois"
         "\n~Jaune~ : La force de la vitalité, regénérée de 2 fois"
         "\n~Doré~ : La persévérence, motivation, ou parfois le combustible de la vitalité, remplit de 4 fois"
         "\n~Lolipop~ : Un mélange de vie, magie et vitalité plutot nouveau, mais faible"
         "\n~Bubblegum~ : Une notion créee de toute pièce, mais représente le mot Lolipop, 3 fois."
         "\n~Escargot~ : La force qui augmente doucement, mais surement (énergie contenue dans la coquille)"
         "\n~Limace~ : L'intelligence qui augmente doucement , mais surement (énergie libérée de la coquille)"
         "\n~Citronnier~ : La poussée de la force critique, faiblement mais surement"
         "\n~Citron~ : Le fruit du citronnier, contenant ses effets de manière plus concentré"
         "\n~Cerisier~ : La poussée de l'intelligence critique, faiblement mais surement"
         "\n~Cerise~ : Le fruit du cerisier, contenant ses effets de manière plus concentré"
         "\n~Mars~ : La planète du feu combinée a la chance de l'astrologie. La chance du feu qui augmente lentement."
         "\n~Neptune~ : La planète de glace combinée a la chance de l'astrologie. La chance du gel qui augmente lentement."
         "\n~Pluton~ : La solitaire planète figée combinée a la chance de l'astrologie. La chance de l'arrêt de mouvement qui augmente lentement."
         "\n~Lune~ : La roche qui menace de tomber combinée a la chance de l'astrologie. La chance de la pierre qui tombe qui augmente lentement."
         "\n~Mercure~ : La planète rouge fer, rouge sang, combinée a la chance de l'astrologie. La chance du sang qui rouille qui augmente lentement.\n"
        ),
        (
            "           - TYPES DE MOTS PUISSANTS (2/2) -"
            "\n\n~Ordre~ : La notion alchimique du feu, qui rend capable de bruler"
            "\n~Aveugle~ : La notion alchimique de l'eau figée, qui rend capable de geler"
            "\n~Limitation~ : La notion alchimique de la terre, qui rend capable de briser"
            "\n~Transcendance~ : La notion alchimique du divin, qui rend capable d'affliger les effets célestes"
            "\n~Eveil~ : La notion alchimique du sang, qui rend capable de prendre la vie"
            "\n~Antithèse~ : S'oppose a l'eau, et au gel"
            "\n~Chaotique~ : S'oppose a l'ordre des flammes et du feu"
            "\n~Tache~ : Une blessure sur la peau devient tache d'encre sur du papier"
            "\n~Rature~ : Un problème dans l'esprit devient rature sur du texte"
            "\n~Brouillon~ : Un illogisme dans le raisonnement devient brouillon, prototype pour de nouvelles phrases"
            "\n~Paragraphe~ : Parfait le corps, l'esprit , et le raisonnement dans un texte sans tache, rature ou brouillon."
            "\n~Magnum-Opus~ : L'objectif final de tout alchimiste, la transmutation du rien en petites quantités d'Or"
            "\n~Agrume~ : Le fruit du pécher acide, absout dans la bénédiction"
            "\n~Raisin~ : Le fruit du diable, répendant la folie dans les coeurs fragile"
            "\n~Durian~ : Le fruit de la colère, dont la maladie se répend comme l'odeur dans l'air ou le sang dans l'eau"
            "\n~Gingembre~ : Redonne vitalitée sur long terme, par petites doses"
            "\n~Mandragore~ : Soigne l'esprit sur long terme, par petites gorgées d'infusion."
            "\n~Nigredo~ : Un soluté alchimique onirique, le pus et la décomposition qui sort du corps qui reprend toute sa vitalité"
            "\n~Albédo~ : Un soluté alchimique onirique représentant la libération de l'âme, reprenant toute sa divinité."
            "\n~Citrinitas~ : Un soluté alchimique onirique, l'une des trois étapes de la pierre philosophale, et la phase oû le divin et la vie n'est plus nécessaire : seul compte la motivation a l'interieur, revigorée."
            "\n~Chrysalide~ : Le changement (bien que temporaire dans toutes les oeuvres que j'ai lu) vers un état parfait, invincible.\n"
        ),
         "Vous vous imaginez si on arrivait a imbuer des choses avec ces mots ?\nPlus que de juste leur attribuer un nom, leur faire utiliser toute la valeur de leur propriétée que les noms leur donnent ?"
    ],
    "Journal Personnel du Capitaine James Thompson, US Navy, 1943": [
        (
            "- 3 Juillet 1943 :\nLa tension est palpable à bord du navire. \nNous sommes en route vers la Méditerranée pour participer à l'opération Husky,"
            " le débarquement en Sicile. \nLes hommes sont nerveux, mais je dois rester fort pour maintenir la confiance de l'équipage. "
            "\nC'est une mission cruciale, et nous devons être prêts à affronter l'ennemi à tout moment."
        ),
        (
            "- 15 Juillet 1943 :\nL'opération Husky est lancée. \nLes premiers échanges de tirs avec les batteries côtières ennemies ont été intenses. "
            "\nNotre formation est sous un feu nourri, mais nos défenses tiennent bon. \nLes jeunes marins font preuve d'un courage admirable. \nJe suis fier de les commander."
        ),
        (
            "- 26 Juillet 1943 :\nAprès des jours de combats acharnés, la Sicile est enfin entre nos mains. \nLes sacrifices consentis ont été lourds,"
            " mais la victoire est notre. \nNous entamons maintenant des opérations de nettoyage et de sécurisation de l'île. \nC'est un soulagement de voir nos"
            " efforts porter leurs fruits, mais nous savons que de nouveaux défis nous attendent."
        ),
        (
            "- 5 Septembre 1943 :\nDes nouvelles choquantes nous parviennent du front. \nL'Italie a signé un armistice avec les Alliés."
            " \nC'est une tournure inattendue des événements, et cela change considérablement la dynamique du conflit en Méditerranée. "
            "\nNous devons rester vigilants et prêts à réagir à toute éventualité."
        ),
        (
            "- 18 Octobre 1943 :\nLes opérations de convoi dans l'Atlantique Nord deviennent de plus en plus périlleuses. "
            "\nLes attaques de sous-marins ennemis se multiplient, mettant en danger nos convois de ravitaillement essentiels. \nNous devons"
            " redoubler de vigilance et d'ingéniosité pour protéger nos navires contre cette menace sournoise."
        ),
        (
            "- 25 Décembre 1943 :\nNoël en mer est une expérience singulière. \nMalgré les conditions difficiles et l'éloignement de nos proches,"
            " l'esprit de camaraderie règne à bord. \nNous avons organisé une modeste célébration pour remonter le moral de l'équipage."
            " \nCes moments de répit sont rares, mais précieux."
        ),
    ],
    "Recettes Divines": [
        "Les meilleurs cookies du monde !\n\n300g Farine\n120g sucre semoule\n120g sucre cassonade\n6g levure\n1 oeuf\n175g beurre\n2 tablettes chocolats",
        "Mélanger farine, sucres semoule et cassonade, levure, chocolat.\nRajouter beurre fondu et oeuf",
        "Pétrir\nLaisser reposer 30 min au frigo",
        "10 minutes a 170°",
    ],
    "Naissance du Monde": [
        "Notre univers a été crée en deux temps par une force suprême, ou simplement par hasard.",
        "Qui, ou quoi, que ce soit, on a réussit a analyser le *fond sonore* de l'univers et a le comparer aux spectrographes de certains sorts.\nVoici ce que l'on a pu conclure :",
        "L'ordre naturel des choses, c'est a dire leur ordre de *naissance*, se base sur le temps, qui est une constante inéluctable présente bien avant le vide, au début de toute choses.",
        "Ainsi, on a pu construire le sceau (idéologique) des éléments, et les mettre a leur place, en commencant par le Divin, en haut, et en suivant le sens des aiguilles d'une montre.",
        "Ensuite, la vie est arrivée.\nSeule l'intention fait partie des éléments, car elle a une conscience superieure, indestructible mais très instable.\nC'est la raison pour laquelle on la laisse avec les éléments.",
        "Mais le reste de ce qui fait de nous, des êtres vivants, ne fait pas parti des éléments.\nCe sont des principes anarchiques, mais qui possèdent cepandant un ordre d'apparition, commencant par l'intention et continuant a l'inverse de l'ordre naturel des choses.",
        "En effet, si l'état normal de l'univers c'est la mort, alors la vie est a l'inverse de cet état normal et de ce qu'il le fait avancer : le temps.",
        "Cela voudrait il dire que la vie est la seule chose qui peut aller a l'encontre du temps ?\nDans ce cas, elle a peut etre existé avant tout le reste ?",
        "Cette question de savoir qui de la Vie ou de la Mort est arrivée en premier, c'est un problème qui élude depuis toujours les scientifiques.",
        "Je dirais cepandant que cette question n'a aucune importance.\nLes deux ont besoin l'un de l'autre pour interragir a notre niveau de réalité.",
    ],
    "Description d'une femme se levant": [
        "Dans une pièce baignée par la douce lumière du matin, une femme est "
        "assise dans un fauteuil rembourré de velours. Sa silhouette est définie "
        "par la clarté tamisée qui filtre à travers les rideaux, enveloppant la "
        "pièce d'une ambiance chaleureuse. Son visage, éclairé par les premiers "
        "rayons du soleil, révèle des traits délicats et une expression paisible, "
        "trahissant à la fois la quiétude du sommeil et l'anticipation d'une "
        "nouvelle journée.",
        "Lentement, elle glisse ses mains le long des accoudoirs du fauteuil, "
        "sentant la texture luxueuse du tissu sous ses doigts. Elle prend une "
        "profonde inspiration, remplissant ses poumons d'air frais matinal, et se "
        "redresse avec grâce. Ses muscles s'étirent paresseusement, comme si elle "
        "savourait chaque sensation de son corps en mouvement après une nuit de "
        "repos bien méritée.",
        "Ses pieds, chaussés de chaussons moelleux, rencontrent le sol avec une "
        "légèreté presque imperceptible. Elle se lève, dévoilant une silhouette "
        "élégante enveloppée dans une robe fluide qui glisse sur ses courbes avec "
        "fluidité. La lumière du matin danse sur le tissu, créant des motifs "
        "d'ombre et de lumière qui accentuent sa grâce naturelle.",
        "Un sourire doux se dessine sur ses lèvres alors qu'elle se tourne vers "
        "la fenêtre, accueillant pleinement les premiers rayons du soleil qui "
        "inondent la pièce. Prête à affronter les défis de la journée, elle quitte "
        "son fauteuil avec une assurance tranquille, prête à embrasser le monde "
        "qui l'attend à l'extérieur.",
    ],
    "Les Aventures de l'Explorateur Perdu": [
        "Le soleil brûlant battait implacablement sur le désert aride, faisant onduler l'air dans des mirages trompeurs.",
        "Parmi les dunes de sable doré, un explorateur solitaire avançait, son visage protégé par un voile contre les grains abrasifs.",
        "Des ruines anciennes surgissaient soudainement de l'horizon, témoins silencieux d'une civilisation disparue depuis des siècles.",
        "Les murmures du vent semblaient porter des histoires oubliées, évoquant les jours de gloire et de décadence de ce peuple autrefois prospère.",
        "Au cœur du temple effondré, une relique sacrée reposait, attendant d'être découverte par celui qui oserait défier les épreuves du désert.",
    ],
    "Foi": [
        "(le livre contient la phrase *Gary vous aime* en boucle.)",
    ],
    "Bon Pecheur, Mauvais Pecheur": [
        "Hey !\nVous avez du mal a pecher ?\nSi oui, ce livre est fait pour vous !",
        ("Déja, vous allez avoir besoin de materiel.\nUne canne a peche, c'est déja pas mal.\nAu bout, il faut un hamecon, afin que les poissons puissent s'y accrocher.\nUne préconception de la peche,"
        "c'est qu'on a obligatoirement besoin d'un ver pour attirer les poissons. C'est faux !\nVous pouvez aussi utiliser des ressources renouvelables, tel qu'un faux leurre qui attirera leur attention !"),
        "Maintenant que vous avez votre materiel, il vous faut un endroit avec...des poissons.\nUn trou d'eau dans la glace, une rivière, ou même un trou de ver fera l'affaire, tant qu'il y a un liquide et des choses vivantes dedans.",
        "Vous pouvez désormais descendre votre hameçon dans l'eau, et rentrer dans le vif du sujet :",
        "La Peche !",
        "D'abors, la phase d'attente.\nSelon le type de poisson, vous pouvez attendre au minimum 35/maximum 100 secondes avant que le poisson ne morde a votre hamecon.\nEn général, commencez a vous concentrer vers 40 secondes. Vous pouvez utiliser un chronometre ! ",
        "Une fois que le poisson est au bout de l'hamecon, vous allez ressentir un truc au bout de la canne, un truc qui vous fait dire *MAINTENANT*.\nVa falloir être rapide, vous n'avez que 0.75 seconde pour tirer sur la ligne !\nApres, le poisson perdra patience et s'en ira.\nNotez que, plus le poisson est important, plus il mettra de temps avant de gouter a votre hameçon !",
        "Une fois que l'hamecon est rentré dans la chair du poisson, on rentre dans la deuxieme partie, et la plus compliquée : les mouvements.\nYa quatre types de mouvements et plusieurs réponses appropriées.\nFaites gaffe, si votre réponse est inadaptée au mouvement du poisson, il s'en ira directement !\nEt si vous prenez trop de temps a appliquer votre réponse, il s'en ira aussi !",
        "Premier mouvement : Légères Directions\nSi le poisson tire LEGEREMENT dans un sens, il faut OPPOSER son mouvement et tirer dans l'AUTRE sens !\nPar exemple, si le poisson tire légèrement vers la droite, tirez votre canne vers la gauche pour lui faire perdre le plus d'énergie !\nNotez qu'un poisson ne tirera jamais vers l'avant, vu que vous vous trouvez dans cette direction.\nDe plus, si vous êtes nouveau, vous allez paniquer et confondre, voire emmeler vos directions.\nRéfléchissez bien avant de faire quoi que ce soit !",
        "Deuxieme mouvement : Fortes Directions\nSi le poisson tire FORTEMENT dans un sens, il faut ACCOMODER son mouvement et tirer dans le MEME sens !\nTant d'énergie est utilisée pour ce genre de mouvement, alors autant aller dans son sens et lui faire perdre encore plus d'énergie !\nSi vous opposez son mouvement, il pourrait se décrocher le hameçon, voire briser votre ligne.\nEt même chose que pour le premier mouvement : le poisson n'ira jamais en avant, et vous allez surement confondre vos directions. Faites gaffe !",
        "Troisième mouvement : Epuisement\nSi le poisson se débat avec l'énergie du diable, ne touchez pas a votre canne !\nLe hameçon pourrait la-encore se décrocher, ou vous pourriez casser votre fil.\nLaissez le s'épuiser, et préparez vous a redonner un coup avec la canne au moment ou il montrera des signes de faiblesse.\nNe perdez pas de temps, et tentez de le remonter dès que vous pouvez !",
        "Dernier mouvement : Repos\nSi le poisson fait des petits mouvements, ne pensez plus : Tirez le de toutes vos forces, plusieurs fois !\nTirez sur votre canne a répétition, jusqu'a ce que le poisson s'arrete de bouger, et là : vous donnez un grand coup.\nUn dernier conseil pour vous : Faites quand même attention.\nSi vous tirez encore après le *grand coup*, vous risquez de tirer pendant une phase ou il ne faut pas tirer !\nAlors gardez un oeil sur la condition du poisson, spammez votre canne a peche, et quand il ne faut donner qu'un seul grand coup, n'en donnez pas 15 autres !",
        "Ca y est ? Vous avez un poisson ? Superbe !\nVoyons ce que l'on peut en faire :",
        (   "       - TYPES DE POISSONS (1/2) -"
            "\n\nMonstres : Un monstre qui passait par là et s'est accroché a votre hameçon. C'est pas vraiment un poisson, mais ca arrive plus de fois qu'on peut le penser, surtout dans les trou de ver."
            "\n\nDétritusse : Un poisson immangeable. Son méchanisme de défence, c'est de prendre l'apparence d'une botte contenant un objet. Comme ca vous prenez l'objet , posez la botte sans y preter attention, et le poisson peut reprendre sa forme initiale et plonger dans l'eau pendant que vous ne regardez pas !"
            "\n\nPetit Poisson Rouge, Vert, Bleu, Jaune, ou Blanc : Un petit poisson magique qui augmente votre force, magie, endurance, taux d'esquive ou nombre d'âme selon la couleur, mais seulement si vous le relachez.\n"
        ),
        (
            "       - TYPES DE POISSONS (2/2) -"
            "\n\nGrand Poisson Rouge, Vert, Bleu, Jaune, ou Blanc : Un petit poisson magique qui est devenu grand, et augmente votre force, magie, endurance, taux d'esquive ou nombre d'âme selon la couleur. Comme sa version plus jeune, vous devenez plus fort en le relachant. Mais a l'instar de sa version plus jeune, vous y gagnez bien plus en le mangeant !"
            "\n\nLutin : Un poisson abobinable en forme d'anneau gravé. Le Lutin s'accroche a un bijou comme un bernard l'hermite s'accroche a un dechet pour en faire une coquille. Quand il est remonté, il répend un phéromone qui le fait paraitre comme étant vraiment précieux, et qui incite le pécheur a mettre l'anneau au doigt.\nUne fois là, il injecte un tranquilisant dans le doigt, puis pond ses oeufs a l'interieur du sang de sa victime. Je vous laisse imaginer la suite. Cepandant, le bijou peut être précieux..."
            "\n\nPoisson-rêve : Personne ne sait a quoi il ressemble, car personne ne l'a jamais remonté. Il met beaucoup de temps a s'accrocher a un hameçon, se débat férocement pendant très longtemps, et quand vous pensez enfin le remonter au dessus de l'eau, il n'y a rien au bout du fil. Enfin, rien, il y a toujours un objet dont le pécheur a besoin, accroché là, comme si le poisson lachait prise a la derniere seconde et se remplacait par quelque chose, par un cadeau du destin. Certains doutent même d'avoir véritablement bataillé avec un poisson, après avoir pris l'objet, d'ou son nom."
            "\n\n\n\n*Les poissons sont listés par ordre d'importance, avec les monstres qui mettent au minimum 35 secondes a mordre, et le poisson-rêve au minimum 55 secondes.*\n"
        )
    ],
    "Céleste": [
        "Madeline réouvra ses yeux.\nDevant elle se trouvait le directeur, sous une forme monstrueuse.\nCorrompu par son anxiété, ou peut être était-ce sa solitude ?",
        "Elle laissa ses questions sans réponses et se retourna.\nSur le toit de l'hotel, elle pouvait se déplacer jusqu'a l'autre coté sans se faire bloquer par les monticules de valises.",
        "C'était maintenant ou jamais.\nElle prit son élan et s'élanca dans les airs, avant de dasher sur une plateforme en contrebas.\nElle évita le directeur foncant sur elle, puis sauta sur le mur devant elle.",
        "Elle grimpa le mur et se mit a dasher vers le haut.",
        "Se prenant ainsi un ennemi en pleine tronche.",
    ],
    "Analyse du Monstre Trienun et de son Pouvoir de Manifestation du Bandit Manchot": [
        (
            "- Origine et Caractéristiques Physiques :\nLe monstre Trienun, découvert dans une région isolée des montagnes, présente une apparence reptilienne unique avec des écailles iridescentes"
            " et des cornes acérées. Sa silhouette imposante mesure environ 3 mètres de haut et est dotée de membres puissants, lui conférant une agilité remarquable malgré sa taille. Les analyses "
            "anatomiques révèlent une constitution robuste et une capacité de régénération cellulaire accélérée, caractéristiques communes aux prédateurs de haut niveau."
        ),
        (
            "- Capacité de Manifestation du Bandit Manchot :\nTrienun démontre une aptitude extraordinaire à invoquer un Bandit Manchot, un dispositif semblable à ceux utilisés dans les casinos,"
            " mais modifié pour des desseins mystérieux. Lorsque le Bandit Manchot est activé, il génère une combinaison aléatoire de symboles élémentaires. Ces symboles déterminent les effets"
            " élémentaires infligés aux individus à proximité de Trienun."
        ),
        (
            "- Effets Élémentaires :\nSelon les symboles arrêtés sur le Bandit Manchot, différents effets élémentaires sont observés chez les individus environnants :\n  - Symbole de glace : Les "
            "sujets sont enveloppés dans un halo de gel, provoquant une sensation de froid intense et des engourdissements.\n  - Symbole de feu : Des flammes émergent brusquement autour des cibles,"
            " leur infligeant des brûlures sévères.\n  - Symbole de foudre : Des décharges électriques parcourent le corps des sujets, entraînant des spasmes musculaires et des dommages nerveux.\n "
            " - Symbole de terre : Des éclats de roche et de terre se matérialisent, projetant les individus au sol avec force.\n  - Symbole d'eau : Une vague d'eau puissante submerge les cibles, "
            "les entraînant dans un tourbillon aquatique."
        ),
        (
            "- Conclusion :\nLe pouvoir de manifestation du Bandit Manchot par Trienun représente une capacité extraordinaire qui combine la manipulation d'énergies élémentaires et des phénomènes"
            " de chance aléatoires. Cette capacité soulève des questions fascinantes sur l'origine et la nature profonde de Trienun, ainsi que sur les implications de son existence pour notre "
            "compréhension de la magie et de l'énergie dans notre monde."
        ),
    ],
    "Kya-san loves me ??! Chapitre 6534": [
        "Le soleil couchant teintait le ciel de nuances chaudes, créant une "
        "toile de fond parfaite pour ce moment tendu entre les deux amoureux.\n",
        "Ils se tenaient face à face, à quelques centimètres l'un de l'autre, "
        "captivés par l'intensité du moment.\n",
        "Chaque détail de l'autre semblait amplifié par l'excitation et "
        "l'anticipation qui imprégnaient l'air.\n",
        "Leurs regards se croisèrent, et dans les yeux de chacun, on pouvait "
        "voir la profondeur de leurs émotions.\n",
        "Un frisson électrique parcourut leur peau au moindre contact, comme si "
        "l'air lui-même vibrait d'une énergie palpable.\n",
        "Leurs cœurs battaient à l'unisson, rythmant le tempo de ce moment "
        "suspendu dans le temps.\n",
        "Leurs mains, presque instinctivement, se tendirent l'une vers l'autre, "
        "attirées par une force magnétique irrésistible.\n",
        "Les doigts effleurèrent à peine, créant une sensation de chaleur qui se "
        "propagea à travers leurs corps.\n",
        "Chaque souffle était lourd de désir, emplissant l'espace entre eux "
        "d'une tension presque palpable.\n",
        "Ils se rapprochèrent lentement, leurs respirations se mêlant dans un "
        "doux ballet synchronisé.\n",
        "Leurs lèvres étaient si proches qu'ils pouvaient presque sentir le "
        "frisson d'anticipation parcourir leur peau.\n",
        "Le monde entier semblait s'effacer autour d'eux, ne laissant place "
        "qu'à l'autre et à cette connexion électrique qui les liait.",
        "Leurs lèvres se rapprochèrent, leurs yeux se fermèrent, ils pensèrent a "
        "tout ce qu'ils avaient traversé ensemble, prêt a oficialiser leur "
        "union en scellant leur désirs par leur premier baiser, tant attendu.",
        "Quelques millimètres, quelques centièmes de secondes, séparaient les deux amoureux de leur destin, et",
        "(Le livre s'arrête la.)",
    ],
    "Lettre d'Amour": [
        (
            "(nombre de cartes) (numéro de la carte) (nom du pouvoir) (effet du pouvoir)\n(5)1 et joker:fou: devinez la carte d'un type. Si vous reeussisez il meurt "
            "(sauf si c'est un autre fou) \n(4)2:chevalier: voir la carte de l'autre\n(4)3:tour: comparer sa carte avec celle de l'autre. La plus petite carte perd\n"
            "(3)4:la dame: vous protège de tout les cartes pendant un tours\n(3)5:scribe:fait poser la carte de quelqu'un \n(2)6:sorcier: échange sa carte avec celle "
            "d'un autre\n(2)7:Le chasseur: Annonce deux nombres. Ceux qui possèdent une carte dont la valeur se situe entre les deux nombres (ou est égale à l'un des "
            "nombres) doivent lever la main.\n(3)8:la servante: fais passer le tour de quelqu'un ou change le sens du jeu\n(1)9:magistrat: si en additionnant vos 2 cartes "
            "ça fait 15 ou + vous mourrez\n(1)10:la princesse:si vous posez cette carte vous mourrez (même par le scribe) \n(1)valet:le bourreau : désigne une personne. "
            "Si la personne a une carte avec un nombre pair, il meurt. \n(1)dame:l'imperatrice: permet de gagner de tromper la mort une seule fois (gagne une vie qui dure "
            "jusqu'à la fin de la partie)\n(1)roi :enfant empereur: aucun effet. Mais quand on l'a, on doit la poser la carte face retournée sur le front pour que tout le"
            "monde la voie."
        ),
        "A chaque tour, les joueurs prennent une carte, et en jettent une.\nLe pouvoir de la carte jetée s'active.\nLe jeu continue jusqu'a ce qu'il n'y aie plus qu'une personne.\nSi il n'y a plus qu'une seule carte, c'est celui qui a la plus grande carte qui gagne.",
    ],
    "Les Secrets du Manoir Hanté": [
        "La nuit était tombée sur le vieux manoir, enveloppant ses murs de mystère et de silence.",
        "À travers les fenêtres poussiéreuses, la lueur de la lune révélait des ombres dansantes, semblant murmurer des secrets oubliés.",
        "Au détour d'un couloir sombre, une porte grinça sinistrement, révélant une pièce plongée dans l'obscurité.",
        "Des échos lointains semblaient résonner dans les murs, comme si les pierres elles-mêmes avaient une histoire à raconter.",
        "Dans un coin obscur de la pièce, une vieille malle en bois renfermait des artefacts anciens, témoins silencieux des événements passés.",
    ],
    "Confession d'une Horreur des Abysses": [
        "Mon esprit est pareil au mouvement d'une rocking chair\nPensées tantôt sombre tantôt claires, quel enfer\nAucune constance, tout dans l'original",
        "Je m'attaque à la vie comme un homme de Néandertal \nArmé de mots, d'expérience , et d'un mental de fer\nD'un humour de bout d'chandelle trempé dans vie amère",
        "Je regarde les étoiles briller et vit au travers\nLes histoires des hommes passionné sont mes plus beau salaires\nRongé, le vide se sert sur mon corps",
        "Prend l'amour et la haine,et la rancoeur et la mort\nEntre ses ongles , ma peau fatiguée s'orne\nDes griffures sur mes poignets , je sens couler l'ychor ",
    ],
    "Rapport : Mirroir de Culte": [
        "L'appelation *Miroir de Culte* désigne un miroir rectangulaire mesurant approximativement 47 cm par 43 cm.\nLa bordure de ce miroir est encadrée par les vertèbres de quatre individus supposés être"
        "les membres fondateurs d'un culte de petite taille connu sous le nom de l'Ordre du Reflet.",
        "Le *Miroir de Culte* possède un léger effet de danger-cognitif contraignant les individus à éprouver une dévotion religieuse directe envers le *Miroir de Culte*.\nLa"
        " nature de cette dévotion varie en fonction des individus, sa manifestation étant basée sur leurs notions préconçues de la prière, du culte et"
        " d'autres activités connexes. \nCet effet augmente proportionnellement en fonction du temps que l'individu passe en présence du *Miroir de Culte*. \nCependant"
        ", un déni actif de la croyance en le *Miroir de Culte* semble empêcher cet effet, et l'administration d'amnésiques s'est montrée efficace pour inverser toute modification"
        " psychologique de long terme.",
        "Les individus regardant le *Miroir de Culte* en exprimant activement une dévotion religieuse rapportent voir une entité non identifiée à la place de leur reflet. "
        "\nLa caractérisation de cette anomalie est décrite comme une fusion des diverses conceptions du divin de l'adorateur. \nL'entité semble se nourrir de"
        " la dévotion religieuse qu'elle reçoit, exprimant des motivations entièrement déterminées par l'intention du culte qui lui est voué et disposant de "
        "capacités de pliage de réalité qui s'accroîent proportionnellement en fonction de la quantité nette de cette adoration. Aucune limite supérieure de "
        "ces capacités n'a pour l'instant été déterminée.",
    ],
    "Moi et mes Barils": [
        "Les barils. Ce ne sont pas juste des contenants. Ils ont une histoire riche.",
        "Certains barils étaient utilisés pour transporter du poisson, du hareng plus précisément.",
        "D'autres, de la mélasse. Ce qui, comme nous le savons tous, a été la chute de l'administration Coolidge.",
        "Il ne l'a pas vu venir, mais c'est arrivé. Ne laissez pas cela vous arriver.",
        "En conclusion, la prochaine fois que vous verrez un baril, pensez à ceci : Qu'est-ce qu'il contient ?",
        "Ce n'est ni du poisson ni de la mélasse. C'est du savoir. Et c'est le plus grand trésor de tous.",
        "Et ce n'est que le début. Les Romains utilisaient des barils pour transporter de l'huile d'olive.",
        "Les Celtes, de la bière. Et oui, même l'homme lui-même.",
        "L'homme, qui est sorti de l'océan et s'est dressé pour la première fois, l'a fait près d'un baril.",
        "J'ai toujours eu une préférence pour l'histoire de Sir Francis Drake qui a fait le tour du monde.",
        "Savez-vous comment il a empêché ses hommes de mourir du scorbut ? Des barils. Pleins de bière.",
        "Alors levons nos barils à Sir Francis Drake et à tous les explorateurs marins qui ont suivi.",
        "Des Vikings à Marco Polo en passant par Magellan.",
        "Et s'ils étaient là aujourd'hui, j'aimerais penser qu'ils lèveraient tous une pinte en mon honneur.",
        "À l'avenir !",
    ],
    "Cigogne Rouge": [
        "Extrait",
        "Extrait",
        "Extrait",
    ],
    "La Métaphysique Quantique Très Sérieuse": [
        "Karakai Jouzu No (Moto) Takagi-San\nKarakai Jouzu No Takagi-San\nBoku No Kanojo Ga Majime Sugiru Shojo Bitch Na Ken\nFechippuru ~Our Innocent Love~",
        "We Never Learn\nKakkou No Linazuke\nOnizuka-Chan And Sawarida-Kun\nSeishun Buta Yarou Wa Bunny Girl Senpai No Yume Wo Minai",
        "Komi-San Wa Komyushou Desu\nKubo san wa Boku\nUzaki-Chan Wa Asobitai!\nZutto Otokonoko da to Omotte ita Gakitaishou ga Onnanoko deshita",
        "Manga Sakourasou No Pet Na Kanojo\nDo chokkyuu kareshi x kanojo\nMaou no ore GA dorei elf Wo home ni shitanda GA d'où medereba li",
        "(La liste de noms de mangas de romance continue sur 463 pages.)",
    ],
    "Analyse du Mana : Une Étude des Principes Fondamentaux de l'Énergie Magique": [
        (
            "- Nature du Mana :\nLe mana est une forme d'énergie magique omniprésente dans l'univers, perceptible mais insaisissable pour la plupart des individus."
            " Il réside dans les flux éthérés qui traversent le monde et peut être canalisé par ceux qui maîtrisent les arts de la magie."
        ),
        (
            "- Intention et Concentration :\nL'utilisation efficace du mana repose sur l'intention et la concentration de l'utilisateur. L'intention détermine le but de l'acte magique,"
            " tandis que la concentration permet de canaliser le mana avec précision vers cet objectif. Une intention claire et une concentration soutenue sont essentielles pour obtenir"
            " des résultats magiques cohérents et puissants."
        ),
        (
            "- Utilisation du Mana :\nUne fois canalisé, le mana peut être utilisé pour réaliser une variété d'effets magiques, allant de simples sortilèges à des rituels complexes."
            " La nature et l'étendue de ces effets dépendent de plusieurs facteurs, notamment la quantité de mana disponible, la compétence de l'utilisateur et la spécificité de l'intention."
        ),
        (
            "- Réservoir de Mana :\nLe mana peut être stocké dans un réservoir personnel, souvent situé à l'intérieur de l'individu pratiquant la magie. Ce réservoir agit comme une"
            " réserve d'énergie magique, permettant à l'utilisateur d'accéder au mana quand il en a besoin. La capacité du réservoir varie d'un individu à l'autre et peut être augmentée"
            " par des techniques d'entraînement magique."
        ),
        (
            "- Absorption du Mana :\nEn plus d'être stocké dans un réservoir interne, le mana peut être absorbé de différentes sources externes, telles que des cristaux magiques,"
            " des artefacts enchantés ou même l'énergie environnante. L'absorption du mana nécessite souvent une connexion mentale et spirituelle avec la source, ainsi qu'une compréhension"
            " profonde des flux énergétiques."
        ),
        (
            "- Conclusion :\nLe mana représente une force vitale dans la pratique de la magie, reliant l'intention de l'utilisateur à la réalité de ses manifestations."
            " Comprendre ses principes fondamentaux d'intention, de concentration, d'utilisation, de réservoir et d'absorption est essentiel pour tout praticien de la magie"
            " souhaitant maîtriser cette énergie mystique et puissante."
        ),
    ],
    "Comprendre la Noosphère": [
        (
            "La noosphère est un concept philosophique et scientifique introduit par le théologien et philosophe français Pierre Teilhard"
            " de Chardin dans les années 1920.\nIl décrit la sphère de la pensée humaine et de la conscience collective qui englobe la biosphère"
            " (l'environnement biologique de la Terre).\nSelon Teilhard de Chardin, la noosphère est le stade ultime de l'évolution terrestre,"
            " où la pensée et la conscience deviennent des forces dominantes et où l'humanité est interconnectée à un niveau global par le biais"
            " de la communication et de la technologie.\nC'est une notion qui englobe les idées de conscience collective, d'interconnexion et de transformation sociale et spirituelle."
        ),
        "Testez votre connexion avec la conscience collective théorisée par Pierre avec ces nombres !\nSi vous n'êtes d'accord avec aucune de ces associations, alors il avait peut etre tort...",
        "Mortalité : 11 (stabilité, temporaire)",
        "Étoile : 12 (guidance, illumination)" "Positif : 9 (passion, transformation)",
        "Négatif : 2 (froid, dualité)",
        "Intention : 7 (spiritualité, introspection)",
        "Energie : 3 (mouvement, émotion)",
        "Masse : 1 (individualité, manifestation physique)",
        "Ciel : 8 (expansion, vision)",
        "Divin : 5 (omniscient, innaretable)",
        "Forêt : 10 (abondance, mystère)",
        "Vent : 6 (liberté, changement)",
        "Chaleur : 4 (vitalité, lien familial)",
    ],
    "Cette fois-ci je vais réussir !": [
        "Réaction= le temps que l'info arrive a mon cerveau (dizaine de la vitesse x3)\nFreinage= force cinétique, le temps que les freins fassent effet (dizaine de la vitesse au carre)",
        (
            "Arrêt: réaction +freinage\nautoroute: voie de droite est pour poids lourds et véhicules a -  de 60kmh\nBcp d'infraction: 8points max.\n1 infraction: 6 points max"
            "Taux alcoolémie + = 6 points\nQuand QQ veut se mettre alors qu'il a pas la prio, change de voie\nRègle générale: 0,50"
        ),
        "Proba: 0,20\nEthylotest de marché:  pour probatoire et débutants\nQuand on rétrograde, faire attention au surégime. Ne pas rétrograder a tout bout de champ.\nRefus de prio a un piéton: amande et -4 points",
        "(Le reste du livre est composé de notes sur le code de la route.)\n(La plupart sont évidentes, certaines sont fausses.)",
    ],
    "Les Échos du Temps": [
        "L'épais brouillard enveloppait la forêt de ses tentacules opaques, étouffant les bruits du monde extérieur.",
        "Entre les arbres tordus et les buissons épais, une silhouette solitaire se fraya un chemin, ses pas écrasant les feuilles mortes sous ses bottes.",
        "Le poids de l'obscurité était palpable, mais quelque chose dans l'air semblait annoncer un changement imminent.",
        "Les murmures lointains des ancêtres semblaient résonner à travers les arbres, comme des échos du passé, appelant à la mémoire des temps oubliés.",
        "Au cœur de cette clairière oubliée, une lueur faible émergeait, éclairant un objet mystérieux enfoui dans le sol depuis des siècles.",
    ],
    "Mémoires de Géologue": [
        "Les montagnes verdoyantes se perdent dans les barres brumeuse, se mouvant tel des cavaliers de l'éther affrontant l'éphémère de leur existance.",
        "Ça et la, le ciel saigne des mares de lumières et de bleu, répondant aux arbres teintés de jai et d'ecrin. ",
        "Et au milieu de ce spectacle de couleurs...",
        "...nous on prend des notes sous la flotte.",
    ],
    "Havre : Rapport": [
        "*Havre* est la désignation provisoire de la dimension 882R53, un plan extradimensionnel de taille inconnue. "
        "\nLe *Havre* a l'apparence d'un désert de sel à la surface solide avec une réflectivité quasi parfaite. "
        "\nIl a été remarqué que la surface a également un goût salé.",
        "Les entités à l'intérieur du *Havre* ne semblent pas souffrir d'une quelconque forme de perte énergétique ni de décomposition,"
        " puisque plusieurs appareils électroniques introduits dans le *Havre* fonctionnent continuellement depuis au moins 296 561 années sans défaillance,"
        " et que les personnes à l'intérieur ne semblent pas vieillir ni avoir besoin de se nourrir, ce qui les rend biologiquement immortelles.",
        "Le *Havre* est entièrement monotone, à l'exception d'un unique arbre (désigné *Havre:Arbre* ci-après) comportant un danger-sensitif :"
        " l'observateur est toujours conscient de sa localisation, peu importe la distance ou la visibilité.",
        "Le corps du Dr Charles Gears a été découvert affaissé contre la base de *Havre:Arbre*. \nLa date de la dernière mise"
        " à jour de ce document, ainsi que le rapport d'autopsie et les 1 779 095 vidéos retrouvées sur son lecteur indiquent "
        "qu'il est mort à l'âge d'environ 450 000 ans de causes naturelles.",
    ],
}
LISTEEFFETSARTEFACT = {
    "Graine de Grenade": {"Commentaire": "Cette graine d'un fruit apprécié des dieux augmente votre vitalité.",
                           "Vie": 15},  # vie t
    "Eau du Styx": {"Commentaire": "Cette fiole imprégnée de l'essence des morts augmente votre réservoir de mana.",
                             "Mana": 15},  # mana t
    "Aile de Cire d'Icare": {"Commentaire": "Ce bout du chef d'oeuvre de Dédale augmente votre capacité a esquiver les attaques.",
                              "Taux esquive": 6},  # esquive t
    "Griffe de Lion": {"Commentaire": "Cette griffe contient l'essence d'une bête féroce abattue par le Roi Singe, et augmente votre attaque.",
                        "Attaque": 8},  # attaque t
    "Statue d'Angerona": {"Commentaire": "Angerona, la déesse de la Concentration, veille sur tout ses fidèles, et vous octroie la vue qui discerne les faiblesses.",
                           "Taux coup critique": 6, "Taux sort critique": 6},  # taux critique t
    "Collier de Mithril": {"Commentaire": "Ce collier est le tout premier artefact crée par les tout premiers nains, pour résister aux attaques des tout premiers monstres pendant l'Age du Chaos.",
                            "Defence": 8},  # defence t
    "Elixir du Sage": {"Commentaire": "Cette bouteille contient toutes les réalisations du doyen de la Grande Bibliothèque d'Alexandrie, sous forme liquide.",
                        "Intelligence": 8},  # intelligence
    "Petite Pierre Philosophale": {"Commentaire": "Ce prototype permet de transmuter une quantitée limitée de choses en or.",
                                    "Gold": 1000},  # gold t
    "Anneau Cramoisi": {"Commentaire": "Cet anneau forgé pendant la Guerre de l'Interdit a bu le sang de nombreux dieux et déesses afin de conferer leur endurance a son porteur.",
                         "Endurance": 20},  # endurance t
    "Orbe de Disruption": {
        "Commentaire": "Cet orbe vient de l'Ains Terra Net, le monde des voyageurs, et perturbe le mana environnant.\nLes monstres avec un réservoir de mana brisé perdent 10 pv supplémentaires par tour !",
    },  # degat quand ennemi plus mana
    "Plume de Munin": {"Commentaire": "Cette plume vient de Munin, un des corbeaux d'Odin qui voyage a travers les neufs mondes, et confère a son porteur une certaine aisance a esquiver les attaques.",
                        "Taux esquive": 6},  # esquive t
    "Collier des Brísingar": {"Commentaire": "Ce collier porté par Freya élève le corps et son réservoir de mana a une condition optimale pour le rendre plus charismatique.",
                               "Vie": 8, "Mana": 8},  # vie et mana t
    "Draupnir": {"Commentaire": "D'après les légendes, cet anneau est sensé se multiplier par 9 toute les 9 nuits.\nIl n'a pas l'air de réagir pour le moment..."},  # gold t
    "Magatama": {
        "Commentaire": "Cette perle passée de générations en générations par les plus grands empereurs du monde contient une partie de leur âme et confère a son porteur de multiples augmentations.",
        "Attaque": 2, "Defence": 2, "Intelligence": 2, "Vie": 4, "Mana": 4, "Endurance": 5
    },  # attaque, intelligence, defence, vie, mana, endurance
    "Voile de Ino": {"Commentaire": "Le voile porté brièvement par Ulysse, et qui protege des attaques (permanent) et de la mort (une seule fois).",
                     "Defence": 2},  # defence t
    "Megingjord": {"Commentaire": "La ceinture de Thor qui lui donne une grande puissance pendant les moments critiques, ainsi que la capacité de soulever son marteau.",
                    "Degat coup critique": 10, "Degat sort critique": 10},  # degat critiques t
    "Manne Céleste": {"Commentaire": "La seule source de nourriture des hébreux pendant 40 ans, gracieusement offerte par le Ciel, et qui leur a permit de marcher jusqu'a trouver leur terre d'adoption.",
                       "Endurance": 10, "Vie": 10},  # endurance + vie t
    "Nœud Gordien": {"Commentaire": "Le cordage compliqué défait seulement par le Maitre de l'Asie, mais finalement tranché par Alexandre le Grand, et qui a gardé depuis une partie de sa force.",
                      "Attaque": 5},  # attaque t
    "Don de Terre": {"Commentaire": "Un simple sac contenant les Redcoins d'une divinité de la Terre.",
                      "Red coin": 2},  # donne redcoin
    "Don de Foudre": {"Commentaire": "Un simple sac contenant les Redcoins d'une divinité de la Foudre.",
                      "Red coin": 2},  # donne redcoin
    "Don de Feu": {"Commentaire": "Un simple sac contenant les Redcoins d'une divinité du Feu.",
                      "Red coin": 2},  # donne redcoin
    "Don de Glace": {"Commentaire": "Un simple sac contenant les Redcoins d'une divinité de Glace.",
                      "Red coin": 2},  # donne redcoin
    "Don Sanguin": {"Commentaire": "Un simple sac contenant les Redcoins d'une divinité de Sang.",
                      "Red coin": 2},  # donne redcoin
    "Don Physique": {"Commentaire": "Un simple sac contenant les Redcoins d'une divinité de l'Effort.",
                      "Red coin": 2},  # donne redcoin
    "Don Astral": {"Commentaire": "Un simple sac contenant les Redcoins d'une divinité de l'Ame.",
                      "Red coin": 2},  # donne redcoin
    "Nimbe Divine": {"Commentaire": "Un cadeau des dieux symbolisant la divinité et la sacralité de ceux qui ont accomplit de grandes choses.",
                      "Intelligence": 5},  # intelligence t
    "Couronne Sacrée": {
        "Commentaire": "La Couronne d'Epine de Jésus, un symbole absolu de dévotion, l'incarnation de l'esprit au dessus du corps.\nVos points d'endurance peuvent maintenant aller dans le négatif."
    },  # endurance peut aller dans le négatifs
    "Gant de Midas": {
        "Commentaire": "Le gant isolant d'un roi de Phrygie qui transformait tout ce qu'il touche en or.\nRéagit à la magie dans un crystal élémentaire pour enlever l'altération d'état [Gelure]."
    },  # enleve la gelure quand utilise un crystal élémentaire
    "Gant d'Héphaïstos": {
        "Commentaire": "Le gant isolant d'un dieu des Arts de la Forge.\nRéagit à la magie dans un crystal élémentaire pour enlever l'altération d'état [Brulure]."
    },  # enleve la brulure quand utilise un crystal élémentaire
    "Plaquette du Souvenir": {
        "Commentaire": "Une plaquette sur laquelle sont inscrites les postures d'une ancienne version de l'attaque légère, trop forte pour son propre bien.\nL'Attaque Légère fait maintenant bien plus de dégâts."
    },  # degats de l'attaque légère * 3
    "Monocle de Vérité": {
        "Commentaire": "Une race de servants royaux travaillant dans l'ombre, surentrainés, et massacrés par leurs maitres apeurés.\nCe bijou magique né de leur torture vous fait trouver 5 golds par nouvelle salle observée (incompatible avec le Schmilblick.)"
    },  # gagne 5 gold quand observe salle
    "Sabre du Roi de Glace": {
        "Commentaire": "Un bout de glace a moitié fondu, ayant appartenu a un Roi reposant dans sa tombe, inutilisable en combat.\nSa magie vous protège cepandant des pièges."
    },  # immunisé face aux pièges
    "Bocle de Philoctète": {
        "Commentaire": "Un petit bouclier a fixer au niveau de la paume, ayant appartenu a un faiseur de légende.\nVotre défence augmente encore plus lorsque vous vous protégez."
    },  # defence quand se protege * 1.5
    "Ecaille d'Ouroboros": {
        "Commentaire": "L'écaille d'un divin serpent signifiant le renouveau et l'infini.\nVous regagnez 2 points de vie a chaque utilisation de sorts."
    },  # Rend 2 pv par utilisation de sort
    "Serment d'Heimdall": {
        "Commentaire": "La marque du serment d'un dieu omniscient envers le peuple qui a continué a le prier dans le pire des moments.\nIl y a de très faibles chance qu'un sort utilise son mana au lieu du votre."
    },  # 3% de chance de ne pas utiliser de mana quand jette un sort
    "Masque d'Oblivion": {
        "Commentaire": "Un masque blanc, sans expressions, qui semble faire oublier la présence même de son porteur.\nLa fuite d'un combat normal est garantie."
    },  # fuite garantie
    "Chapelet de Moine": {
        "Commentaire": "Le chapelet ayant appartenu a un pelerin faisant route vers l'Ouest, accompagné d'un roi singe, un porc-démon, et un moine de sable.\nVous gagnez l'altération d'état [Béni] après avoir passé votre tour. La prochaine attaque sera alors critique."
    },  # beni quand on passe son tour
    "Oeuil de Phénix": {
        "Commentaire": "Une gemme représentant l'oeil d'un phénix, dans lequel on peut voir une tempête de feu noir figée.\nVous reprenez tout vos points de mana lors d'une résurrection."
    },  # Reprend 100% mana quand resurection
    "Echarde de Pinocchio": {
        "Commentaire": "Un éclat de la poupée de bois qui trompe la réalitée elle même avec ses mensonges.\nVous avez une très très faible chance de revenir a la vie lorsque vous mourrez, même sans objet pour."
    },  # Faible pourcentage de chance de ne pas mourir
    "Voeu Cristallisé": {
        "Commentaire": "La forme cristallisée du voeu du plus monstreux des hommes qui n'a formulé qu'une seule demande au génie en face de lui : Devenir une meilleure personne.\nVotre stigma négatif disparait a son contact."
    },  # Efface le stigma négatif
    "Haricot Magique": {
        "Commentaire": "La graine d'une plante monstreuse amenant son planteur dans une dimension remplie de ses semblables, affamés et en manque de nutriments, cachée dans les nuages.\nSes racines tentaculaires cherchant le sang ne peuvent être stoppées que par une lame plantée dans la graine originelle.\nInvoque des roches depuis sa dimension d'origine, augmentant les dégâts de l'effet [Lapidation]."
    },  # 20% de degats supplémentaires par lapidation
    "Miette de Pain Congelée": {
        "Commentaire": "La seule trace d'enfants emmenés dans les sombres forêts du continent pour y être perdus par leurs parents en manque d'argent.\nLa rancoeur d'âmes pures englouties par ce qui se cache dans les bois fait durer l'altération d'état [Gelure] pendant 2 tours supplémentaires."
    },  # gelure reste 2 tours de plus
    "Chaperon Rouge": {
        "Commentaire": "Un vêtement traditionnel médiéval, dont l'interieur est marqués de profondes griffures.\nRéduit le cout en vie des techniques lorsque vous êtes sous l'effet de altération d'état [Blessé]."
    },  # Cout en vie reduit quad on est blessé
    "Morceau de Plomb": {
        "Commentaire": "Un morceau de plomb en forme de goutte, appartenant a un soldat de plomb lancé dans les braises du feu qui a brulé son amante : une danseuse de papier.\nLes échos de l'amour profond qu'il a ressenti dans ses derniers moments aident a rester concentré, et réduit le malus de mana de l'altération d'état [Déconcentré]."
    },  # Cout en mana reduit quand déconcentré
    "Bague de l'Âne": {
        "Commentaire": "La bague d'une princesse fiancée a son propre père a son insu, que ce dernier a pu reconnaitre avant de finaliser l'union incestueuse.\nVos pensées s'éclaircissent lorsque vous tenez l'anneau, et l'altération d'état [Confus] ne vous affecte plus."
    },  # Confusion s'arrete en 1 tour
    "Pièce Fondue": {
        "Commentaire": ("Une pièce de monnaie représentant la vengeance, maudissant les ennemis de son porteur."
                    "\nLes coups critiques maudissent les ennemis, les ennemis maudits perdent 2 pm par tour.")
    },
    "Tiare de Suie": {
        "Commentaire": ("Un bibelot vénéré par un clan de voleur, porté par sa dernière cheffe pendant un régicide."
                    "\nAccorde la bénédiction du feu sacré a son porteur pour chaque coups esquivés.")
    },
    "Chaine de Main": {
        "Commentaire": ("Un bijou magique qui se porte au niveau des mains, et qui transforme une prothèse en véritable main connectée au système nerveux."
                    "\nLes sorts critiques font deux fois plus de dégâts.")
    },
    "Larme d'Yggdrasil": {
        "Commentaire": ("Une perle de sève venant d'un arbre magestueux qui communique une grande tristesse a ceux qui dorment sous ses branches."
                    "\nEn combat, les feuilles et fruits Jindagee et Aatma durent 2 fois plus longtemps")
    },
    "Collier de Nephilim": {
        "Commentaire": ("Un artefact témoignant de l'amour entre un paysant devenu démon et une papesse devenue ange, laissée a leur enfant avant de mourir."
                    "\nRecouvrir des pm permet de recouvrir des pv, avec un ratio 2/1 (2pm regagnés ==) 1 pv regagné en plus)")
    },
    "Cape Victorieuse": {
        "Commentaire": ("Une cape macabre cousue avec les fils d'un drapeau pirate et les ailes du Ministre du Mana."
                    "\nChaque ennemi tué augmente de 0.5% les dégâts totaux.")
    },
    "Schmilblick": {
        "Commentaire": ("Un bidule bizarre crée par une inventrice farfelue."
                    "\nA l'entrée d'un nouvel étage, toutes ses salles sont directement dessinées sur la carte (annule les effets du Monocle de Vérité)")
    },
    "Contrat de Travail": {
        "Commentaire": ("Un bout de papier promettant la puissance aux économes afin qu'ils ne se fassent plus martyriser par le système."
                    "\nVous gagnez 2% de dégâts totaux supplementaire par paquets de 50 pièces possédé.")
    },
    "Dessin Nostalgique": {
        "Commentaire": ("Un dessin au charbon d'un vieil homme en plein sommeil, adossé contre une louve."
                    "\nPasser son tour donne l'altération d'état *Concentration* pendant 2 tours, qui réduit le nombre de pm nécéssaire pour chaque sorts.")
    },
    "Vide Interieur": {
        "Commentaire": ("Un sentiment de malaise, comme si vous étiez passé a coté de quelque chose, et que votre aventure avec ce personnage n'a pas livré tout ses secrets."
                    "\nEnlève le stigma négatif [Incontrollable], ainsi que 15 points de mana maximum.")
    },
    "Badge Terni": {
        "Commentaire": ("Un morceau de métal terni par le temps, les éléments, et les tentations, mais qui reste solide et droit."
                    "\nRéduit les prix du marchand de 30%, lorsque il ne reste plus d'ennemis a affronter dans l'arène de l'étage en cours (boss compris).")
    },
    "Perle de Pluie": {
        "Commentaire": ("Un crystal serein, symbole de la libération des chaines de l'esprit."
                    "\nChance de faire un sort critique : +33%."),
                    "Taux sort critique": 33
    },
    "Syra": {
        "Commentaire": ("Une verre divin de lait fermenté apprécié par un certain dieu nordique jeté hors de son throne par une ""valkyrie inutile au combat""."
                    "\nLes nouvelles techniques apprises donnent 10pm max supplémentaires."
                    "\nLes nouveaux sorts appris donnent 10pv max supplémentaires.")
    },
    "Pin's Extincteur": {
        "Commentaire": ("Un joli pin's a accrocher sur un vêtement, représentant un extincteur rouge."
                    "\nLorsque l'effet Brulûre se termine, redonne 10pv et 10pm.")
    },
    "Bandeau Teinté": {
        "Commentaire": ("Une relique de Thémis, l'esprit de la Justice, marqué d'un curieux éclat doré."
                        "\nEn combat, vous gagnez 1 pièce a chaque tours.")
    },        
    "Ecaille de la Bête": {
        "Commentaire": ("Le dernier témoin de l'existence d'une bête féroce dans le Coliseum, laissée derriere a la poursuite de la liberté."),
                        "Defence": 10
    },        
    "Hors Stock": {
        "Commentaire": ("Un petit bout de papier sur lequel est écrit *Plus d'artefact a donner*.\nNe fait rien."),
    },        
}
ARTEFACTSOPHIQUE = [
    "Orbe de Disruption",
    "Draupnir",
    "Voile de Ino",
    "Couronne Sacrée",
    "Gant de Midas",
    "Gant d'Héphaïstos",
    "Plaquette du Souvenir",
    "Monocle de Vérité",
    "Sabre du Roi de Glace",
    "Bocle de Philoctète",
    "Ecaille d'Ouroboros",
    "Serment d'Heimdall",
    "Masque d'Oblivion",
    "Chapelet de Moine",
    "Oeuil de Phénix",
    "Echarde de Pinocchio",
    "Voeu Cristallisé",
    "Haricot Magique",
    "Miette de Pain Congelée",
    "Chaperon Rouge",
    "Morceau de Plomb",
    "Bague de l'Âne",
    "Char Leclerc 3ème Génération à Dispositif GALIX, Canon Principal 120mm et Armement Secondaire à Mitrailleuse 12,7 mm Coaxiale et Mitrailleuse de 7,62 mm en Superstructure",
    "Assurance Distributeur",
    "Hors Stock"
]
ARTEFACTMELIORATIF = [
    "Graine de Grenade",
    "Eau du Styx",
    "Aile de Cire d'Icare",
    "Griffe de Lion",
    "Statue d'Angerona",
    "Collier de Mithril",
    "Elixir du Sage",
    "Petite Pierre Philosophale",
    "Anneau Cramoisi",
    "Plume de Munin",
    "Collier des Brísingar",
    "Magatama",
    "Voile de Ino",
    "Megingjord",
    "Manne Céleste",
    "Nœud Gordien",
    "Don de Terre",
    "Don de Foudre",
    "Don de Feu",
    "Don de Glace",
    "Don Sanguin",
    "Don Physique",
    "Don Astral",
    "Nimbe Divine",
    "Ecaille de la Bête",
    "Âme de la Bête",
    "Regard de la Bête",
    "Epée de Damocles", 
    "Morceau d'Ether Fragile", 
    "Eau Bénite", 
    "Bandeau Catharsis", 
    "Charbon Primordial", 
    "Saphir de Gel", 
    "Fossile Figé", 
    "Fiole des Eclairs"
]
ARTEFACTFATALITE = [
    "Pièce Fondue",
    "Tiare de Suie",
    "Chaine de Main",
    "Larme d'Yggdrasil",
    "Collier de Nephilim",
    "Cape Victorieuse",
    "Schmilblick",
    "Contrat de Travail",
    "Dessin Nostalgique",
    "Vide Interieur",
    "Badge Terni",
    "Perle de Pluie",
    "Syra",
    "Pin's Extincteur",
    "Bandeau Teinté",
]

LISTEITEMDEFENCE = [
    "Feuille Jindagee",
    "Fruit Jindagee",
    "Feuille Aatma",
    "Fruit Aatma",
    "Ambroisie",
    "Hydromel",
    "Orbe de Furie",
    "Orbe de Folie",
    "Remède",
    "Remède Superieur",
    "Remède Divin",
    "Pillule",
    "Pillule Superieure",
    "Pillule Divine",
    "Mutagène Bleu",
    "Grand Mutagène Bleu",
    "Mutagène Rouge",
    "Grand Mutagène Rouge",
    "Mutagène Vert",
    "Grand Mutagène Vert",
    "Mutagène Doré",
    "Grand Mutagène Doré",
    "Mutagène Hérétique",
    "Mutagène Fanatique",
]
LISTEITEMATTAQUE = [
    "Crystal Elémentaire",
    "Fléchette Rouge",
    "Flèche Rouge",
    "Fléchette Bleue",
    "Flèche Bleue",
    "Poudre Explosive",
    "Roche Explosive",
    "Bombe Explosive",
    "Fiole de Poison",
    "Gourde de Poison",
    "Sève d'Absolution",
    "Larme d'Absolution",
    "Soluté d'Absolution",
    "Sève d'Exorcisme",
    "Larme d'Exorcisme",
    "Soluté d'Exorcisme",
]
LISTEITEMDEBUTTOUR = [
    "Fiole de Poison",
    "Gourde de Poison",
    "Sève d'Absolution",
    "Larme d'Absolution",
    "Soluté d'Absolution",
    "Sève d'Exorcisme",
    "Larme d'Exorcisme",
    "Soluté d'Exorcisme",
    "Mutagène Bleu",
    "Grand Mutagène Bleu",
    "Mutagène Rouge",
    "Grand Mutagène Rouge",
    "Mutagène Vert",
    "Grand Mutagène Vert",
    "Mutagène Doré",
    "Grand Mutagène Doré",
    "Mutagène Hérétique",
    "Mutagène Fanatique",
]
LISTEITEM = [
    "Feuille Jindagee",
    "Fruit Jindagee",
    "Feuille Aatma",
    "Fruit Aatma",
    "Crystal Elémentaire",
    "Ambroisie",
    "Hydromel",
    "Orbe de Furie",
    "Orbe de Folie",
    "Remède",
    "Remède Superieur",
    "Remède Divin",
    "Pillule",
    "Pillule Superieure",
    "Pillule Divine",
    "Fléchette Rouge",
    "Flèche Rouge",
    "Fléchette Bleue",
    "Flèche Bleue",
    "Poudre Explosive",
    "Roche Explosive",
    "Bombe Explosive",
    "Fiole de Poison",
    "Gourde de Poison",
    "Sève d'Absolution",
    "Larme d'Absolution",
    "Soluté d'Absolution",
    "Sève d'Exorcisme",
    "Larme d'Exorcisme",
    "Soluté d'Exorcisme",
    "Mutagène Bleu",
    "Grand Mutagène Bleu",
    "Mutagène Rouge",
    "Grand Mutagène Rouge",
    "Mutagène Vert",
    "Grand Mutagène Vert",
    "Mutagène Doré",
    "Grand Mutagène Doré",
    "Mutagène Hérétique",
    "Mutagène Fanatique",
]
LISTEITEMUPPGRADE = {
    "Feuille Jindagee" : {"Vie" : 2},
    "Fruit Jindagee" : {"Vie" : 4},
    "Feuille Aatma" : {"Mana" : 2},
    "Fruit Aatma" : {"Mana" : 4},
    "Crystal Elémentaire" : {"Degat coup critique" : 1, "Degat sort critique" : 1},
    "Ambroisie" : {"Attaque" : 1, "Vie" : 2},
    "Hydromel" : {"Intelligence" : 1, "Mana" : 2},
    "Orbe de Furie" : {"Attaque" : 2, "Vie" : 4},
    "Orbe de Folie" : {"Intelligence" : 2, "Mana" : 4},
    "Remède" : {"Vie" : 1},
    "Remède Superieur" : {"Vie" : 3},
    "Remède Divin" : {"Vie" : 6},
    "Pillule" : {"Mana" : 1},
    "Pillule Superieure" : {"Mana" : 3},
    "Pillule Divine" : {"Mana" : 6},
    "Fléchette Rouge" : {"Taux coup critique" : 1},
    "Flèche Rouge" : {"Taux coup critique" : 2},
    "Fléchette Bleue" : {"Taux sort critique" : 1},
    "Flèche Bleue" : {"Taux sort critique" : 2},
    "Poudre Explosive" : {"Taux coup critique" : 1},
    "Roche Explosive" : {"Taux coup critique" : 2, "Degat coup critique" : 2},
    "Bombe Explosive" : {"Taux coup critique" : 2, "Degat coup critique" : 3},
    "Fiole de Poison" : {"Taux sort critique" : 1},
    "Gourde de Poison" : {"Taux sort critique" : 2, "Degat sort critique" : 3},
    "Sève d'Absolution" : {"Endurance" : 1},
    "Larme d'Absolution" : {"Endurance" : 2, "Defence" : 1},
    "Soluté d'Absolution" : {"Endurance" : 3, "Defence" : 1, "Mana" : 1},
    "Sève d'Exorcisme" : {"Endurance" : 1},
    "Larme d'Exorcisme" : {"Endurance" : 2, "Defence" : 1},
    "Soluté d'Exorcisme" : {"Endurance" : 3, "Defence" : 1, "Vie" : 1},
    "Mutagène Bleu" : {"Mana" : 3},
    "Grand Mutagène Bleu" : {"Mana" : 6},
    "Mutagène Rouge" : {"Vie" : 3},
    "Grand Mutagène Rouge" : {"Vie" : 6},
    "Mutagène Vert" : {"Taux esquive" : 1},
    "Grand Mutagène Vert" : {"Taux esquive" : 2},
    "Mutagène Doré" : {"Mana" : 4, "Vie" : 4, "Endurance" : 4, "Attaque" : 1, "Intelligence" : 1, "Defence" : 1,},
    "Grand Mutagène Doré" : {"Red coin" : 1},
    "Mutagène Hérétique" : {"Attaque" : 3, "Vie" : 6},
    "Mutagène Fanatique" : {"Intelligence" : 3, "Mana" : 6},
}
LISTEITEMBASE = [
    "Feuille Jindagee",
    "Feuille Aatma",
    "Ambroisie",
    "Hydromel",
    "Orbe de Furie",
    "Orbe de Folie",
    "Remède",
    "Remède Superieur",
    "Pillule",
    "Pillule Superieure",
    "Fléchette Rouge",
    "Fléchette Bleue",
    "Poudre Explosive",
    "Roche Explosive",
    "Fiole de Poison",
    "Sève d'Absolution",
    "Larme d'Absolution",
    "Sève d'Exorcisme",
    "Larme d'Exorcisme",
    "Mutagène Bleu",
    "Mutagène Rouge",
    "Mutagène Vert",
    "Mutagène Doré",
]
LISTEITEMAVANCE = [
    "Fruit Jindagee",
    "Fruit Aatma",
    "Orbe de Furie",
    "Orbe de Folie",
    "Mutagène Hérétique",
    "Mutagène Fanatique",
    "Remède Superieur",
    "Remède Divin",
    "Pillule Superieure",
    "Pillule Divine",
    "Flèche Rouge",
    "Flèche Bleue",
    "Roche Explosive",
    "Bombe Explosive",
    "Gourde de Poison",
    "Larme d'Absolution",
    "Soluté d'Absolution",
    "Larme d'Exorcisme",
    "Soluté d'Exorcisme",
    "Grand Mutagène Bleu",
    "Grand Mutagène Rouge",
    "Grand Mutagène Vert",
    "Grand Mutagène Doré",
]
LISTEDEMUSIQUE = [
    "Gigantomachie",
    "Endorphines",
    "Dangereuses Mélancolies",
    "L'Orage avant la Tempête",
    "Fanfare",
    "Sillages Sur Une Mer de Rêves",
    "Sels Sudatoires",
    "Ré-Hydraté",
    "Pluie d'Automne",
    "Bêtise Humaine",
    "Esotériques Réflexions",
    "Exploratio",
    "Les Joies du Combat",
    "Revenant",
    "Conte de Fée",
    "Epineuses Rencontres",
    "Le Chevalier Qu'on Ne Veut Pas Rencontrer",
    "Affreux Fertile",
    "Clair de Sang",
    "Néophobie Alimentaire",
    "Ruines d'Antan",
    "Sables Mouvants",
    "Euthanasie Régalienne",
    "Pareísaktos",
    "Pāramitā",
    "Nerd Party",
    "Jeux d'Enfants",
    "Pantomime",
    "Carnaval",
    "Fièvre du Samedi Soir",
    "Piñata",
    "Tragicomique",
    "Combler les Vides",
    "Systèmes Défaillants",
    "Sa Majesté Des Mouches",
    "Divin Karma",
    "Folie Furieuse",
    "Sans Remords",
    "Le Prix des Larmes",
    "Noblesse Oblige",
    "Coeur, Ego, Tango.",
    "Ossuaire Immaculé",
    "Dissonance Cognitive",
    "Faux Semblants",
    "La Hache et le Grimoire",
    "Gr4c1euse Nécr0log1e",
    "Plum5 d'0ie",
    "Pr0s0pagn0sie",
    "Mach1n3 Inf3rn4le",
    "S1mul4crum",
    "V3tus S4nct0rum",
    "Cruc1fix1on",
    "Réarr4ng3ment L1m1nal",
    "4rythm1e",
    "Au Dé7our D’un S3nti3r Une Ch4rogn3 Infâme",
    "Th3 L4byr1nth Génés1s",
    "Sur l3 S3nt1er de l4 Gu3rr3",
    "Ad Inf1n1tum",
    "La D1v1ne Coméd1e",
    "Ap0gé3 Inv3rsée",
    "Thé0r1e du Ch40s",
    "Pénult1me",
    "M0n Un1vers"
]
LISTECARACTERISTIQUEMUSIQUE = [
    ["start", "Vous écoutez "],
    ["tutorial", "Vous écoutez "],
    ["alfredproto", "Vous écoutez "],
    ["boss_introV2", "Vous écoutez "],
    ["battle_win", "Vous écoutez "],
    ["gravestone", "Vous écoutez "],
    ["fishing", "Vous écoutez "],
    ["bathhouse", "Vous écoutez "],
    ["ending", "Vous écoutez "],
    ["reconfort", "Vous écoutez "],
    ["debug", "Vous écoutez "],
    ["etage_1", "Vous écoutez "],
    ["battle_theme_1", "Vous écoutez "],
    ["boss_1", "Vous écoutez "],
    ["etage_2", "Vous écoutez "],
    ["battle_theme_2", "Vous écoutez "],
    ["boss_2", "Vous écoutez "],
    ["etage_2_alt", "Vous écoutez "],
    ["battle_theme_2_alt", "Vous écoutez "],
    ["boss_2_alt", "Vous écoutez "],
    ["etage_3", "Vous écoutez "],
    ["battle_theme_3", "Vous écoutez "],
    ["boss_3", "Vous écoutez "],
    ["darkness", "Vous écoutez "],
    ["etage_4", "Vous écoutez "],
    ["battle_theme_4", "Vous écoutez "],
    ["boss_4", "Vous écoutez "],
    ["boss_4_phase_2", "Vous écoutez "],
    ["etage_5", "Vous écoutez "],
    ["dance", "Vous écoutez "],
    ["battle_theme_5", "Vous écoutez "],
    ["boss_5", "Vous écoutez "],
    ["etage_6", "Vous écoutez "],
    ["battle_theme_6", "Vous écoutez "],
    ["boss_6", "Vous écoutez "],
    ["etage_7", "Vous écoutez "],
    ["battle_theme_7", "Vous écoutez "],
    ["boss_7", "Vous écoutez "],
    ["etage_7_alt", "Vous écoutez "],
    ["battle_theme_7_alt", "Vous écoutez "],
    ["boss_7_alt", "Vous écoutez "],
    ["etage_8", "Vous écoutez "],
    ["battle_theme_8", "Vous écoutez "],
    ["boss_8", "Vous écoutez "],
    ["boss_8_phase_2", "Vous écoutez "],
    ["observatorium", "Vous écoutez "],
    ["quiet", "Vous écoutez "],
    ["abyss", "Vous écoutez "],
    ["tales", "Vous écoutez "],
    ["etage_0", "Vous écoutez "],
    ["battle_theme_0", "Vous écoutez "],
    ["boss_0", "Vous écoutez "],
    ["etage_9", "Vous écoutez "],
    ["battle_theme_9", "Vous écoutez "],
    ["boss_9", "Vous écoutez "],
    ["etage_10", "Vous écoutez "],
    ["battle_theme_10", "Vous écoutez "],
    ["etage_10_alt", "Vous écoutez "],
    ["etage_11", "Vous écoutez "],
    ["battle_theme_11", "Vous écoutez "],
    ["boss_11", "Vous écoutez "],
    ["boss_11_phase_2", "Vous écoutez "],
    ["boss_11_phase_3", "Vous écoutez "],
]
DICTIONNAIREDEPERSONNAGEAAFFICHER = {}
DICTIONNAIREITEMINITIAL = {
    "Feuille Jindagee": 0,
    "Fruit Jindagee": 0,
    "Feuille Aatma": 0,
    "Fruit Aatma": 0,
    "Crystal Elémentaire": 0,
    "Ambroisie": 0,
    "Hydromel": 0,
    "Orbe de Furie": 0,
    "Orbe de Folie": 0,
    "Remède": 0,
    "Remède Superieur": 0,
    "Remède Divin": 0,
    "Pillule": 0,
    "Pillule Superieure": 0,
    "Pillule Divine": 0,
    "Fléchette Rouge": 0,
    "Flèche Rouge": 0,
    "Fléchette Bleue": 0,
    "Flèche Bleue": 0,
    "Poudre Explosive": 0,
    "Roche Explosive": 0,
    "Bombe Explosive": 0,
    "Fiole de Poison": 0,  # [debutTour]
    "Gourde de Poison": 0,  # [debutTour]
    "Sève d'Absolution": 0,  # [debutTour]
    "Larme d'Absolution": 0,  # [debutTour]
    "Soluté d'Absolution": 0,  # [debutTour]
    "Sève d'Exorcisme": 0,  # [debutTour]
    "Larme d'Exorcisme": 0,  # [debutTour]
    "Soluté d'Exorcisme": 0,  # [debutTour]
    "Mutagène Bleu": 0,  # [debutTour]
    "Grand Mutagène Bleu": 0,  # [debutTour]
    "Mutagène Rouge": 0,  # [debutTour]
    "Grand Mutagène Rouge": 0,  # [debutTour]
    "Mutagène Vert": 0,  # [debutTour]
    "Grand Mutagène Vert": 0,  # [debutTour]
    "Mutagène Doré": 0,  # [debutTour]
    "Grand Mutagène Doré": 0,  # [debutTour]
    "Mutagène Hérétique": 0,  # [debutTour]
    "Mutagène Fanatique": 0,  # [debutTour]
}
ANNUAIREDECHOIXPOURREDCOIN = {
    # branche du feu
    1257: ["Affinitée de Feu", 1, "None"],
    98654: ["Surchauffe", 2, "Affinitée de Feu"],
    42381: ["Aura de Feu", 3, "Surchauffe"],
    35867: ["Rafale", 4, "Aura de Feu"],
    685486: ["Pyrophile", 2, "Affinitée de Feu"],
    537895: ["Pyrosorcier", 3, "Pyrophile"],
    243537: ["Pyromage", 4, "Pyrosorcier"],
    # branche de foudre
    5675: ["Affinitée de Foudre", 1, "None"],
    977785: ["Anti-Neurotransmitteurs", 2, "Affinitée de Foudre"],
    935761: ["Energiseur", 3, "Anti-Neurotransmitteurs"],
    932624: ["Facture", 4, "Energiseur"],
    876431: ["Rapide", 2, "Affinitée de Foudre"],
    353548: ["Electro", 3, "Rapide"],
    768943: ["Luciole", 4, "Electro"],
    # branche de glace
    7563: ["Affinitée de Glace", 1, "None"],
    646752: ["Ere Glaciaire", 2, "Affinitée de Glace"],
    347852: ["Eclats de Glace", 3, "Ere Glaciaire"],
    376895: ["Grand Froid", 4, "Eclats de Glace"],
    248651: ["Choc Thermique", 2, "Affinitée de Glace"],
    179356: ["Coeur de Glace", 3, "Choc Thermique"],
    785020: ["Cycle Glaciaire", 4, "Coeur de Glace"],
    # branche de terre
    1221: ["Affinitée de Terre", 1, "None"],
    867342: ["Patience", 2, "Affinitée de Terre"],
    159753: ["Rigueur", 3, "Patience"],
    764325: ["Fracturation", 4, "Rigueur"],
    114865: ["Poussière de Diamants", 2, "Affinitée de Terre"],
    335785: ["Richesses Souterraines", 3, "Poussière de Diamants"],
    241053: ["Eboulis", 4, "Richesses Souterraines"],
    # branche physique
    8240: ["Affinitée Physique", 1, "None"],
    758427: ["Peau de Fer", 2, "Affinitée Physique"],
    963741: ["Bluff", 3, "Peau de Fer"],
    123789: ["Réflex", 4, "Bluff"],
    455668: ["Carte du Gout", 2, "Affinitée Physique"],
    2557711: ["Connaissance", 3, "Carte du Gout"],
    7661394: ["Oeuil Magique", 4, "Connaissance"],
    # branche de sang
    9731: ["Affinitée de Sang", 1, "None"],
    9485921: ["Nectar", 2, "Affinitée de Sang"],
    9050607: ["Anémie", 3, "Nectar"],
    2419687: ["Baron Rouge", 4, "Anémie"],
    33054865: ["Suroxygénation", 2, "Affinitée de Sang"],
    71546593: ["Conditions Limites", 3, "Suroxygénation"],
    93654517: ["Anticoagulants", 4, "Conditions Limites"],
    # branche ame
    7093815768: ["Pira", 5, "None"],
    7513590556: ["Elektron", 5, "None"],
    6598328725: ["Tsumeta-Sa", 5, "None"],
    124578953756: ["Mathair", 5, "None"],
    25583669867: ["Fos", 5, "None"],
    255814477582: ["Haddee", 5, "None"],
}

DEBUG_OPTIONS = {
    "Pourcentage Bonus de Dégâts pour toutes les Techniques": "debug_bonus_equilibrage_technique",
    "Pourcentage Bonus de Dégâts pour toutes les Techniques Critiques": "debug_bonus_equilibrage_technique_critique",
    "Pourcentage Bonus de Dégâts pour toutes les Techniques de Feu": "debug_bonus_equilibrage_technique_feu",
    "Pourcentage Bonus de Dégâts pour toutes les Techniques de Terre": "debug_bonus_equilibrage_technique_terre",
    "Pourcentage Bonus de Dégâts pour toutes les Techniques de Foudre": "debug_bonus_equilibrage_technique_foudre",
    "Pourcentage Bonus de Dégâts pour toutes les Techniques de Glace": "debug_bonus_equilibrage_technique_glace",
    "Pourcentage Bonus de Dégâts pour toutes les Techniques Physique": "debug_bonus_equilibrage_technique_physique",
    "Pourcentage Bonus de Dégâts pour toutes les Techniques de Sang": "debug_bonus_equilibrage_technique_sang",
    "Pourcentage Bonus de Dégâts pour tout les Sorts": "debug_bonus_equilibrage_sort",
    "Pourcentage Bonus de Dégâts pour tout les Sorts Critique": "debug_bonus_equilibrage_sort_critique",
    "Pourcentage Bonus de Dégâts pour tout les Sorts de Feu": "debug_bonus_equilibrage_sort_feu",
    "Pourcentage Bonus de Dégâts pour tout les Sorts de Terre": "debug_bonus_equilibrage_sort_terre",
    "Pourcentage Bonus de Dégâts pour tout les Sorts de Foudre": "debug_bonus_equilibrage_sort_foudre",
    "Pourcentage Bonus de Dégâts pour tout les Sorts de Glace": "debug_bonus_equilibrage_sort_glace",
    "Pourcentage Bonus de Dégâts pour tout les Sorts Physique": "debug_bonus_equilibrage_sort_physique",
    "Pourcentage Bonus de Dégâts pour tout les Sorts de Sang": "debug_bonus_equilibrage_sort_sang",
    "Pourcentage Bonus de Points de Vie Régénérés via Element Sang": "debug_bonus_sang_regain_sante"
}



class TraderUsage:

    def __init__(self):
        self.modificateur = 1
        if Player.stigma_negatif == "Mauvaise Réputation":
            self.modificateur = 1.5
        self.modificateur += (Player.numero_de_letage / 10) - 0.1
        self.modificateur_badge_terni = 1
        if "Badge Terni" in Player.liste_dartefacts_optionels and Player.nombre_dennemis_a_letage == 0:
            self.modificateur_badge_terni -= 0.3
        if "Médaillon de Platine" in Player.liste_dartefacts_optionels:
            self.modificateur_badge_terni -= 0.3
        self.annuaire_des_prix = {
            "Feuille Jindagee": round(round(15 * self.modificateur)) * self.modificateur_badge_terni,
            "Fruit Jindagee": round(round(40 * self.modificateur)) * self.modificateur_badge_terni,
            "Feuille Aatma": round(round(20 * self.modificateur)) * self.modificateur_badge_terni,
            "Fruit Aatma": round(round(50 * self.modificateur)) * self.modificateur_badge_terni,
            "Crystal Elémentaire": round(round(40 * self.modificateur)) * self.modificateur_badge_terni,
            "Ambroisie": round(round(40 * self.modificateur)) * self.modificateur_badge_terni,
            "Hydromel": round(round(40 * self.modificateur)) * self.modificateur_badge_terni,
            "Orbe de Furie": round(round(40 * self.modificateur)) * self.modificateur_badge_terni,
            "Orbe de Folie": round(round(40 * self.modificateur)) * self.modificateur_badge_terni,
            "Remède": round(round(20 * self.modificateur)) * self.modificateur_badge_terni,
            "Remède Superieur": round(round(50 * self.modificateur)) * self.modificateur_badge_terni,
            "Remède Divin": round(round(100 * self.modificateur)) * self.modificateur_badge_terni,
            "Pillule": round(round(30 * self.modificateur)) * self.modificateur_badge_terni,
            "Pillule Superieure": round(round(60 * self.modificateur)) * self.modificateur_badge_terni,
            "Pillule Divine": round(round(110 * self.modificateur)) * self.modificateur_badge_terni,
            "Fléchette Rouge": round(round(20 * self.modificateur)) * self.modificateur_badge_terni,
            "Flèche Rouge": round(round(55 * self.modificateur)) * self.modificateur_badge_terni,
            "Fléchette Bleue": round(round(20 * self.modificateur)) * self.modificateur_badge_terni,
            "Flèche Bleue": round(round(55 * self.modificateur)) * self.modificateur_badge_terni,
            "Poudre Explosive": round(round(30 * self.modificateur)) * self.modificateur_badge_terni,
            "Roche Explosive": round(round(50 * self.modificateur)) * self.modificateur_badge_terni,
            "Bombe Explosive": round(round(70 * self.modificateur)) * self.modificateur_badge_terni,
            "Fiole de Poison": round(round(50 * self.modificateur)) * self.modificateur_badge_terni,  # [debutTour]
            "Gourde de Poison": round(round(110 * self.modificateur)) * self.modificateur_badge_terni,  # [debutTour]
            "Sève d'Absolution": round(round(40 * self.modificateur)) * self.modificateur_badge_terni,  # [debutTour]
            "Larme d'Absolution": round(round(70 * self.modificateur)) * self.modificateur_badge_terni,  # [debutTour]
            "Soluté d'Absolution": round(round(100 * self.modificateur)) * self.modificateur_badge_terni,  # [debutTour]
            "Sève d'Exorcisme": round(round(20 * self.modificateur)) * self.modificateur_badge_terni,  # [debutTour]
            "Larme d'Exorcisme": round(round(45 * self.modificateur)) * self.modificateur_badge_terni,  # [debutTour]
            "Soluté d'Exorcisme": round(round(70 * self.modificateur)) * self.modificateur_badge_terni,  # [debutTour]
            "Mutagène Bleu": round(round(40 * self.modificateur)) * self.modificateur_badge_terni,  # [debutTour]
            "Grand Mutagène Bleu": round(round(80 * self.modificateur)) * self.modificateur_badge_terni,  # [debutTour]
            "Mutagène Rouge": round(round(40 * self.modificateur)) * self.modificateur_badge_terni,  # [debutTour]
            "Grand Mutagène Rouge": round(round(80 * self.modificateur)) * self.modificateur_badge_terni,  # [debutTour]
            "Mutagène Vert": round(round(40 * self.modificateur)) * self.modificateur_badge_terni,  # [debutTour]
            "Grand Mutagène Vert": round(round(80 * self.modificateur)) * self.modificateur_badge_terni,  # [debutTour]
            "Mutagène Doré": round(round(90 * self.modificateur)) * self.modificateur_badge_terni,  # [debutTour]
            "Grand Mutagène Doré": round(round(150 * self.modificateur)) * self.modificateur_badge_terni,  # [debutTour]
            "Mutagène Hérétique": round(round(100 * self.modificateur)) * self.modificateur_badge_terni,  # [debutTour]
            "Mutagène Fanatique": round(round(100 * self.modificateur)) * self.modificateur_badge_terni,  # [debutTour]
            "Red Coin": 0,
            "Tirage": 0,
            "Machette Rouillée": 150,
            "Vieille Pelle": 200,
            "Gemme de Vie": round(round(300 * self.modificateur)) * self.modificateur_badge_terni,
            "Gemme d'Esprit": round(round(300 * self.modificateur)) * self.modificateur_badge_terni,
            "Fée dans un Bocal": 0,
            "Méga Tirage": 777,
        }
        self.liste_item_etage_1 = [
            "Feuille Jindagee",
            "Feuille Aatma",
            "Crystal Elémentaire",
            "Pillule",
            "Poudre Explosive",
            "Tirage",
            "Red Coin",
            "Fée dans un Bocal",
        ]
        self.liste_item_etage_2 = [
            "Feuille Jindagee",
            "Feuille Aatma",
            "Crystal Elémentaire",
            "Remède",
            "Poudre Explosive",
            "Machette Rouillée",
            "Tirage",
            "Red Coin",
            "Fée dans un Bocal",
        ]
        self.liste_item_etage_3 = [
            "Feuille Jindagee",
            "Feuille Aatma",
            "Crystal Elémentaire",
            "Pillule",
            "Poudre Explosive",
            "Vieille Pelle",
            "Tirage",
            "Méga Tirage",
            "Red Coin",
            "Gemme de Vie",
        ]
        self.liste_item_etage_4 = [
            "Feuille Jindagee",
            "Feuille Aatma",
            "Crystal Elémentaire",
            "Pillule",
            "Poudre Explosive",
            "Tirage",
            "Méga Tirage",
            "Red Coin",
            "Gemme de Vie",
        ]
        self.liste_item_etage_5_6 = [
            "Feuille Jindagee",
            "Feuille Aatma",
            "Crystal Elémentaire",
            "Pillule",
            "Poudre Explosive",
            "Tirage",
            "Méga Tirage",
            "Red Coin",
            "Gemme d'Esprit",
            "Fée dans un Bocal",
        ]
        self.liste_item_etage_7_8 = [
            "Feuille Jindagee",
            "Feuille Aatma",
            "Crystal Elémentaire",
            "Pillule",
            "Poudre Explosive",
            "Tirage",
            "Méga Tirage",
            "Red Coin",
            "Gemme de Vie",
            "Gemme d'Esprit",
        ]
        self.liste_item_etage_9_10 = [
            "Feuille Jindagee",
            "Fruit Jindagee",
            "Feuille Aatma",
            "Fruit Aatma",
            "Crystal Elémentaire",
            "Ambroisie",
            "Hydromel",
            "Orbe de Furie",
            "Orbe de Folie",
            "Remède",
            "Remède Superieur",
            "Remède Divin",
            "Pillule",
            "Pillule Superieure",
            "Pillule Divine",
            "Fléchette Rouge",
            "Flèche Rouge",
            "Fléchette Bleue",
            "Flèche Bleue",
            "Poudre Explosive",
            "Roche Explosive",
            "Bombe Explosive",
            "Fiole de Poison",
            "Gourde de Poison",
            "Sève d'Absolution",
            "Larme d'Absolution",
            "Soluté d'Absolution",
            "Sève d'Exorcisme",
            "Larme d'Exorcisme",
            "Soluté d'Exorcisme",
            "Mutagène Bleu",
            "Grand Mutagène Bleu",
            "Mutagène Rouge",
            "Grand Mutagène Rouge",
            "Mutagène Vert",
            "Grand Mutagène Vert",
            "Mutagène Doré",
            "Grand Mutagène Doré",
            "Mutagène Hérétique",
            "Mutagène Fanatique",
            "Tirage",
            "Méga Tirage",
            "Red Coin",
            "Fée dans un Bocal",
        ]
        self.liste_dartefact_optionels = ["Machette Rouillée", "Vieille Pelle"]
        self.liste_item_actuelle = []

    def SetItemList(self):
        if Player.numero_de_letage == 1:
            self.liste_item_actuelle = self.liste_item_etage_1
        elif Player.numero_de_letage == 2:
            self.liste_item_actuelle = self.liste_item_etage_2
        elif Player.numero_de_letage == 3:
            self.liste_item_actuelle = self.liste_item_etage_3
        elif Player.numero_de_letage == 4:
            self.liste_item_actuelle = self.liste_item_etage_4
        elif Player.numero_de_letage in [5, 6]:
            self.liste_item_actuelle = self.liste_item_etage_5_6
        elif Player.numero_de_letage in [7, 8]:
            self.liste_item_actuelle = self.liste_item_etage_7_8
        else:
            self.liste_item_actuelle = self.liste_item_etage_9_10

    def ShowItems(self):
        print("1 - Retour")
        numero_a_afficher = 2
        for item in self.liste_item_actuelle:
            print(f"{numero_a_afficher} - {item} : {self.PriceOfItem(item)}")
            numero_a_afficher += 1

    def PriceOfItem(self, item):
        return self.annuaire_des_prix[item]

    def SetRedCoinPrice(self):
        if Player.redcoin_bought:
            self.annuaire_des_prix["Red Coin"] = 9999999
        else:
            self.annuaire_des_prix["Red Coin"] = round(round(Player.numero_de_letage * 100) * self.modificateur_badge_terni)
        self.annuaire_des_prix["Tirage"] = round(round(
            (Player.numero_de_letage * 50)
            + (Player.number_of_tirage * (Player.numero_de_letage * 15)) * self.modificateur_badge_terni)
        )
        self.annuaire_des_prix["Fée dans un Bocal"] = round(round(
            ((Player.numero_de_letage * 50) + 25) * self.modificateur) * self.modificateur_badge_terni
        )

    def UseMegaTirage(self):
        # double tirage des recompenses
        element_tirage = []
        for _ in range(0, 2):
            nombre_aleatoire = random.randint(1, 13)
            if nombre_aleatoire == 1:
                element_tirage.append("Feu")
            if nombre_aleatoire == 3:
                element_tirage.append("Foudre")
            if nombre_aleatoire == 5:
                element_tirage.append("Glace")
            if nombre_aleatoire == 7:
                element_tirage.append("Terre")
            if nombre_aleatoire == 9:
                element_tirage.append("Physique")
            if nombre_aleatoire == 11:
                element_tirage.append("Sang")
            else:
                element_tirage.append("Vide")
        # choix du joueur
        while True:
            try:
                if Player.affronte_un_boss:
                    print(
                        f"A l'endroit ou se tenait l'ennemi, il y a maintenant une petite boite en métal bleu ornée d'un grand *POW*.\nVous y plongez la main à l'interieur."
                    )
                else:
                    print(
                        f"Le marchand vous laisse plonger la main dans une boite en carton bleue ornée d'un grand *POW*."
                    )
                print(
                    "A l'interieur, vous pouvez toucher le contour de deux masses étranges, rugueuse."
                    f"\nEn les palpant, vous ressentez une connection avec l'élément [{element_tirage[0]}] et l'élement [{element_tirage[1]}]."
                    f"\n1 - Retirer le [{element_tirage[0]}]"
                    f"\n2 - Retirer le [{element_tirage[1]}]"
                )
                choix = int(input("Choisissez avec les nombres : "))
                ClearConsole()
                if choix in [1, 2]:
                    break
            except ValueError:
                ClearConsole()
        if element_tirage[choix - 1] == "Feu":
            type_du_tirage = "le sort"
            nom_du_tirage = "Explosion de Feu Sacré"
        elif element_tirage[choix - 1] == "Foudre":
            nom_du_tirage = "Combo Electrique"
            type_du_tirage = "la technique"
        elif element_tirage[choix - 1] == "Glace":
            nom_du_tirage = "Mirroir d'Eau"
            type_du_tirage = "le sort"
        elif element_tirage[choix - 1] == "Terre":
            nom_du_tirage = "Position du Massif"
            type_du_tirage = "la technique"
        elif element_tirage[choix - 1] == "Physique":
            nom_du_tirage = "Poussée d'Adrénaline"
            type_du_tirage = "la technique"
        elif element_tirage[choix - 1] == "Sang":
            nom_du_tirage = "Brume de Sang"
            type_du_tirage = "le sort"
        if (
            (element_tirage[choix - 1] != "Vide")
            and (nom_du_tirage not in Player.sorts_possedes)
            and (nom_du_tirage not in Player.techniques_possedes)
        ):
            commentaire = f"Vous obtenez {type_du_tirage} {nom_du_tirage} !"
            if type_du_tirage == "le sort":
                Player.sorts_possedes.append(nom_du_tirage)
                if "Syra" in Player.liste_dartefacts_optionels:
                    commentaire += ("Grace au verre de Syra que vous avez bu, vous gagnez aussi 10 pv max !")
                    Player.points_de_vie += 10
                    Player.points_de_vie_max += 10
                    Affichage.EntreePourContinuer()
            elif type_du_tirage == "la technique":
                Player.techniques_possedes.append(nom_du_tirage)
                if "Syra" in Player.liste_dartefacts_optionels:
                    commentaire += ("\nGrace au verre de Syra que vous avez bu, vous gagnez aussi 10 pm max !")
                    Player.points_de_mana += 10
                    Player.points_de_mana_max += 10
                    Affichage.EntreePourContinuer()
        else:
            commentaire = "Vous sortez la masse, et elle disparait dans les airs.\nMauvaise Pioche !"
        Affichage.AfficheMegaTirage(commentaire)

    def UseTirage(self):
        # sort ou technique ?
        nombre_aleatoire = random.randint(0, 100)
        if nombre_aleatoire <= 50:
            type_tirage = "le sort"
        else:
            type_tirage = "la technique"
        # element ?
        element_tirage = []
        for _ in range(0, 2):
            if type_tirage == "le sort":
                nombre_aleatoire = random.randint(1, 7)
            else:
                nombre_aleatoire = random.randint(1, 6)
            if nombre_aleatoire == 1:
                element_tirage.append("Feu")
            if nombre_aleatoire == 2:
                element_tirage.append("Foudre")
            if nombre_aleatoire == 3:
                element_tirage.append("Glace")
            if nombre_aleatoire == 4:
                element_tirage.append("Terre")
            if nombre_aleatoire == 5:
                element_tirage.append("Physique")
            if nombre_aleatoire == 6:
                element_tirage.append("Sang")
            if nombre_aleatoire == 7:
                element_tirage.append("Divin")
        # choix du joueur
        while True:
            try:
                if Player.affronte_un_boss:
                    print(
                        f"A l'endroit ou se tenait l'ennemi, il y a maintenant une petite boite en métal jaune ornée d'un grand *?*.\nVous y plongez la main à l'interieur."
                    )
                else:
                    print(
                        f"Le marchand vous laisse plonger la main dans une boite en carton jaune ornée d'un grand *?*."
                    )
                print(
                    "A l'interieur, vous pouvez toucher le contour de deux masses étranges, rugueuse."
                    f"\nEn les palpant, vous ressentez une connection avec l'élément [{element_tirage[0]}] et l'élement [{element_tirage[1]}]."
                    f"\n1 - Retirer le [{element_tirage[0]}]"
                    f"\n2 - Retirer le [{element_tirage[1]}]"
                )
                choix = int(input("Choisissez avec les nombres : "))
                ClearConsole()
                if choix in [1, 2]:
                    break
            except ValueError:
                ClearConsole()
        # construction de la récompense
        # nom commun
        if type_tirage == "le sort":
            if element_tirage[choix - 1] == "Feu":
                nom_du_tirage = "Thermosphère"
            elif element_tirage[choix - 1] == "Foudre":
                nom_du_tirage = "Faisceau"
            elif element_tirage[choix - 1] == "Glace":
                nom_du_tirage = "Pic"
            elif element_tirage[choix - 1] == "Terre":
                nom_du_tirage = "Création"
            elif element_tirage[choix - 1] == "Physique":
                nom_du_tirage = "Explosion"
            elif element_tirage[choix - 1] == "Sang":
                nom_du_tirage = "Dance"
            elif element_tirage[choix - 1] == "Divin":
                nom_du_tirage = "Sonata"
        elif type_tirage == "la technique":
            if element_tirage[choix - 1] == "Feu":
                nom_du_tirage = "Bô"
            elif element_tirage[choix - 1] == "Foudre":
                nom_du_tirage = "Lance"
            elif element_tirage[choix - 1] == "Glace":
                nom_du_tirage = "Katana"
            elif element_tirage[choix - 1] == "Terre":
                nom_du_tirage = "Corne"
            elif element_tirage[choix - 1] == "Physique":
                nom_du_tirage = "Poing"
            elif element_tirage[choix - 1] == "Sang":
                nom_du_tirage = "Dague"
        # bon ou mauvais tirage (seulement etage 7,8)
        nombre_aleatoire = random.randint(0, 100)
        if nombre_aleatoire <= 70:
            sort_attaque_forte_pour_etage_7_8 = False
        else:
            sort_attaque_forte_pour_etage_7_8 = True
        # Adjectif
        if Player.numero_de_letage in [1, 2]:
            if element_tirage[choix - 1] == "Feu":
                nom_du_tirage += " Chaud"
            elif element_tirage[choix - 1] == "Foudre":
                nom_du_tirage += " Rapide"
            elif element_tirage[choix - 1] == "Glace":
                nom_du_tirage += " Bleu"
            elif element_tirage[choix - 1] == "Terre":
                nom_du_tirage += " Argile"
            elif element_tirage[choix - 1] == "Physique":
                nom_du_tirage += " Léger"
            elif element_tirage[choix - 1] == "Sang":
                nom_du_tirage += " Volevie"
            elif element_tirage[choix - 1] == "Divin":
                nom_du_tirage += " Pitoyable"
        elif Player.numero_de_letage in [3, 4]:
            if element_tirage[choix - 1] == "Feu":
                nom_du_tirage += " Brulant"
            elif element_tirage[choix - 1] == "Foudre":
                nom_du_tirage += " Statique"
            elif element_tirage[choix - 1] == "Glace":
                nom_du_tirage += " Froid"
            elif element_tirage[choix - 1] == "Terre":
                nom_du_tirage += " Lapis"
            elif element_tirage[choix - 1] == "Physique":
                nom_du_tirage += " Renforcé"
            elif element_tirage[choix - 1] == "Sang":
                nom_du_tirage += " Siphoneuse"
            elif element_tirage[choix - 1] == "Divin":
                nom_du_tirage += " Miséricordieuse"
        elif Player.numero_de_letage in [5, 6]:
            if element_tirage[choix - 1] == "Feu":
                nom_du_tirage += " Enflammé"
            elif element_tirage[choix - 1] == "Foudre":
                nom_du_tirage += " Electrique"
            elif element_tirage[choix - 1] == "Glace":
                nom_du_tirage += " Givré"
            elif element_tirage[choix - 1] == "Terre":
                nom_du_tirage += " Granite"
            elif element_tirage[choix - 1] == "Physique":
                nom_du_tirage += " Lourd"
            elif element_tirage[choix - 1] == "Sang":
                nom_du_tirage += " Vampirique"
            elif element_tirage[choix - 1] == "Divin":
                nom_du_tirage += " Empathique"
        elif Player.numero_de_letage in [7, 8]:
            if element_tirage[choix - 1] == "Feu":
                if sort_attaque_forte_pour_etage_7_8:
                    nom_du_tirage += " de la Fournaise"
                else:
                    nom_du_tirage += " Magmatique"
            elif element_tirage[choix - 1] == "Foudre":
                if sort_attaque_forte_pour_etage_7_8:
                    nom_du_tirage += " de l'Eclair"
                else:
                    nom_du_tirage += " Foudroyante"
            elif element_tirage[choix - 1] == "Glace":
                if sort_attaque_forte_pour_etage_7_8:
                    nom_du_tirage += " GLacial"
                else:
                    nom_du_tirage += " Polaire"
            elif element_tirage[choix - 1] == "Terre":
                if sort_attaque_forte_pour_etage_7_8:
                    nom_du_tirage += " Obsidienne"
                else:
                    nom_du_tirage += " de la Montagne"
            elif element_tirage[choix - 1] == "Physique":
                if sort_attaque_forte_pour_etage_7_8:
                    nom_du_tirage += "Maitrisé"
                else:
                    nom_du_tirage += "Fatal"
            elif element_tirage[choix - 1] == "Sang":
                if sort_attaque_forte_pour_etage_7_8:
                    nom_du_tirage += " Parasite"
                else:
                    nom_du_tirage += " Destructrice"
            elif element_tirage[choix - 1] == "Divin":
                if sort_attaque_forte_pour_etage_7_8:
                    nom_du_tirage += " Sincère"
                else:
                    nom_du_tirage += " Bienveillante"
        elif Player.numero_de_letage in [9, 10]:
            if element_tirage[choix - 1] == "Feu":
                nom_du_tirage += " Solaire"
            elif element_tirage[choix - 1] == "Foudre":
                nom_du_tirage += "de la Mort Blanche"
            elif element_tirage[choix - 1] == "Glace":
                nom_du_tirage += " Zéro"
            elif element_tirage[choix - 1] == "Terre":
                nom_du_tirage += " Continentale"
            elif element_tirage[choix - 1] == "Physique":
                nom_du_tirage += " de la Comète"
            elif element_tirage[choix - 1] == "Sang":
                nom_du_tirage += " Créatrice"
            elif element_tirage[choix - 1] == "Divin":
                nom_du_tirage += " Absolutrice"
        # Accord au féminin, si besoin
        if nom_du_tirage == "Faisceau Foudroyante":
            nom_du_tirage = "Faisceau Foudroyant"
        elif nom_du_tirage == "Thermosphère Chaud":
            nom_du_tirage = "Thermosphère Chaude"
        elif nom_du_tirage == "Thermosphère Brulant":
            nom_du_tirage = "Thermosphère Brulante"
        elif nom_du_tirage == "Thermosphère Enflammé":
            nom_du_tirage = "Thermosphère Enflammée"
        elif nom_du_tirage == "Création Argile":
            nom_du_tirage = "Création d'Argile"
        elif nom_du_tirage == "Création Lapis":
            nom_du_tirage = "Création de Lapis"
        elif nom_du_tirage == "Création Granite":
            nom_du_tirage = "Création de Granite"
        elif nom_du_tirage == "Explosion Léger":
            nom_du_tirage = "Explosion Légère"
        elif nom_du_tirage == "Explosion Renforcé":
            nom_du_tirage = "Explosion Renforcée"
        elif nom_du_tirage == "Explosion Lourd":
            nom_du_tirage = "Explosion Lourde"
        elif nom_du_tirage == "Explosion Maitrisé":
            nom_du_tirage = "Explosion Maitrisée"
        elif nom_du_tirage == "Explosion Fatal":
            nom_du_tirage = "Explosion Fatale"
        # affichage de la récompense
        if (nom_du_tirage in Player.sorts_possedes) or (
            nom_du_tirage in Player.techniques_possedes
        ):
            print(
                "Vous retirez un bout de papier !"
                "\nIl y est écrit : Des fois on gagne, des fois on perd. L'important, c'est de participer !"
            )
            Affichage.EntreePourContinuer()
        else:
            print(f"Vous retirez {type_tirage} {nom_du_tirage} !")
            Affichage.EntreePourContinuer()
            # application de la recompense
            if type_tirage == "le sort":
                Player.sorts_possedes.append(nom_du_tirage)
                if "Syra" in Player.liste_dartefacts_optionels:
                    print("Grace au verre de Syra que vous avez bu, vous gagnez aussi 10 pv max !")
                    Player.points_de_vie += 10
                    Player.points_de_vie_max += 10
                    Affichage.EntreePourContinuer()
            else:
                Player.techniques_possedes.append(nom_du_tirage)
                if "Syra" in Player.liste_dartefacts_optionels:
                    print("Grace au verre de Syra que vous avez bu, vous gagnez aussi 10 pm max !")
                    Player.points_de_mana += 10
                    Player.points_de_mana_max += 10
                    Affichage.EntreePourContinuer()
            

    def DoTrading(self):
        # marchand
        Affichage.AfficheRentrerChezMarchand()
        self.MiseAJourDesPrix()
        Trader.SetItemList()
        self.argent_depense_cumul = 0
        while True:
            while True:
                try:
                    ClearConsole()
                    Trader.SetRedCoinPrice()
                    print("     -=[ Marchand ]=-")
                    print(f"   Vous avez {Player.nombre_de_gold} golds. ")
                    Trader.ShowItems()
                    choix = int(
                        input("\nChoisissez l'item a prendre avec les nombres : ")
                    )
                    ClearConsole()
                    if choix in range(1, (len(Trader.liste_item_actuelle) + 2)):
                        break
                except ValueError:
                    ClearConsole()
            if choix in range(2, (len(Trader.liste_item_actuelle) + 2)):
                nom_de_litem = Trader.liste_item_actuelle[choix - 2]
                if Player.nombre_de_gold >= Trader.PriceOfItem(nom_de_litem):
                    Player.nombre_de_gold -= Trader.PriceOfItem(nom_de_litem)
                    self.argent_depense_cumul += Trader.PriceOfItem(nom_de_litem)
                    print(f"Vous avez acheté [{nom_de_litem}] !")
                    Affichage.EntreePourContinuer()
                    if nom_de_litem == "Red Coin":
                        Player.redcoin_bought = True
                        Player.nombre_de_red_coin += 1
                    elif nom_de_litem == "Tirage":
                        Player.number_of_tirage += 1
                        Trader.UseTirage()
                    elif nom_de_litem == "Méga Tirage":
                        Trader.UseMegaTirage()
                    elif nom_de_litem == "Gemme de Vie":
                        if Player.gemme_de_vie:
                            print("Mais vous en aviez déjà une...\nTant pis.")
                            Affichage.EntreePourContinuer()
                        else:
                            Player.gemme_de_vie = True
                    elif nom_de_litem == "Gemme d'Esprit":
                        if Player.gemme_de_mana:
                            print("Mais vous en aviez déjà une...\nTant pis.")
                            Affichage.EntreePourContinuer()
                        else:
                            Player.gemme_de_mana = True
                    elif nom_de_litem == "Fée dans un Bocal":
                        if Player.possede_une_fee:
                            print(
                                "Alors que vous rangiez votre bocal dans votre sacoche,"
                                " vous voyez les deux fées unir leur pouvoir a travers"
                                " les bocaux pour briser leur cage de verre et s'enfuir."
                                "\nUne bonne lecon d'apprise : Jamais plus de deux fées sur soi !"
                            )
                            Affichage.EntreePourContinuer()
                            Player.possede_une_fee = False
                        else:
                            Player.possede_une_fee = True
                    elif nom_de_litem in Trader.liste_dartefact_optionels:
                        Player.liste_dartefacts_optionels.append(nom_de_litem)
                    else:
                        Player.items_possedes[nom_de_litem] += 1
                else:
                    Affichage.AffichePasAssezDargent()
            elif choix == 1:
                Affichage.AffichePartirMarchand(self.argent_depense_cumul)
                break
            ClearConsole()

    def MiseAJourDesPrix(self):
        self.__init__()

    def DoArtefactTrading(self):
        liste_des_artefacts_impossibles_a_acheter = [
            "Pièce Fondue",
            "Tiare de Suie",
            "Chaine de Main",
            "Larme d'Yggdrasil",
            "Collier de Nephilim",
            "Cape Victorieuse",
            "Schmilblick",
            "Contrat de Travail",
            "Dessin Nostalgique",
            "Vide Interieur",
            "Badge Terni",
            "Perle de Pluie",
            "Syra",
            "Pin's Extincteur",
            "Bandeau Teinté",
            "Ecaille de la Bête",
            "Hors Stock"
            ]
        while True:
            while True:
                dict_de_tout_les_artefacts = dict(LISTEEFFETSARTEFACT)
                liste_des_artefacts_possede = Sove.ModifieArtefactDansSove("Donne",None)
                liste_de_artefacts_possibles = []
                for key in dict_de_tout_les_artefacts:
                    if key not in liste_des_artefacts_possede and key not in liste_des_artefacts_impossibles_a_acheter:
                        liste_de_artefacts_possibles.append(key)
                liste_de_artefacts_a_proposer = Sove.ModifieArtefactProposeDansSove("Donne",None)
                try:
                    print("     -=Maitre Des Artefacts=-")
                    print("   -Tout coûte 4 Essences Dorée !-\n")
                    print(f"        [Dans Sacoche : {  Sove.ModifieDechetsDansSove('Nombre','Essence Dorée',None) }]\n\n")
                    numero = 1
                    for artefact in liste_de_artefacts_a_proposer:
                        print(f"{numero} - Acheter l'artefact [{artefact}]")
                        print(f"{dict_de_tout_les_artefacts[artefact]['Commentaire']}")
                        for caracteristique in dict_de_tout_les_artefacts[artefact]:
                            if caracteristique != "Commentaire":
                                print(f"       # {caracteristique} + {dict_de_tout_les_artefacts[artefact][caracteristique]} ")
                        print("\n")
                        numero += 1
                    print(f"{numero} - Liste d'artefacts déjà débloqués\n")
                    numero += 1
                    print(f"{numero} - Partir\n")
                    choix = int(input("Faites votre choix avec les nombres : "))
                    ClearConsole()
                    if choix in range(1, numero + 1):
                        break
                except ValueError:
                    ClearConsole()
            if choix == numero :
                break
            elif choix == (numero - 1) :
                while True:
                    try:
                        print("     -=Maitre Des Artefacts=-\n\n")
                        for artefact in liste_des_artefacts_possede:
                            print(f"[{artefact}]")
                            print(f"{dict_de_tout_les_artefacts[artefact]['Commentaire']}")
                            for caracteristique in dict_de_tout_les_artefacts[artefact]:
                                if caracteristique != "Commentaire":
                                    print(f"       # {caracteristique} + {dict_de_tout_les_artefacts[artefact][caracteristique]} ")
                            print("\n")
                        print("1 - Retour")
                        choix = int(input("Faites votre choix avec les nombres : "))
                        ClearConsole()
                        if choix == 1:
                            break
                    except ValueError:
                        ClearConsole()
            else:
                if not  Sove.ModifieDechetsDansSove("Limite", "Essence Dorée", 3):
                    print("Vous n'avez pas assez d'essence dorée !")
                    Affichage.EntreePourContinuer()

                else:
                    artefact_choisi = liste_de_artefacts_a_proposer[choix - 1]

                    if artefact_choisi == "Hors Stock":
                        print("Hey ! Ce n'est pas a vendre !")
                        Affichage.EntreePourContinuer()
                    else:
                        Sove.ModifieDechetsDansSove("Enleve", "Essence Dorée", 3)
                        Sove.ModifieArtefactDansSove("Ajout", artefact_choisi)
                        Sove.ModifieArtefactProposeDansSove("Enleve", artefact_choisi)

                        if len(liste_de_artefacts_possibles) == 0:
                            artefact_choisi_aleatoirement = "Hors Stock"
                        else:
                            artefact_choisi_aleatoirement = random.choice(liste_de_artefacts_possibles)
                        Sove.ModifieArtefactProposeDansSove("Ajout", artefact_choisi_aleatoirement)
                        print(f"Le Maitre vous donne un bon de commande, et promet de rendre l'artefact [{artefact_choisi}] au Coliseum !")
                        Affichage.EntreePourContinuer()




        

    def DoKeyTrading(self):
        if not  Sove.ModifieTagsDansSove("Checke", "Mage Hollistique") :
            while True:
                while True:
                    try:
                        print("La salle est vide, sauf pour un morceau de papier sur la table.\n\n")
                        print("1 - Lire le papier")
                        print("2 - Repartir")
                        choix = int(input("\nFaites votre choix avec les nombres : "))
                        ClearConsole()
                        if choix in [1, 2]:
                            break
                    except ValueError:
                        ClearConsole()
                if choix == 2 :
                    break
                elif choix == 1:
                    print("*Bonjour. Bonsoir ? Qu'importe. Ou peut etre que ca importe ? Bref.*")
                    Affichage.EntreePourContinuer()
                    print("*Mon nom est Lina, je suis mage hollistique, a la croisée des fils du destins, trimbalée de droite a gauche pour être toujours la bonne personne, au bon moment, au bon endroit.*")
                    Affichage.EntreePourContinuer()
                    print("*Toute les choses de l'univers sont connectées, même si ce qui relie cause a effet n'est pas évident a voir de premier abord. Mais je crois que..*")
                    Affichage.EntreePourContinuer()
                    print("*Je crois que l'univers n'a plus rien en stock pour moi.*")
                    Affichage.EntreePourContinuer()
                    print("*Tout ce que j'ai fait a toujours été la bonne chose a faire pour faire avancer mon histoire. Mais depuis que je suis arrivée la, plus rien ne bouge.*")
                    Affichage.EntreePourContinuer()
                    print("*Je ne veux plus de cette existance. Ou peut etre que ne plus vouloir de cette existance fait parti du plan de l'univers, et que ma perte est la bonne chose a faire, au bon moment, au bon endroit ? Je ne sais pas, et je ne peux pas savoir.*")
                    Affichage.EntreePourContinuer()
                    print("*Ca ne marche pas comme ca.*")
                    Affichage.EntreePourContinuer()
                    print("*A celui qui me cherche, a celui qui a besoin de moi, ne cherche pas plus loin, car je suis parti dans les Champs pour vivre comme un fantome, et espérer oublier les années qui passent.*")
                    Affichage.EntreePourContinuer()
                    print("*Ne sois pas triste : car je te laisse en cadeau ce symbole. Ce n'est pas un symbole particulier, j'ai juste dessiné n'importe quoi. Mais maintenant que tu l'a vu, tu fait partie de l'équation.*")
                    Affichage.EntreePourContinuer()
                    print("*Que tu le veuille ou non, tout ce que tu fera t'amènera vers la suite de ton aventure. Il suffit juste que tu te laisse aller, et que tu fasse ce que tu veuille.*")
                    Affichage.EntreePourContinuer()
                    print("*De toute facon, faire ce que tu veut est la bonne chose a faire. Et tu fera ca au bon moment, au bon endroit, pour la bonne personne.*")
                    Affichage.EntreePourContinuer()
                    print("*Je te laisse la suite.*")
                    Affichage.EntreePourContinuer()
                    print("*-Mes amitiés, Lina*")
                    Affichage.EntreePourContinuer()
                    if not  Sove.ModifieTagsDansSove("Checke", "Symbole Vu"):
                        print("Vous regardez le symbole .")
                        Affichage.EntreePourContinuer()
                        print("C'est un S en perspective.")
                        Affichage.EntreePourContinuer()
                        print("Vous vous mettez a penser aux dernieres lignes du message : il n'y a pas de guide précis sur ce que vous devez faire, car ce que vous allez faire est la bonne chose a faire ?")
                        Affichage.EntreePourContinuer()
                        print("Eh bien !\nQue c'est bizarre, une mage hollistique !")
                        Affichage.EntreePourContinuer()
                        Sove.ModifieTagsDansSove("Ajout", "Symbole Vu")
        if  Sove.ModifieTagsDansSove("Checke", "Mage Hollistique") and not  Sove.ModifieTagsDansSove("Checke", "Mage Hollistique Dans Tour"):
            Sove.ModifieTagsDansSove("Ajout", "Mage Hollistique Dans Tour")
            print("*Hey ! C'est toi !*")
            Affichage.EntreePourContinuer()
            print("Vous retrouvez un visage familier derriere le comptoir : c'est la Mage que vous avez amené au quatrieme étage !")
            Affichage.EntreePourContinuer()
            print("*Après que ce piano se soit écrasé sur moi, j'ai atteri ici. Et tu devinera jamais quoi ?*")
            Affichage.EntreePourContinuer()
            print("*Le batiment est a mon nom ! Incroyable non ?*")
            Affichage.EntreePourContinuer()
            print("*C'est comme si ma grande mission dans la vie , c'était d'arriver là.*")
            Affichage.EntreePourContinuer()
            print("*Comme si, toute cette aventure était une suite d'actions aléatoires cruciales qui, par le coup du sort, étaient pile poil ce que je devais faire.*")
            Affichage.EntreePourContinuer()
            print("*Au bon endroit, au bon moment, hein ?*")
            Affichage.EntreePourContinuer()
            print("*J'ai lu le papier. Je crois que je peux t'aider.*")
            Affichage.EntreePourContinuer()
            print("*Quand nous avons récupéré les clés dans le coliseum, tu sais ces petites boules noires ? J'ai eu l'impression de comprendre un truc:*")
            print("*Elles ont la même énergie que les âmes ici. Je pense que ces deux choses sont liées. Je pense que...*")
            Affichage.EntreePourContinuer()
            print("*Il n'y a plus de clé apres le troisième étage parce que les gens ici ont arrêté de croire que l'on pouvait aller plus loin que le troisième étage.*")
            Affichage.EntreePourContinuer()
            print("*Mais si ! Ca fait sens ! Regarde, tout le monde parle du Coliseum comme d'une batisse magique, avec leur cercle de la vie et tout le tsoin tsoin.*")
            Affichage.EntreePourContinuer()
            print("*Comme quoi tout était influencé par les désirs des gens.*")
            Affichage.EntreePourContinuer()
            print("*Et si les clés étaient une cumulation du désir des gens de sortir ? D'avancer ? De descendre encore plus profondément dans le labyrinthe ?* ")
            Affichage.EntreePourContinuer()
            print("*Rapelle toi : tout est lié de manière imperceptible ! Ce qui relie cause a effet n'est pas si évident !*")
            Affichage.EntreePourContinuer()
            print("*Bref. Si ma théorie est juste, alors contente toi d'apporter des matériaux correspondants aux différents étages, et je m'occuperais de raviver le lien entre étage et génération d'une clé pour en sortir.*")
            Affichage.EntreePourContinuer()
            print("*Ta compris ? Non ? T'inquiète pas, ca va être facile a comprendre dans quelques instants.*")
            Affichage.EntreePourContinuer()
        if  Sove.ModifieTagsDansSove("Checke", "Mage Hollistique Dans Tour"):
            while True:
                while True:
                    try:
                        liste_de_trades = [
                            "Clé"
                        ]
                        print(f"     -=Mage Hollistique=-")
                        print("Au bon endroit, au bon moment, toujours !\n\n")
                        numero = 1
                        for trade in liste_de_trades:
                            level_actuel_de_uppgrade =  Sove.ModifieLivraisonDansSove("Nombre", trade)
                            characteristique_de_luppgrade = ANNUAIREPRIXVILLAGE[trade]
                            if len(characteristique_de_luppgrade) == level_actuel_de_uppgrade:
                                prix_de_luppgrade = "Impossible"
                                print(f"{numero} - {trade} niv. MAX")
                            else:
                                prix_de_luppgrade = characteristique_de_luppgrade[level_actuel_de_uppgrade]
                                level_atteint = level_actuel_de_uppgrade + 1
                                if len(characteristique_de_luppgrade) == level_atteint:
                                    level_atteint = "MAX"
                                print(f"{numero} - {trade} niv. {level_actuel_de_uppgrade} ==) {trade} niv. {level_actuel_de_uppgrade + 1}")
                                print("    Materiaux nécéssaires:")
                                for materiau in prix_de_luppgrade:
                                    print(f"      - {prix_de_luppgrade[materiau]} {materiau}")
                            print("\n")

                            numero += 1
                        print(f"\n{numero} - Retour\n")
                        choix = int(input("Faites votre choix avec les nombres : "))
                        ClearConsole()

                        if choix in range(1, numero + 1):
                            break

                    except ValueError:
                        ClearConsole()
                
                if choix == numero:
                    break

                else:
                    # trouver le prix en materiau de luppgrade
                    objet_choisi = liste_de_trades[choix - 1]
                    level_actuel_de_uppgrade =  Sove.ModifieLivraisonDansSove("Nombre", objet_choisi)
                    if len(characteristique_de_luppgrade) == level_actuel_de_uppgrade:
                        print("Impossible d'augmenter le niveau de cet objet.")
                        Affichage.EntreePourContinuer()
                    else:
                        characteristique_de_luppgrade = ANNUAIREPRIXVILLAGE[objet_choisi]
                        prix_de_luppgrade = characteristique_de_luppgrade[level_actuel_de_uppgrade]

                        achat_possible = self.CheckIfEnoughMaterials(prix_de_luppgrade)

                        if not achat_possible:
                            print("Vous n'avez pas assez de materiaux !")
                            Affichage.EntreePourContinuer()

                        else:
                            self.BuyUppgrade(prix_de_luppgrade)

                            print(f"*Je prend ca, je fais ceci, et... Ta da ! Il devrait y avoir une clé a l'étage {level_actuel_de_uppgrade + 4} maintenant !*")
                            print("*Comment je le sais ? Bah, je le sais pas encore. Mais si tu m'a donné tout ca c'est forcément pour une raison ! Tiens, prend donc un bon de livraison au cas ou.*")
                            Affichage.EntreePourContinuer()

                            Sove.ModifieLivraisonDansSove("Ajout", objet_choisi)


    def DoBankTrading(self):
        while True:
            while True:
                try:
                    print("     -=Banque et Echanges=-\n\n")
                    print("1 - Echanger 2 materiaux contre 1 de même rang")
                    print("2 - Améliorer son équipement")
                    print("3 - Quitter la Banque\n")
                    choix = int(input("Faites votre choix avec les nombres : "))
                    ClearConsole()
                    if choix in range(1, 4):
                        break
                except ValueError: 
                    ClearConsole()

            if choix == 3:
                break

            elif choix == 2 and not "Carte VIP" in  Sove.ModifieTagsDansSove("Donne", None):
                print("Le Banquier vous regarde avec un air amusé, puis tape une pancarte affiché a coté de lui d'un doigt provocateur.")
                Affichage.EntreePourContinuer()
                print("*Le service OBJETS de la Banque n'est accordé qu'aux détenteurs de la Carte VIP*")
                Affichage.EntreePourContinuer()

            elif choix == 2:
                while True:
                    while True:
                        try:
                            liste_de_trades = [
                                "Médaillon de Leprechaun",
                                "Noyau d'Aurelionite",
                            ]
                            print(f"     -=Banque=-\n\n")
                            numero = 1
                            for trade in liste_de_trades:
                                level_actuel_de_uppgrade =  Sove.ModifieLivraisonDansSove("Nombre", trade)
                                characteristique_de_luppgrade = ANNUAIREPRIXVILLAGE[trade]
                                if len(characteristique_de_luppgrade) == level_actuel_de_uppgrade:
                                    prix_de_luppgrade = "Impossible"
                                    print(f"{numero} - {trade} niv. MAX")
                                else:
                                    prix_de_luppgrade = characteristique_de_luppgrade[level_actuel_de_uppgrade]
                                    level_atteint = level_actuel_de_uppgrade + 1
                                    if len(characteristique_de_luppgrade) == level_atteint:
                                        level_atteint = "MAX"
                                    print(f"{numero} - {trade} niv. {level_actuel_de_uppgrade} ==) {trade} niv. {level_actuel_de_uppgrade + 1}")
                                    print("    Materiaux nécéssaires:")
                                    for materiau in prix_de_luppgrade:
                                        print(f"      - {prix_de_luppgrade[materiau]} {materiau}")
                                print("\n")

                                numero += 1
                            
                            print(f"{numero} - Poser des questions sur les objets proposés\n")
                            numero += 1
                            print(f"{numero} - Retour\n")
                            choix = int(input("Faites votre choix avec les nombres : "))
                            ClearConsole()

                            if choix in range(1, numero + 1):
                                break

                        except ValueError:
                            ClearConsole()
                    
                    if choix == numero:
                        break

                    elif choix == (numero - 1):
                        print("*Bien Sur, estimée clientelle !*")
                        Affichage.EntreePourContinuer()
                        print("*Ces objets sont de véritables artefacts, si l'on peut qualifier d'artefact ce que nous créons !*")
                        Affichage.EntreePourContinuer()
                        print("*Saviez vous par exemple que le Noyau d'Aurelionite n'en est pas un ? En effet, les aurelionites, ces golems dorés, n'ont pas de coeur ou de noyau a proprement parler !*")
                        Affichage.EntreePourContinuer()
                        print("*Ce nom leur a été donné parce que son inventeur, avant de partir dans les champs, s'est inspiré de cette propriété que les aurelionites a se mouvoir dans l'or pour creer un petit bijou qui...*")
                        Affichage.EntreePourContinuer()
                        print("Le vendeur vous regarde alors que vous êtes en plein baillement.")
                        Affichage.EntreePourContinuer()
                        print("*...*")
                        Affichage.EntreePourContinuer()
                        print("*...*")
                        Affichage.EntreePourContinuer()
                        print("*...*")
                        Affichage.EntreePourContinuer()
                        print("*..eurk. Ca manque de manière ici.*")
                        Affichage.EntreePourContinuer()
                        print("Vous lancez un regard percant au vendeur.")
                        Affichage.EntreePourContinuer()
                        print("*Le Médaillon augmente les chances qu'un monstre lache des materiaux de 5% par niveau.*")
                        print("*Le Noyau augmente les gains de golds de 10% par niveau.*")
                        Affichage.EntreePourContinuer()
                        print("Le vendeur se rassoie et vous regarde de manière hautaine, un mélange apparent de dégout et d'arrogance plaqué sur son visage.")
                        Affichage.EntreePourContinuer() 

                    else:
                        # trouver le prix en materiau de luppgrade
                        objet_choisi = liste_de_trades[choix - 1]
                        level_actuel_de_uppgrade =  Sove.ModifieLivraisonDansSove("Nombre", objet_choisi)
                        characteristique_de_luppgrade = ANNUAIREPRIXVILLAGE[objet_choisi]
                        if len(characteristique_de_luppgrade) == level_actuel_de_uppgrade:
                            print("Impossible d'augmenter le niveau de cet objet.")
                            Affichage.EntreePourContinuer()
                        else:
                            prix_de_luppgrade = characteristique_de_luppgrade[level_actuel_de_uppgrade]

                            achat_possible = self.CheckIfEnoughMaterials(prix_de_luppgrade)

                            if not achat_possible:
                                print("Vous n'avez pas assez de materiaux !")
                                Affichage.EntreePourContinuer()

                            else:
                                self.BuyUppgrade(prix_de_luppgrade)

                                print(f"Le marchand prend vos materiaux et vous donne un bon de commande sur lequel est écrit : [{objet_choisi} de niveau {level_actuel_de_uppgrade + 1}].")
                                print("Il vous assure que le prochain aventurier pourra retrouver tout les objets que vous avez commandé dans une des salles de l'étage 1, et vous remercie de votre achat !")
                                Affichage.EntreePourContinuer()

                                Sove.ModifieLivraisonDansSove("Ajout", objet_choisi)

            elif choix == 1:
                while True:
                    while True:
                        try:
                            liste_dechet_echangeables = []
                            print("     -=Echange deux [objet]=-\n\n")
                            numero = 1
                            for dechet in Player.liste_de_materiaux:
                                nombre =  Sove.ModifieDechetsDansSove("Nombre", dechet, None)
                                if nombre >= 2 :
                                    liste_dechet_echangeables.append(dechet)
                                    print(f"{numero} - {dechet} ({nombre} dans la sacoche)")
                                    numero += 1
                            print(f"{numero} - Retour\n")
                            choix = int(input("Faites votre choix avec les nombres : "))
                            ClearConsole()
                            if choix in range(1, numero + 1):
                                break
                        except ValueError:
                            ClearConsole()
                    if choix == numero:
                        break
                    else:
                        dechet_choisi = liste_dechet_echangeables[choix - 1]
                        liste_dobjets_proposes_a_lechange = []
                        if dechet_choisi in MATERIAUXRANG1:
                            liste_dobjets_proposes_a_lechange = MATERIAUXRANG1
                        elif dechet_choisi in MATERIAUXRANG2:
                            liste_dobjets_proposes_a_lechange = MATERIAUXRANG2
                        elif dechet_choisi in MATERIAUXRANG3:
                            liste_dobjets_proposes_a_lechange = MATERIAUXRANG3
                        elif dechet_choisi in MATERIAUXRANG4:
                            liste_dobjets_proposes_a_lechange = MATERIAUXRANG4
                        elif dechet_choisi in MATERIAUXRANG5:
                            liste_dobjets_proposes_a_lechange = MATERIAUXRANG5
                        elif dechet_choisi in MATERIAUXRANG6:
                            liste_dobjets_proposes_a_lechange = MATERIAUXRANG6
                        if dechet_choisi in MATERIAUXRANG7: #impossible
                            print("Le Banquier vous regarde avec un air pincé, puis hoche la tête de gauche a droite.")
                            Affichage.EntreePourContinuer()
                        else:
                            while True:
                                while True:
                                    try:
                                        print(f"     -=Echange deux [{dechet_choisi}] contre un [objet]=-\n\n")
                                        numero = 1
                                        for objet in liste_dobjets_proposes_a_lechange:
                                            print(f"{numero} - {objet}")
                                            numero += 1
                                        print(f"{numero} - Retour\n")
                                        choix = int(input("Faites votre choix avec les nombres : "))
                                        ClearConsole()
                                        if choix in range(1, numero + 1):
                                            break
                                    except ValueError:
                                        ClearConsole()
                                    
                                if choix == numero:
                                    break
                                else:
                                    dechet_qui_va_etre_echange = liste_dobjets_proposes_a_lechange[choix - 1]

                                    while True:
                                        try:
                                            print(f"     -=Echange deux [{dechet_choisi}] contre un [{dechet_qui_va_etre_echange}]=-\n\n")
                                            print(f"Voulez vous échanger 2 [{dechet_choisi}] contre 1 [{dechet_qui_va_etre_echange}] ?\n")
                                            print("1 - Oui")
                                            print("2 - Non\n")
                                            choix = int(input("Faites votre choix avec les nombres : "))
                                            ClearConsole()
                                            if choix in [1, 2]:
                                                break
                                        except ValueError:
                                            ClearConsole()
                                        
                                    if choix == 2:
                                        pass

                                    else:
                                        Sove.ModifieDechetsDansSove("Enleve", dechet_choisi, 2)
                                        Sove.ModifieDechetsDansSove("Ajout", dechet_qui_va_etre_echange, 1)
                                        print("C'est fait !")
                                        Affichage.EntreePourContinuer()


                                if not  Sove.ModifieDechetsDansSove("Limite", dechet_choisi, 2):
                                    break


                            






    def DoVillageTrading(self, trader):
        liste_de_uppgrade_armurier = [
            "Chapeau",
            "Boucles d'Oreille",
            "Collier",
            "Cotte de Maille",
            "Bracelet",
            "Gants",
            "Anneau",
            "Bottes"
        ]
        liste_de_uppgrade_sorciere = [
            "Fiole de Sève",
            "Fiole de Rosée",
            "Tisane d'Ecorce",
            "Tisane de Racine",
            "Charge de Feu",
            "Charge de Glace",
            "Charge de Foudre",
            "Charge de Terre",
            "Charge de Chair",
            "Charge de Sang",
        ]
        liste_de_uppgrade_herboriste = [
            "Ration Jindagee",
            "Ration Jindagee Raffinée",
            "Ration Aatma",
            "Ration Aatma Rafinée",
            "Ration Cristalline",
            "Ration d'Hydromel",
            "Ration Ambroisie",
            "Ration Explosive",
            "Ration Explosive Raffinée",
            "Pack de Fléchettes",
            "Pack de Flèches",
            "Pack Premier Tour",
        ]
        if trader =="ARMURIER":
            liste_de_trades = liste_de_uppgrade_armurier
        if trader =="SORCIERE":
            liste_de_trades = liste_de_uppgrade_sorciere
        if trader =="HERBORISTE":
            liste_de_trades = liste_de_uppgrade_herboriste
        while True:
            while True:
                try:
                    print(f"     -={trader}=-\n\n")
                    print("1 - Partir")
                    print("2 - Poser des questions sur l'équipement")
                    print("3 - Améliorer son équipement\n")
                    choix = int(input("Faites votre choix avec les nombres : "))
                    ClearConsole()
                    if choix in range (1, 4):
                        break
                except ValueError:
                        ClearConsole()
            
            if choix == 1 :
                break

            elif choix == 2:
                if trader =="ARMURIER":
                    print("*Hum ? C'que ça fait ?*")
                    Affichage.EntreePourContinuer()
                    print("L'Armurier réfléchit quelques temps, et releve la tête.")
                    Affichage.EntreePourContinuer()
                    print("*Bah, ca protege, nan ?*")
                    Affichage.EntreePourContinuer()
                    print("Vous lancez un regard blazé à l'Armurier, avant de voir une petite femme sortir de sous le comptoir.")
                    Affichage.EntreePourContinuer()
                    print("*Bonjour, estimé voyageur ! Vous vous demandez ce que font nos articles, et j'ai la réponse !*")
                    Affichage.EntreePourContinuer()
                    print("*Il ne faut surtout pas demander a ce gros tas de muscle, tout ce qu'il sait faire, c'est taper sur l'enclume et taper sur les nerfs !*")
                    Affichage.EntreePourContinuer()
                    print("Sur ces mots, la marchande donne un gros coup de pied sur le genou de l'Armurier.\nCe qui n'a pas l'air de lui faire grand effet.")
                    Affichage.EntreePourContinuer()
                    print("*Je disais donc, voici en gros les effets que nos articles auront sur le prochain aventurier que vous allez sponsoriser :*")
                    Affichage.EntreePourContinuer()
                    print("  - Le Chapeau")
                    print("*Tissé avec la plus grande délicatesse, il augmente l'intelligence de 3 points par niveaux.*")
                    Affichage.EntreePourContinuer()
                    print("  - Les Boucles d'Oreilles")
                    print("*Il y a un très subtil patterne dans les mailles du bijou qui orne ces boucles, et ce patterne augmente le taux de sort critique de 2% par niveaux.*")
                    Affichage.EntreePourContinuer()
                    print("  - Le Collier")
                    print("*Un chef d'oeuvre ! Des techniques aiguisées pendant des siècles qui augmentent le taux de techniques critiques de 2% par niveaux !*")
                    Affichage.EntreePourContinuer()
                    print("  - La Cotte de Maille")
                    print("*J'ai étudié moi même une cotte de maille enchantée venant des Tout-Premiers, et cette réplique donne 3 points de défence supplémentaires par niveaux.*")
                    Affichage.EntreePourContinuer()
                    print("  - Le Bracelet")
                    print("*Un objet d'or fin qui mobilise le mana et le transforme en force, 3 points supplémentaires par niveaux.*")
                    Affichage.EntreePourContinuer()
                    print("  - Les Gants")
                    print("*Ils sont renforcés au niveau des phalanges avec un alliage de cette roche qui compose les golem.*\n*Ca met plus de poid lors des attaques, et augmente les dégats critiques des techniques de 3 points par niveaux !*")
                    Affichage.EntreePourContinuer()
                    print("  - L'Anneau")
                    print("*C'est le même principe que le bracelet, mais son action est concentrée au niveau des veines de mana, afin de rajouter 3 points de dégât par niveau lors des sorts critiques.*")
                    Affichage.EntreePourContinuer()
                    print("  - Les Bottes")
                    print("*Rembourrées, renforcées, le produit phare de notre boutique !*\n*Elles augmentent le taux d'esquive de 1% par niveau.*")
                    Affichage.EntreePourContinuer()
                    print("*Quoi ?*\n*C'est pas beaucoup ?*\n*Et pourtant ca veut dire qu'au niveau maximum, ca annule 15% des attaques et sorts qui viennent sur vous !*")
                    Affichage.EntreePourContinuer()
                    print("*Et c'est sans compter la précision de ces actions ou les pourcentages d'esquive que les aventuriers peuvent accumuler dans le Coliseum...*")
                    Affichage.EntreePourContinuer()
                    print("*Alors, vous en pensez quoi ?*\n*Ca vaut le coup hein ?*")
                    Affichage.EntreePourContinuer()
                    print("*Pour tout ce qui est paiement, je vous laisse voir avec mon frère.*\n*Moi je retourne a mes prototypes !*")
                    Affichage.EntreePourContinuer()
                    print("Vous faites un signe de main a la marchande qui retourne alors sous le comptoir, et l'armurier se remet a frapper l'enclume.")
                    Affichage.EntreePourContinuer()
                if trader =="SORCIERE":
                    print("*Mes produits ?*")
                    Affichage.EntreePourContinuer()
                    print("*Eh bien..ils sont...bon ?*")
                    Affichage.EntreePourContinuer()
                    print("Vous lancez un regard intrigué a la sorcière")
                    Affichage.EntreePourContinuer()
                    print("*...bon écoutez, je vais vous décrire chacune de mes potions.*")
                    Affichage.EntreePourContinuer()
                    print("La Sorcière sort un gros livre poussiéreux, et l'ouvre a une page gribouillée.")
                    print("Vous pouvez lire sur la couverture : [100 RECETTES DE POTIONS ET SOLUTES ALCHIMIQUES QUI PEUVENT TOMBER A L'EPREUVE DU SABBAT, EDITION 1053 APRES JC]")
                    Affichage.EntreePourContinuer()
                    print("*Alors..euh..ah oui !*\n*La Fiole de Sève.*")
                    print("*C'est pas vraiment de la sève, mais c'est comme ca qu'on l'appelle, et ca augmente les points de mana maximum de 4 par niveau !*\n*Enfin, seulement si on la boit.*")
                    Affichage.EntreePourContinuer()
                    print("*Ensuite, la Fiole de Rosée.*")
                    print("*Ca je sais, je sais, c'est...comme la fiole de sève..mais...ca augmente la force !*\n*Ah non, les points de vie maximum.*\n*4 points par niveaux.*")
                    Affichage.EntreePourContinuer()
                    print("*Ensuite, les tisanes.*\n*Ca je connait par coeur !*\n*Genre, la Tisane d'Ecorce.*")
                    print("*Eh bah, quand on la boit, ca change le corps.*\n*Et genre, quand il regagne des points de mana, en mangeant des fruits aatma ou avec un talent, il reprend plus de points de mana !*\n*2 points par niveaux.*")
                    Affichage.EntreePourContinuer()
                    print("*Par exemple, si je prend une pillule et que je dois récuperer 20 points de mana, eh bah si j'ai bu une tisane d'écorce de niveau 3 avant, bah je reprend 26 points de mana a la place de 20.*")
                    Affichage.EntreePourContinuer()
                    print("*Et ya l'autre tisane aussi, la tisane de...de... de Racine !*")
                    Affichage.EntreePourContinuer()
                    print("*Même chose, mais ca redonne 2 points de vie supplémentaires par niveau, pour toute les sources !*")
                    Affichage.EntreePourContinuer()
                    print("*Ensuite...ya...attend quoi ?*")
                    Affichage.EntreePourContinuer()
                    print("La sorcière ré-ouvre son livre et regarde une page.")
                    Affichage.EntreePourContinuer()
                    print("*Aie, je me suis trompée !*\n*C'est la tisane d'Ecorce qui améliore le regain de vie, et la tisane de Racine qui améliore le regain de mana !*")
                    print("*Je me trompe toujours entre ces deux là !*")
                    Affichage.EntreePourContinuer()
                    print("*Enfin bref.*")
                    Affichage.EntreePourContinuer()
                    print("*Après on a la potion de transmutation qui...attend non celle la je la fait pas.*")
                    Affichage.EntreePourContinuer()
                    print("*Celle la non plus..*")
                    Affichage.EntreePourContinuer()
                    print("*Celle la non plus...je crois...*")
                    Affichage.EntreePourContinuer()
                    print("Vous arrêtez la sorcière et lui montrez les orbes de poussière de différentes couleur sur son comptoir.")
                    Affichage.EntreePourContinuer()
                    print("*Ah oui !*\n*Les charges élémentaires !*")
                    Affichage.EntreePourContinuer()
                    print("*En gros, ca augmente les dégâts des sorts et attaques de l'élément associé a la charge, et ce de 5% par niveau.*")
                    print("*Genre avec une charge de sang de niveau 5, on fait 25% de dégats en plus quand on utilise une technique ou un sort de sang.*")
                    Affichage.EntreePourContinuer()
                    print("*Et...c'est tout.*")
                    Affichage.EntreePourContinuer()
                    print("La Sorcière range son livre de révision sous son comptoir.")
                    Affichage.EntreePourContinuer()
                    print("*Demandez moi si vous avez besoin de quoi que ce soit d'autre !*")
                    Affichage.EntreePourContinuer()
                if trader =="HERBORISTE":
                    print("*...*")
                    Affichage.EntreePourContinuer()
                    print("Un Homme a l'allure mystérieuse, dont le visage est caché par un foulard, vous regarde attentivement.")
                    Affichage.EntreePourContinuer()
                    print("Vous avez l'impression que votre question est tombée dans l'oreille d'un sourd...")
                    Affichage.EntreePourContinuer()
                    print("...mais vous vous rendez compte qu'elle est tombée dans l'oreille d'un muet, lorsque l'Herboriste vous parle en ASL.")
                    Affichage.EntreePourContinuer()
                    print("Vous essayez de décrypter les signes effectués par le vendeur, lorsque celui ci s'arrête et soupire.")
                    Affichage.EntreePourContinuer()
                    print("Il vous prend alors la tête avec ses deux bras étonnamment musclés, et la tourne lentement vers une pancarte a votre droite...")
                    print("...sur laquelle est écrit en grosses lettres la description de chaque services qu'il propose.")
                    Affichage.EntreePourContinuer()
                    print("Ration Jindagee : 2 Feuilles Jindagee par niveaux seront données a votre aventurier.")
                    print("Ration Jindagee Raffinée : 1 Fruit Jindagee par niveaux seront données a votre aventurier.")
                    Affichage.EntreePourContinuer()
                    print("Ration Aatma : 2 Feuilles Aatma par niveaux seront données a votre aventurier.")
                    print("Ration Aatma Raffinée : 1 Fruit Aatma par niveaux seront données a votre aventurier.")
                    Affichage.EntreePourContinuer()
                    print("Ration Cristalline : 2 Crystaux Elementaires par niveaux seront données a votre aventurier.")
                    Affichage.EntreePourContinuer()
                    print("Ration d'Hydromel : 2 fioles d'Hydromel par niveaux seront données a votre aventurier.")
                    print("Ration d'Ambroisie : 2 fioles d'Ambroisie par niveaux seront données a votre aventurier.")
                    Affichage.EntreePourContinuer()
                    print("Ration Explosive : 2 unitées de Poudre Explosive par niveaux seront données a votre aventurier.")
                    print("Ration Explosive Raffinée : 1 Roche Explosive par niveaux seront données a votre aventurier.")
                    Affichage.EntreePourContinuer()
                    print("Ration de Fléchettes : 2 fléchettes bleues et 2 fléchettes rouges par niveaux seront données a votre aventurier.")
                    print("Ration de Flèches : 1 flèches bleues et 1 flèches rouges par niveaux seront données a votre aventurier.")
                    Affichage.EntreePourContinuer()
                    print("Pack Premier Tour : un booster pack de produits a utiliser au premier tour sera donné a votre aventurier.")
                    print("Il comprend 1 fiole de poison, 1 sève d'exorcisme, 1 sève d'absolution, 1 Mutagène Rouge, 1 Mutagène Bleu et 1 Mutagène Vert par niveau.")
                    Affichage.EntreePourContinuer()
                    print("L'herboriste vous lache la tête et retroune a ses occupations, alors que vous regardez le sol quelques instants pour cacher votre embarras.")
                    Affichage.EntreePourContinuer()
            else:
                while True:
                    while True:
                        try:
                            print(f"     -={trader}=-\n\n")
                            numero = 1
                            for trade in liste_de_trades:
                                level_actuel_de_uppgrade =  Sove.ModifieLivraisonDansSove("Nombre", trade)
                                characteristique_de_luppgrade = ANNUAIREPRIXVILLAGE[trade]
                                if len(characteristique_de_luppgrade) == level_actuel_de_uppgrade:
                                    prix_de_luppgrade = "Impossible"
                                    print(f"{numero} - {trade} niv. MAX")
                                else:
                                    prix_de_luppgrade = characteristique_de_luppgrade[level_actuel_de_uppgrade]
                                    level_atteint = level_actuel_de_uppgrade + 1
                                    if len(characteristique_de_luppgrade) == level_atteint:
                                        level_atteint = "MAX"
                                    print(f"{numero} - {trade} niv. {level_actuel_de_uppgrade} ==) {trade} niv. {level_actuel_de_uppgrade + 1}")
                                    print("    Materiaux nécéssaires:")
                                    for materiau in prix_de_luppgrade:
                                        print(f"      - {prix_de_luppgrade[materiau]} {materiau}")
                                print("\n")

                                numero += 1
                            print(f"{numero} - Revenir au Menu Principal")
                            choix = int(input("\nFaites votre choix avec les nombres : "))
                            ClearConsole()

                            if choix in range(1, numero + 1):
                                break

                        except ValueError:
                            ClearConsole()
                    
                    if choix == numero:
                        break

                    else:
                        # trouver le prix en materiau de luppgrade
                        objet_choisi = liste_de_trades[choix - 1]
                        level_actuel_de_uppgrade =  Sove.ModifieLivraisonDansSove("Nombre", objet_choisi)
                        characteristique_de_luppgrade = ANNUAIREPRIXVILLAGE[objet_choisi]
                        if len(characteristique_de_luppgrade) == level_actuel_de_uppgrade:
                            print("Impossible d'augmenter le niveau de cet objet.")
                            Affichage.EntreePourContinuer()
                        else:
                            prix_de_luppgrade = characteristique_de_luppgrade[level_actuel_de_uppgrade]

                            achat_possible = self.CheckIfEnoughMaterials(prix_de_luppgrade)

                            if not achat_possible:
                                print("Vous n'avez pas assez de materiaux !")
                                Affichage.EntreePourContinuer()

                            else:
                                self.BuyUppgrade(prix_de_luppgrade)

                                print(f"Le marchand prend vos materiaux et vous donne un bon de commande sur lequel est écrit : [{objet_choisi} de niveau {level_actuel_de_uppgrade + 1}].")
                                print("Il vous assure que le prochain aventurier pourra retrouver tout les objets que vous avez commandé dans une des salles de l'étage 1, et vous remercie de votre achat !")
                                Affichage.EntreePourContinuer()

                                Sove.ModifieLivraisonDansSove("Ajout", objet_choisi)


    def CheckIfEnoughMaterials(self, prix_en_dictionnaire):
        for materiau in prix_en_dictionnaire:
            prix_en_materiau = prix_en_dictionnaire[materiau]
            
            possible =  Sove.ModifieDechetsDansSove("Limite", materiau, prix_en_materiau)

            if possible == False:
                return False
        
        return True
    
    def BuyUppgrade(self, prix_en_dictionnaire):
        for materiau in prix_en_dictionnaire:
            prix_en_materiau = prix_en_dictionnaire[materiau]
            if materiau != "Emblème de la Fin":
                 Sove.ModifieDechetsDansSove("Enleve", materiau, prix_en_materiau)

    def DoMapTrader(self):
        while True:
            while True:
                try:
                    print("     -=Chuchoteur=-\n\n")
                    print("1 - Hum... Bonjour ?")
                    print("2 - Qui êtes vous ?")
                    print("3 - Qu'est ce que vous avez écrit par terre ?")
                    print("4 - Améliorer votre carte")
                    print("5 - Repartir\n")
                    choix = int(input("Faites votre choix avec les nombres : "))
                    ClearConsole()
                    if choix in range(1, 6):
                        break
                except ValueError: 
                    ClearConsole()

            if choix == 1:
                print("L'Homme s'arrête d'écrire, marmonne quelque chose dans sa barbe, et se relève.")
                Affichage.EntreePourContinuer()
                print("Il vous regarde droit dans les yeux.")
                Affichage.EntreePourContinuer()
                print("Comme si il voyait quelque chose de terrible.")
                Affichage.EntreePourContinuer()
                print("Comme si il voyait... la chose derrière le masque.")
                Affichage.EntreePourContinuer()
                StopAllMusic()
                time.sleep(5)
                FloorMaker.StopAllVillageChannels()
                FloorMaker.InitialisationOfTownVariations()
                PlayMusicDeLetage()
                print("*Bonjour !*")
                Affichage.EntreePourContinuer()
                print("L'homme se rassoit, et continue de dessiner des symboles au sol.")
                Affichage.EntreePourContinuer()

            elif choix == 2:
                print("L'homme continue s'arrête d'écrire sur le sol, puis pointe du doigt un mot écrit en grandes lettres sur un pavé a proximité :")
                Affichage.EntreePourContinuer()
                print("*Le Chuchoteur, Mathématicien Probabiliste*")
                Affichage.EntreePourContinuer()
                print("Le Chuchoteur remarque votre regard interrogateur et soupire.")
                Affichage.EntreePourContinuer()
                print("*Je suis un mathématicien probabiliste. C'est a dire que je me base sur les faits, que j'essaye de trouver une tendance parmis ces faits, et que j'en tire des conclusions.*")
                Affichage.EntreePourContinuer()
                print("Le Chuchoteur vous regarde intensément, puis soupire de manière (très) audible.")
                Affichage.EntreePourContinuer()
                print("*Des choses étrangent se passent dans le Coliseum. Je dirait même plus : aléatoires. Moi j'essaye de comprendre comment ca marche afin de trouver la dispositions des étages ou l'ordre des monstres qui apparaissent.*")
                Affichage.EntreePourContinuer()
                print("*Tu as du remarquer la carte fournie au premier étage, pas vrai ? C'est une de mes inventions.*")
                Affichage.EntreePourContinuer()
                print("*Entre les fibres de papier, j'ai codé un algorithme magique complexe qui scanne ce que voit le porteur et en tire des conclusions sur la structure d'un étage, et l'endroit ou le porteur se trouve.*")
                Affichage.EntreePourContinuer()
                print("*Vu que c'est a chaque fois le même algorithme, on peut produire ces cartes en masse et les distribuer gratuitement a tout les nouveaux voyageurs !*")
                Affichage.EntreePourContinuer()
                print("*J'ai vendu ma création au Directeur de la Banque afin qu'il s'occupe de la production, et moi j'ai eu cette maison en échange.*")
                Affichage.EntreePourContinuer()
                print("*Mais la, je m'ennuie.*")
                Affichage.EntreePourContinuer()
                print("*Tout le monde se satisfait de pouvoir faire quelques étages avec ma carte, et ducoup, plus personne ne me donne de données. Et je ne peux pas améliorer mon algorithme sans ces données !*")
                Affichage.EntreePourContinuer()
                print("*Si seulement quelqu'un pouvait aller observer toute les salles des étages afin que je puisse améliorer les cartes pour qu'elles marchent sur les étages plus profond...*")
                Affichage.EntreePourContinuer()
                if not  Sove.ModifieTagsDansSove("Checke","Chuchoteur"):
                    print("Vous pensez au problème du chuchoteur, et une idée germe dans votre esprit !")
                    Affichage.EntreePourContinuer()
                    print("A partir de maintenant, a chaque fois que vous observez toute les salles d'un étage et que vous le finissez, vous vous rapellerez de la disposition de l'étage afin d'en parler au Chuchoteur !")
                    Affichage.EntreePourContinuer()
                    print("Le nombre d'étages connus est référé sous le nom de *Carte Mentale*. Plus vous en avez, plus vous pourrez améliorer la carte !")
                    Affichage.EntreePourContinuer()
                    Sove.ModifieTagsDansSove("Ajout","Chuchoteur")

            elif choix == 3:
                print("*La Réponse Mathématique Unique a la Vie et a l'Univers. Vous voulez savoir ce que c'est ?*")
                Affichage.EntreePourContinuer()
                print("Le Chuchoteur se rapproche de votre oreille, et vous chuchote quelque chose :")
                Affichage.EntreePourContinuer()
                print("*Une énorme perte de temps.*")
                Affichage.EntreePourContinuer()
                print("Vous jettez un regard blazé au Chuchoteur.")
                Affichage.EntreePourContinuer()
                print("*Bah quoi ?*\n*Comment voulez vous résumer le spectrum entier des évenements et lois qui régissent notre Univers ?*\n*Avec un nombre ?*\n*Quelle signification il aurait ce nombre ??*")
                Affichage.EntreePourContinuer()
                print("*Et puis ca serait quoi ?*\n*42 ?*")
                Affichage.EntreePourContinuer()
                print("*Non. Moi je dis qu'il faut se résoudre a la triste véritée .*")
                Affichage.EntreePourContinuer()

            elif choix == 5:
                break

            elif choix == 4:
                while True:
                    while True:
                        try:
                            liste_de_trades = [
                                "Carte",
                            ]
                            print(f"     -=Chuchoteur=-")
                            print(f"  Cartes Mentale : [{ Sove.ModifieDechetsDansSove('Nombre', 'Carte Mentale', None)}]\n\n")
                            numero = 1
                            for trade in liste_de_trades:
                                level_actuel_de_uppgrade =  Sove.ModifieLivraisonDansSove("Nombre", trade)
                                characteristique_de_luppgrade = ANNUAIREPRIXVILLAGE[trade]
                                if len(characteristique_de_luppgrade) == level_actuel_de_uppgrade:
                                    prix_de_luppgrade = "Impossible"
                                    print(f"{numero} - {trade} niv. MAX")
                                else:
                                    prix_de_luppgrade = characteristique_de_luppgrade[level_actuel_de_uppgrade]
                                    level_atteint = level_actuel_de_uppgrade + 1
                                    if len(characteristique_de_luppgrade) == level_atteint:
                                        level_atteint = "MAX"
                                    print(f"{numero} - {trade} niv. {level_actuel_de_uppgrade} ==) {trade} niv. {level_actuel_de_uppgrade + 1}")
                                    print("    Materiaux nécéssaires:")
                                    for materiau in prix_de_luppgrade:
                                        print(f"      - {prix_de_luppgrade[materiau]} {materiau}")
                                print("\n")

                                numero += 1
                            print(f"\n{numero} - Retour\n")
                            choix = int(input("Faites votre choix avec les nombres : "))
                            ClearConsole()

                            if choix in range(1, numero + 1):
                                break

                        except ValueError:
                            ClearConsole()
                    
                    if choix == numero:
                        break

                    else:
                        # trouver le prix en materiau de luppgrade
                        objet_choisi = liste_de_trades[choix - 1]
                        level_actuel_de_uppgrade =  Sove.ModifieLivraisonDansSove("Nombre", objet_choisi)
                        characteristique_de_luppgrade = ANNUAIREPRIXVILLAGE[objet_choisi]
                        if len(characteristique_de_luppgrade) == level_actuel_de_uppgrade:
                            print("Impossible d'augmenter le niveau de cet objet.")
                            Affichage.EntreePourContinuer()
                        else:
                            prix_de_luppgrade = characteristique_de_luppgrade[level_actuel_de_uppgrade]

                            achat_possible = self.CheckIfEnoughMaterials(prix_de_luppgrade)

                            if not achat_possible:
                                print("Vous n'avez pas assez de materiaux !")
                                Affichage.EntreePourContinuer()

                            else:
                                self.BuyUppgrade(prix_de_luppgrade)

                                print(f"Vous murmurez vos souvenirs d'étages complets, et le Chuchoeur les dessine a la hate.")
                                print("Il regarde ensuite ses dessins avec un regard fou, faisant une croix sur certains nombres et reliant certaines salles entre elles.")
                                print("Puis, il sort un prototype de carte, sur laquelle sont écrit des millions de symboles différents, et chuchote quelques mots qui viennent se perdre dans les fibres de papier.")
                                print(f"*Ca y est ! J'ai trouvé !*\n*Les Cartes des prochains voyageurs devraient maintenant pouvoir afficher la structure de l'étage {level_actuel_de_uppgrade + 4} !*")
                                print("*Prend donc ce bon de livraison, au cas ou .*")
                                Affichage.EntreePourContinuer()

                                Sove.ModifieLivraisonDansSove("Ajout", objet_choisi)

    def DoFabricator(self):
        while True:
            while True:
                try:
                    print("     -=Fabricateur=-\n")
                    print("   Premier Materiau Inséré")
                    print("           Aucun\n")
                    print("   Deuxieme Materiau Inséré")
                    print("           Aucun\n\n")
                    numero = 1
                    liste_materiau = []
                    liste_materiau_temp =  Sove.ModifieDechetsDansSove("Donne", None, None)
                    for materiau in liste_materiau_temp:
                        if liste_materiau_temp[materiau] > 0:
                            liste_materiau.append(materiau)
                    if "Carte Mentale" in liste_materiau:
                        liste_materiau.remove("Carte Mentale")
                    for materiau in liste_materiau:
                        print(f"{numero} - Insérer [{materiau}] ({liste_materiau_temp[materiau]} dans sacoche)")
                        numero += 1
                    print(f"{numero} - Partir\n")
                    choix = int(input("Faites votre choix avec les nombres : "))
                    ClearConsole()
                    if choix in range(1, numero + 1):
                        break
                except ValueError:
                    ClearConsole()
            if choix == numero:
                break
            else:
                premier_materiau = liste_materiau[choix - 1]
                liste_materiau.pop(choix - 1)
                while True:
                    while True:
                        try:
                            print("     -=Fabricateur=-\n")
                            print("   Premier Materiau Inséré")
                            print(f"     {premier_materiau}\n")
                            print("   Deuxieme Materiau Inséré")
                            print("           Aucun\n\n")
                            numero = 1
                            for materiau in liste_materiau:
                                print(f"{numero} - Insérer [{materiau}] ({liste_materiau_temp[materiau]} dans sacoche)")
                                numero += 1
                            print(f"{numero} - Revenir en arrière\n")
                            choix = int(input("Faites votre choix avec les nombres : "))
                            ClearConsole()
                            if choix in range(1, numero + 1):
                                break
                        except ValueError:
                            ClearConsole()
                    if choix == numero:
                        break
                    else:
                        deuxieme_materiau = liste_materiau[choix - 1]

                        while True:
                            try:
                                print("     -=Fabricateur=-\n")
                                print("   Premier Materiau Inséré")
                                print(f"     {premier_materiau}\n")
                                print("   Deuxieme Materiau Inséré")
                                print(f"     {deuxieme_materiau}\n\n")
                                print(f"Voulez vous combiner [{premier_materiau}] avec [{deuxieme_materiau}] ?")
                                print("(Qu'il y aie un résultat ou pas, vous perdrez ces materiaux.)\n")
                                print("1 - Oui")
                                print("2 - Non\n")
                                choix = int(input("Faites votre choix avec les nombres : "))
                                ClearConsole()
                                if choix in [1, 2]:
                                    break
                            except ValueError:
                                ClearConsole()
                        if choix == 1:
                            print("Vous mettez vos materiaux dans la machine et la porte de la cabine se referme.")
                            Affichage.EntreePourContinuer()
                            FuseMaterials(premier_materiau, deuxieme_materiau)
                            break

                            






                    

    def DoColiseum(self):
        if not  Sove.ModifieTagsDansSove("Checke", "Passe de Combat") and  Sove.ModifieTagsDansSove("Checke", "Village Nuit"):
            print("Vous vous faites arrêter à l'entrée par un Punk de très grande taille.")
            print("*Pas de Passe, pas de combats. Dégage, moustique .*")
            Affichage.EntreePourContinuer()
        elif  Sove.ModifieTagsDansSove("Checke", "Passe de Combat") and  Sove.ModifieTagsDansSove("Checke", "Village Nuit"):
            print("Vous vous faites arreter à l'entrée par un Punk de très grande taille.")
            print("*Pas de Passe, pas de-*")
            Affichage.EntreePourContinuer()
            print("*Oh. My bad. Rentrez donc.*")
            Affichage.EntreePourContinuer()
        else:
            while True:
                while True:
                    liste_de_actions_deja_possedee =  Sove.ModifieActionsConnuesDansSove("Donne", None)
                    nombre_dactions_connues = len(liste_de_actions_deja_possedee)
                    if nombre_dactions_connues == 0:
                        if not  Sove.ModifieTagsDansSove("Checke", "Uppgrade Colisée") and not  Sove.ModifieTagsDansSove("Checke", "Carte de Membre (Basique)"):
                            Sove.ModifieTagsDansSove("Ajout", "Uppgrade Colisée")
                            niveau_de_colisee = 0
                            print("*Bienvenue au colisée , Pigeon !*")
                            Affichage.EntreePourContinuer()
                            print("*Ici, tu va pouvoir regarder des combats en temps réel ! Chique !*")
                            Affichage.EntreePourContinuer()
                            print("*Mais le batiment a un nouveau patron maintenant, et il s'apelle OSEILLE !*")
                            Affichage.EntreePourContinuer()
                            print("*Alors tu paye pour avoir ta carte de membre, tu paye pour voir tes combats, et une fois que t'en a assez vu, tu doit payer pour avoir une meilleure carte de membre, et ainsi de suite.*")
                            Affichage.EntreePourContinuer()
                            print("*Ta compris ?*\n*Non ?*\n*Pas mon problème !*")
                            Affichage.EntreePourContinuer()
                        niveau_de_colisee = 0
                    if  Sove.ModifieTagsDansSove("Checke", "Carte de Membre (Basique)") :
                        niveau_de_colisee = 1
                        liste_daction_que_lon_peut_avoir_a_ce_niveau = list(LISTEACTIONRANG1)
                    if  Sove.ModifieTagsDansSove("Checke", "Carte de Membre (Avancée)") :
                        niveau_de_colisee = 2
                        liste_daction_que_lon_peut_avoir_a_ce_niveau = list(LISTEACTIONRANG2)
                    if  Sove.ModifieTagsDansSove("Checke", "Carte de Membre (Exclusive)") :
                        niveau_de_colisee = 3
                        liste_daction_que_lon_peut_avoir_a_ce_niveau = list(LISTEACTIONRANG3)
                    if  Sove.ModifieTagsDansSove("Checke", "Carte de Membre (VVIP)") :
                        niveau_de_colisee = 4
                        liste_daction_que_lon_peut_avoir_a_ce_niveau = list(LISTEACTIONRANG4)
                    
                    for action in liste_de_actions_deja_possedee:
                        if action in liste_daction_que_lon_peut_avoir_a_ce_niveau:
                            liste_daction_que_lon_peut_avoir_a_ce_niveau.remove(action)


                    try:
                        print("     -=Colisée=-")
                        print(f"  Essences Astrales : { Sove.ModifieDechetsDansSove('Nombre', 'Essence Astrale', None)} \n")
                        if  Sove.ModifieTagsDansSove("Checke", "Uppgrade Colisée"):
                            print("1 - Améliorer son rang")
                        elif  Sove.ModifieTagsDansSove("Checke", "Maximum Colisée"):
                            print("1 - Assister a un combat (Plus de combats !)")
                        else:
                            print(f"1 - Assister à un combat [{niveau_de_colisee * 5} essences astrales]")
                        print("2 - Partir\n")
                        choix = int(input("Faites votre choix avec les nombres : "))
                        ClearConsole()
                        if choix in [1, 2]:
                            break
                    except ValueError:
                        ClearConsole()
                if choix == 2:
                    break
                elif choix == 1 and niveau_de_colisee > 2 and  Sove.ModifieTagsDansSove("Checke", "Village Jour"):
                        print("Hey, je devrais pas te le dire mais...")
                        Affichage.EntreePourContinuer()
                        print("On garde une liste des combats que les gens regardent.")
                        Affichage.EntreePourContinuer()
                        print("Si on voit que les gens regardent toujours les mêmes types de combats, on sait alors que ca va pas dans leur vie et qu'ils risquent de partir dans les Champs pour toujours.")
                        Affichage.EntreePourContinuer()
                        print("Ducoup, on fait en sorte d'interdire l'accès aux colisée pour les gens une fois qu'ils ont vu tout les types de combats d'une catégorie.")
                        Affichage.EntreePourContinuer()
                        print("Pourquoi je te dis ca ?")
                        Affichage.EntreePourContinuer()
                        print("Parce que là, t'a vu tout ce qu'y avait a voir.")
                        Affichage.EntreePourContinuer()
                        print("Donc si tu veux voir d'autres combats, de plus haut niveau je veux dire...")
                        print("Reviens la nuit.")
                        Affichage.EntreePourContinuer()
                elif choix == 1 and  Sove.ModifieTagsDansSove("Checke", "Uppgrade Colisée"):
                    if niveau_de_colisee >= 2 and  Sove.ModifieTagsDansSove("Checke", "Village Jour"):
                        print("Hey, je devrais pas te le dire mais...")
                        Affichage.EntreePourContinuer()
                        print("On garde une liste des combats que les gens regardent.")
                        Affichage.EntreePourContinuer()
                        print("Si on voit que les gens regardent toujours les mêmes types de combats, on sait alors que ca va pas dans leur vie et qu'ils risquent de partir dans les Champs pour toujours.")
                        Affichage.EntreePourContinuer()
                        print("Ducoup, on fait en sorte d'interdire l'accès aux colisée pour les gens une fois qu'ils ont vu tout les types de combats d'une catégorie.")
                        Affichage.EntreePourContinuer()
                        print("Pourquoi je te dis ca ?")
                        Affichage.EntreePourContinuer()
                        print("Parce que là, t'a vu tout ce qu'y avait a voir.")
                        Affichage.EntreePourContinuer()
                        print("Donc si tu veux voir d'autres combats, de plus haut niveau je veux dire...")
                        print("Reviens la nuit.")
                        Affichage.EntreePourContinuer()
                        if not  Sove.ModifieTagsDansSove("Checke", "Passe de Combat"):
                            Sove.ModifieTagsDansSove("Ajout", "Passe de Combat")
                            print("Avec ce passe de préférence, sinon ils te laisseront pas rentrer.")
                            print("Le punk vous tend un bout de carton aux reliures dorées.")
                            Affichage.EntreePourContinuer()
                            print("Vous obtenez le Passe de Combat !")
                            Affichage.EntreePourContinuer()
                    else:
                        print("*Les matchs de plus haute qualité, c'est pas pour les trucs dans ton genre.*\n*Va falloir cracher la monnaie si tu veut entrer dans la cours des grands, Bousin !*")
                        Affichage.EntreePourContinuer()
                        if niveau_de_colisee == 0:
                            print("*Pour une carte de membre basique, faut pas faire trop cher sinon les moucherons dans ton genre ne pourraient pas piffer leur thune.*")
                            print("*Disons... 10 essences astrales. Ouai, c'est suffisant !*")
                            Affichage.EntreePourContinuer()
                            prix = {"Essence Astrale" : 10}
                        elif niveau_de_colisee == 1:
                            print("*Pour une carte de membre avancée, on rentre dans les choux direct, sans prévenir !*")
                            print("*Alors tu te bouge et tu m'donne genre 15 essences astrales et 15 essences dorées !*")
                            Affichage.EntreePourContinuer()
                            prix = {"Essence Astrale" : 15, "Essence Dorée" : 15,}
                        elif niveau_de_colisee == 2:
                            print("*Pour une carte de membre exclusive, va falloir avoir plus de thunes. Mais c'est pas un problème si t'es là !*")
                            print("*J'vais réquisitionner 15 essences carmines pour l'interêt collectif, ta vu.*")
                            Affichage.EntreePourContinuer()
                            prix = {"Essence Carmine" : 15}
                        elif niveau_de_colisee == 3:
                            print("*T'es plus un péqueneau maintenant, t'es une vraie star ! Mais va falloir prouver que t'étais un combattant de ouf si tu veux monter de niveau.*")
                            print("*La carte VVIP elle coute 10 essences. Essences de quoi ? Bah toute les essences mon reuf !*")
                            print("*Vitalitée, Magie, Fortitude, Sagesse, Résistance, Dorée, Astrale, Carmine !*")
                            Affichage.EntreePourContinuer()
                            prix = {"Essence de Vitalitée" : 10, "Essence de Magie" : 10, "Essence de Fortitude" : 10, "Essence de Sagesse" : 10, "Essence de Résistance" : 10, "Essence Dorée" : 10, "Essence Astrale" : 10, "Essence Carmine" : 10, }
                        while True:
                            try:
                                print("*Tu paye ?*")
                                print("\n1 - Oui")
                                print("2 - Non\n")
                                choix = int(input("Faites votre choix avec les nombres : "))
                                ClearConsole()
                                if choix in [1, 2]:
                                    break
                            except ValueError:
                                ClearConsole()
                        if choix == 2:
                            print("*Ben tu dégage !*")
                            Affichage.EntreePourContinuer()
                        
                        elif choix == 1:

                            achat_possible = self.CheckIfEnoughMaterials(prix)

                            if not achat_possible:
                                print("*T'a pas assez, troufion !!*")
                                Affichage.EntreePourContinuer()

                            else:
                                print("*Donne moi ta came, et prend ton truc.*")
                                self.BuyUppgrade(prix)
                                print("Le punk prend vos matériaux avant de vous lancer une carte a la figure.")
                                Affichage.EntreePourContinuer()
                                Sove.ModifieTagsDansSove("Enleve", "Uppgrade Colisée")
                                if niveau_de_colisee == 0:
                                    print("Vous obtenez la Carte de Membre (Basique) !")
                                    Sove.ModifieTagsDansSove("Ajout", "Carte de Membre (Basique)")
                                elif niveau_de_colisee == 1:
                                    print("Vous obtenez la Carte de Membre (Avancée) !")
                                    Sove.ModifieTagsDansSove("Ajout", "Carte de Membre (Avancée)")
                                elif niveau_de_colisee == 2:
                                    print("Vous obtenez la Carte de Membre (Exclusive) !")
                                    Sove.ModifieTagsDansSove("Ajout", "Carte de Membre (Exclusive)")
                                elif niveau_de_colisee == 3:
                                    print("Vous obtenez la Carte de Membre (VVIP) !")
                                    Sove.ModifieTagsDansSove("Ajout", "Carte de Membre (VVIP)")
                                Affichage.EntreePourContinuer()


                elif choix == 1 and  Sove.ModifieTagsDansSove("Checke", "Maximum Colisée"):
                    print("*Désolé Golmon, ya pas de lunettes pour t'aider a lire sur la pancarte que t'a déjà vu tout ce que y'avait a voir ici.*")
                    Affichage.EntreePourContinuer()

                elif choix == 1:
                    if  Sove.ModifieDechetsDansSove("Limite", "Essence Astrale", (niveau_de_colisee * 5)):
                        liste_de_description_monstre = [
                            "un Gluant visqueux et suintant",
                            "un Feu Follet dansant gaiement",
                            "un Golem de Terre, concentré sur sa cible",
                            "une Ombre Tangible, preque invisible",
                            "un Clone de Verre et ses mouvements irréguliers",
                            "un Métroïde indescriptible a la forme alien",
                            "un Trienun et son fidèle Bandit Manchot",
                            "un Phénix Juvénile complètement équipé",
                            "un Rochemikaze prêt a exploser",
                            "un Loup de Glace grognant a l'approche de sa victime",
                            "un Voleur Félin silencieux, ténébreux, mysterieux",
                            "un Siffloteur volant gracieusement dans le ciel tel un serpent ailé",
                            "un Lapin du Désastre et ses yeux couleur de sang",
                            "un Cerf Voleur silencieux, ténébreux, mystérieux",
                            "un Aspiratrésor Blindé lançant son BIOS",
                            "un Gluant de Crystal aux courbes régulières et grand sourire",
                            "un Sixenun et sa fidèle Roulette",
                            "un Siffloteur de Jade volant gracieusement dans le ciel tel un serpent ailé",
                            "une Aurelionite éblouissant les gradins par son placage or",
                            "un Sacatrésor et son sourire malicieux",
                            "le Clone d'Obsidienne et ses protocoles",
                            "le Chevalier Pourpre en plein monologue",
                            "le Roi Amonrê, prométhée moderne",
                            "l'Apprentie, génie de la magie",
                            "le Bouffon, drapé d'une aura de folie",
                            "le Prince des Voleurs, encore débutant dans cet exercice",
                            "le Roi Déchu et son infame paranoïa",
                            "le grand, le musculeux, le Maitre Mage",
                            ]
                        description_monstre = random.choice(liste_de_description_monstre)

                        if description_monstre in [
                            "le Clone d'Obsidienne et ses protocoles",
                            "le Chevalier Pourpre en plein monologue",
                            "le Roi Amonrê, prométhée moderne",
                            "l'Apprentie, génie de la magie",
                            "le Bouffon, drapé d'une aura de folie",
                            "le Prince des Voleurs, encore débutant dans cet exercice",
                            "le Roi Déchu et son infame paranoïa",
                            "le grand, le musculeux, le Maitre Mage",
                        ]:
                            description_foule = "silencieuse"
                        else:
                            description_foule = "bruyante"
                        
                        liste_de_description_combat = [
                            "un jeune homme blond habillé de vert et coiffé d'un long chapeau",
                            "une jeune femme dotée d'une armure orange et rouge",
                            "un être étrange sans bras ni jambe, et dont les membres sont pourtant accroché a son torse",
                            "un trentenaire doté d'un long manteau et d'une sorte de petit tournevis lumineux",
                            "une femme avec des long cheveux blond et habillée avec une robe rose",
                            "une femme aux cheveux verts et couronne de laurier dorés",
                            "un adolescent tout de noir vetu, avec des gants rouges et un masque de carnaval blanc recouvrant seulement ses yeux"
                            "un enfant aux cheveux en piques, portant de grosses chaussures et une gigantesque clé",
                            "une petite boule rose toute joyeuse",
                            "un gros rat jaune avec une queue en forme d'éclair",
                            "un hérisson humanoïde bleu avec de grosses chaussures rouges et blanches",
                            "un jeune homme aux cheveux en pique, doté d'une grosse épée a deux main d'apparence brute",
                            "un homme doté d'un épais manteau noir et d'une baguette magique, arborant une cicatrice sur le front",
                            "un vieillard a la longue barbe blanche, dotée d'un sceptre de bois noueux et d'un manteau blanc très épais",
                            "une femme blonde avec une paire de lunettes d'viateurs sur la tête, a l'interieur d'un tank",
                            "une femme blonde dans un tracksuit jaune, armée d'un long katana",
                            "une trentenaire brune aux cheveux bouclés armée d'un fusil a impulsion, dotée d'un débardeur blanc taché de sang vert",
                            "un homme noir baraqué au crane chauve, bougeant ses pectoraux en rythme",
                            "un homme noir a la coiffure impeccable, lunettes de soleil, et dents... pointues ? ",
                            "une trentenaire noire aux cheveux bouclés et regard puissant, arméee d'un katana parfaitement entretenu",
                            "un homme noir habillé avec des vêtements de shériff sur lequel sont brodé le nom *King Schultz*, et armé d'un révolver"
                        ]
                        description_combattant = random.choice(liste_de_description_combat)
                        action_a_apprendre = random.choice(liste_daction_que_lon_peut_avoir_a_ce_niveau)
                        liste_daction_que_lon_peut_avoir_a_ce_niveau.remove(action_a_apprendre)
                        print("Vous payez votre du et prenez place dans les gradins.")
                        Affichage.EntreePourContinuer()
                        print(f"Une foule {description_foule} attend avec impatience l'arrivée d'un combattant.")
                        Affichage.EntreePourContinuer()
                        print("Soudainement , vous entendez un bruit de pas sur le sable de l'Arène, et cette derniere change d'apparence !")
                        Affichage.EntreePourContinuer()
                        print(f"Vous apercevez {description_combattant}, s'avancant fièrement dans l'arène !")
                        Affichage.EntreePourContinuer()
                        print(f"De l'autre coté, vous distinguez la silhouette de son ennemi : {description_monstre} !")
                        Affichage.EntreePourContinuer()
                        print("Les sorts pleuvent, les techniques s'enchainent, les items sont tantot utilisés, tantot jetés !")
                        Affichage.EntreePourContinuer()
                        print("Et alors que le combat touche a sa fin, vous regardez avec intensité le Zeroual dans l'arène.")
                        Affichage.EntreePourContinuer()
                        print(f"Vous voyez l'action [{action_a_apprendre}] se faire de manière parfaite, et un déclic s'opère en vous !")
                        Affichage.EntreePourContinuer()
                        print("En analysant l'action en tant que spectateur, en se souvenant d'avoir fait l'action en tant que combattant...")
                        print("...vous comprenez finalement comment elle fonctionne, et son image est gravée a jamais dans votre esprit.")
                        Affichage.EntreePourContinuer()
                        print(f"Vous apprenez [{action_a_apprendre}] de manière permanente !")
                        print("Elle sera directement disponible lors de votre prochaine partie !")
                        Affichage.EntreePourContinuer()
                        print("Le combat se finit, la foule se disperse, et vous sortez du Colisée encore chamboulé par votre découverte.")
                        Affichage.EntreePourContinuer()
                        Sove.ModifieActionsConnuesDansSove("Ajout", action_a_apprendre)
                        Sove.ModifieDechetsDansSove("Enleve", "Essence Astrale", (niveau_de_colisee * 5))
                        if len(liste_daction_que_lon_peut_avoir_a_ce_niveau) == 0 and niveau_de_colisee != 4:
                            Sove.ModifieTagsDansSove("Ajout", "Uppgrade Colisée")
                            print("Le Punk vous arrête a la sortie.")
                            Affichage.EntreePourContinuer()
                            print("*Ca y est pigeon, ta vu tout ce qu'il y avait a voir a ce niveau.*")
                            Affichage.EntreePourContinuer()
                            print("*La prochaine fois, faudra augmenter ta carte !*")
                            Affichage.EntreePourContinuer()
                        elif len(liste_daction_que_lon_peut_avoir_a_ce_niveau) == 0 and niveau_de_colisee == 4:
                            Sove.ModifieTagsDansSove("Ajout", "Maximum Colisée")
                            print("Le Punk vous arrête a la sortie.")
                            Affichage.EntreePourContinuer()
                            print("*Ca y est. Tu as vu tout ce qu'il y avait a voir.*")
                            Affichage.EntreePourContinuer()
                            print("*Pleure pas, on ne te jette pas du Colisée pour l'éternitée non plus !*")
                            Affichage.EntreePourContinuer()
                            print("*Si tu revient d'ici une centaine d'année, on te laissera voir les match depuis de tout début. Et on te fera même une petite ristourne !*")
                            Affichage.EntreePourContinuer()
                            print("*Maintenant, file !")
                            Affichage.EntreePourContinuer()
                    else:
                        print("*Tu tente quoi la ? Un braquage ? J'vais t'braquer moi tu va voir !*")
                        Affichage.EntreePourContinuer()

    def DoChamane(self):
        while True:
            while True:
                print("     -=La Chamane=-\n\n")
                print("1 - Parler")
                print("2 - Malédictions")
                print("3 - Bénédictions")
                print("4 - Partir\n")
                choix = int(input("Faites votre choix avec les nombres : "))
                ClearConsole()
                if choix in range(1, 5):
                    break
            if choix == 4:
                break
            if choix == 1 :
                print("*Bonsoir, avatar.*")
                Affichage.EntreePourContinuer()
                print("*Aime tu te promener dans la Crypte ?*")
                Affichage.EntreePourContinuer()
                print("*Premiers arrivés ici, nous pensions que le salut résidait dans la prière, envers une déitée sans nom et sans visage qui répondrait a notre désespoir...*")
                Affichage.EntreePourContinuer()
                print("*...et tu te trouve actuellement dans son sanctuaire.*")
                Affichage.EntreePourContinuer()
                print("Vous regardez nerveusement autour de vous, et décernez les contours de milions de visages en peine dans la roche.")
                Affichage.EntreePourContinuer()
                print("*Calme donc ton esprit, ce ne sont que de simples ombres d'une époque bien lointaine.*")
                Affichage.EntreePourContinuer()
                print("*De petites vaguelette a la surface d'un étang infiniment grand, dans lequel nous avons laché une pierre il y a bien des millénaires..*")
                Affichage.EntreePourContinuer()
                print("*..ressens-tu la surface de l'eau s'élever et redescendre, avatar ?*")
                Affichage.EntreePourContinuer()
                print("Vous sentez une frisson parcourir votre dos, comme une main qui suit les courbes de la chair.")
                Affichage.EntreePourContinuer()
                print("*Te voila devant moi ce soir, vétu seulement de la volontée de celles et ceux qui empruntent ton nom.*")
                Affichage.EntreePourContinuer()
                print("*Mais si tu tente de satisfaire les esprits de tes predecesseurs emmurés ici en traversant le coliseum orné de leur terreurs...*")
                Affichage.EntreePourContinuer()
                print("*...tu pourra alors te draper dans leur lumière.*\n*Devenir ce dieu sans visage qui parcourt leur tombeau avec le poids de leurs prières sur tes épaules.*")
                Affichage.EntreePourContinuer()
                print("*Abat le Maitre Mage armé de malédictions, et tu pourras bénéficier de mes bénédictions.*")
                Affichage.EntreePourContinuer()
                print("*Le choix viendra d'en haut, mais les mots t'apartiennent, avatar.*")
                Affichage.EntreePourContinuer()
            elif choix == 2:
                while True:
                    while True:
                        try:
                            
                            malediction_actuelle = RecupereMaledictionEnCours()
                            print("     -=La Chamane=-")
                            print(f" Malédiction Activée : [{malediction_actuelle}] \n\n")
                            print("1 - Activer la Malédiction [Apyre]")
                            print("     # Les sorts et techniques de feu ne fonctionnent plus\n")
                            print("2 - Activer la Malédiction [Infrigérable]")
                            print("     # Les sorts et techniques de glace ne fonctionnent plus\n")
                            print("3 - Activer la Malédiction [Isolant]")
                            print("     # Les sorts et techniques de foudre ne fonctionnent plus\n")
                            print("4 - Activer la Malédiction [Arénacé]")
                            print("     # Les sorts et techniques de terre ne fonctionnent plus\n")
                            print("5 - Activer la Malédiction [Anoxique]")
                            print("     # Les sorts et techniques physiques ne fonctionnent plus\n")
                            print("6 - Activer la Malédiction [Exsangue]")
                            print("     # Les sorts et techniques de sang ne fonctionnent plus\n")
                            print("7 - Activer la Malédiction [Impotent]")
                            print("     # Les ennemis sont invincibles pendant les 5 premiers tours\n")
                            print("8 - Activer la Malédiction [Chronophage]")
                            print("     # Affecte le personnage avec le *Tachyon Instable*")
                            print("     # Le tachyon charge avec les actions et se décharge avec l'inaction.")
                            print("     # Si la charge arrive a 100% , c'est la mort.\n")
                            print("9 - Activer la Malédiction [Sparifique]")
                            print("     # Ne gagne plus d'artefact, sauf en tuant un boss.\n")
                            print("10 - Activer la Malédiction [Ascétique]")
                            print("     # Diminue les gains de gold de 50%, regagne 10% de vie a chaque début de combat.\n")
                            print("11 - Activer la Malédiction [Pur]")
                            print("     # Ne peut pas acheter de talents.\n")
                            print("12 - Activer la Malédiction [Ordinaire]")
                            print("     # Ne peut plus enchanter de sorts ou techniques.\n")
                            print("13 - Désactiver la Malédiction actuelle\n")
                            print("14 - Revenir au menu principal\n")
                            choix = int(input("Faites votre choix avec les nombres : "))
                            ClearConsole()
                            if choix in range(1, 15):
                                break
                        except ValueError:
                            ClearConsole()
                    if choix == 14:
                        break
                    elif choix == 13:
                        if malediction_actuelle != "Aucun":
                             Sove.ModifieTagsDansSove("Enleve", malediction_actuelle)
                    else:
                        liste_malediction = RecupereMaledictionEnCours("liste")
                        malediction_choisie = liste_malediction[choix - 1]
                        if malediction_actuelle != "Aucun":
                             Sove.ModifieTagsDansSove("Enleve", malediction_actuelle)
                        Sove.ModifieTagsDansSove("Ajout", malediction_choisie)
            elif choix == 3:
                while True:
                    while True:
                        try:
                            
                            benediction_actuelle = RecupereBenedictionEnCours()
                            print("     -=La Chamane=-")
                            print(f" Bénédiction Activée : [{benediction_actuelle}] \n\n")

                            if  Sove.ModifieTagsDansSove("Checke", "Debloque Incandescent"):
                                print("1 - Activer la Bénédiction [Incandescent]")
                                print("     # Les sorts et techniques de feu font 75% de dégat supplémentaire.\n")
                            else:
                                print("1 - Activer la Bénédiction [ACCES NON AUTORISE]\n")

                            if  Sove.ModifieTagsDansSove("Checke", "Debloque Glaciaire"):
                                print("2 - Activer la Bénédiction [Glaciaire]")
                                print("     # Les sorts et techniques de glace font 75% de dégat supplémentaire.\n")
                            else:
                                print("2 - Activer la Bénédiction [ACCES NON AUTORISE]\n")

                            if  Sove.ModifieTagsDansSove("Checke", "Debloque Conducteur"):
                                print("3 - Activer la Bénédiction [Conducteur]")
                                print("     # Les sorts et techniques de foudre font 75% de dégat supplémentaire.\n")
                            else:
                                print("3 - Activer la Bénédiction [ACCES NON AUTORISE]\n")

                            if  Sove.ModifieTagsDansSove("Checke", "Debloque Rocailleux"):
                                print("4 - Activer la Bénédiction [Rocailleux]")
                                print("     # Les sorts et techniques de terre font 75% de dégat supplémentaire.\n")
                            else:
                                print("4 - Activer la Bénédiction [ACCES NON AUTORISE]\n")
                                
                            if  Sove.ModifieTagsDansSove("Checke", "Debloque Musclé"):
                                print("5 - Activer la Bénédiction [Musclé]")
                                print("     # Les sorts et techniques physique font 75% de dégat supplémentaire.\n")
                            else:
                                print("5 - Activer la Bénédiction [ACCES NON AUTORISE]\n")

                            if  Sove.ModifieTagsDansSove("Checke", "Debloque Sain"):
                                print("6 - Activer la Bénédiction [Sain]")
                                print("     # Les sorts et techniques de sang font 75% de dégat supplémentaire.\n")
                            else:
                                print("6 - Activer la Bénédiction [ACCES NON AUTORISE]\n")

                            if  Sove.ModifieTagsDansSove("Checke", "Debloque Omnipotent"):
                                print("7 - Activer la Bénédiction [Omnipotent]")
                                print("     # Gagne 1 point de vie/mana max par monstre tué.\n")
                            else:
                                print("7 - Activer la Bénédiction [ACCES NON AUTORISE]\n")

                            if  Sove.ModifieTagsDansSove("Checke", "Debloque Accumulateur de Tachyon"):
                                print("8 - Activer la Bénédiction [Accumulateur de Tachyon]")
                                print("     # Donne l'artefact *Accumulateur de Tachyon* au personnage.")
                                print("     # Le tachyon se charge au fur et a mesure du temps et des actions.")
                                print("     # Si une action est effectuée sans assez de ressource (endurance/mana),")
                                print("     # 50% de charge seront utilisés a la place, rendant l'action gratuite.")
                                print("     # Si la charge dépasse 110%, elle est utilisée pour bénir le personnage pendant 5 tours.\n")
                            else:
                                print("8 - Activer la Bénédiction [ACCES NON AUTORISE]\n")

                            if  Sove.ModifieTagsDansSove("Checke", "Debloque Polyvalent"):
                                print("9 - Activer la Bénédiction [Polyvalent]")
                                print("     # Donne 1 artefact supplémentaire gratuit a chaque début d'étage.\n")
                            else:
                                print("9 - Activer la Bénédiction [ACCES NON AUTORISE]\n")

                            if  Sove.ModifieTagsDansSove("Checke", "Debloque Materiel"):
                                print("10 - Activer la Bénédiction [Materiel]")
                                print("     # Les gains de gold augmentent de 100%.\n")
                            else:
                                print("10 - Activer la Bénédiction [ACCES NON AUTORISE]\n")

                            if  Sove.ModifieTagsDansSove("Checke", "Debloque Augmenté"):
                                print("11 - Activer la Bénédiction [Augmenté]")
                                print("     # Le personnage commence avec toute les affinités élémentaires déja acquises.\n")
                            else:
                                print("11 - Activer la Bénédiction [ACCES NON AUTORISE]\n")

                            if  Sove.ModifieTagsDansSove("Checke", "Debloque Extraordinaire"):
                                print("12 - Activer la Bénédiction [Extraordinaire]")
                                print("     # Une action (sort ou technique) sera enchanté gratuitement a chaque début d'étage.\n")
                            else:
                                print("12 - Activer la Bénédiction [ACCES NON AUTORISE]\n")

                            print("13 - Désactiver la Bénédiction actuelle\n")
                            print("14 - Revenir au menu principal\n")
                            choix = int(input("Faites votre choix avec les nombres : "))
                            ClearConsole()
                            if choix in range(1, 15):
                                break
                        except ValueError:
                            ClearConsole()
                    if choix == 14:
                        break
                    elif choix == 13:
                        if malediction_actuelle != "Aucun":
                             Sove.ModifieTagsDansSove("Enleve", benediction_actuelle)
                    else:
                        liste_benediction = RecupereBenedictionEnCours("liste")
                        benediction_choisie = liste_benediction[choix - 1]
                        if RegardeSiBenedictionDisponible(benediction_choisie):
                            if benediction_actuelle != "Aucun":
                                Sove.ModifieTagsDansSove("Enleve", benediction_actuelle)
                            Sove.ModifieTagsDansSove("Ajout", benediction_choisie)
                        else:
                            print("ACCES NON AUTORISE")
                            print("TERMINEZ UNE PARTIE AVEC LA MALEDICTION CORRESPONDANTE")
                            Affichage.EntreePourContinuer()

                        
                    
    def DoAncien(self):
        while True:
            while True:
                try:
                    print("     -=L'Ancien=-")
                    print(f"  Essences Carmine : { Sove.ModifieDechetsDansSove('Nombre', 'Essence Carmine', None)} \n\n")
                    print("1 - Parler")
                    print("2 - Ecouter le vieil homme parler (1 Essence Carmine)")
                    print("3 - Faire le point sur les indices")
                    print("4 - Améliorer son équipement")
                    print("5 - Partir\n")
                    choix = int(input("Faites votre choix avec les nombres : "))
                    ClearConsole()
                    if choix in range(1, 6):
                        break
                except ValueError:
                    ClearConsole()
                    
            if choix == 1:
                print("Vous posez une question a l'homme, mais il ne vous répond pas.")
                Affichage.EntreePourContinuer()
                print("Ses yeux perdus dans la lumière de la lune, ses cheveux soyeux, vous avez l'impression de regarde une peinture...")
                Affichage.EntreePourContinuer()
                print("Soudainement, il tourne la tête vers vous...")
                Affichage.EntreePourContinuer()
                if not  Sove.ModifieTagsDansSove("Checke", "Livre de la Cigogne Blanche"):
                    Sove.ModifieTagsDansSove("Ajout", "Livre de la Cigogne Blanche")
                    print("IL pose ses mains sur votre crane, et vous sentez le mod ne t oue   r    n")
                    Affichage.EntreePourContinuer()
                    print("ieee            er          [SSS]")
                    Affichage.EntreePourContinuer()
                    print("[SSSS]      [ss]     [SSSYSSS]")
                    Affichage.EntreePourContinuer()
                    print("[SSSSSSYSTEME OVERRIDEEE]")
                    Affichage.EntreePourContinuer()
                    print("[TELEEECHARGEEMous regardez l'ENT EN CcafaitmalcafaitmalcafaitmalOURS]")
                    Affichage.EntreePourContinuer()
                    print("[TELECHARGaaaaaaaaEMENT TERMINE]")
                    Affichage.EntreePourContinuer()
                    print("L'homme enlève ses doigts de votre crane.")
                    Affichage.EntreePourContinuer()
                    print("Le monde arrête de tourner.")
                    Affichage.EntreePourContinuer()
                    print("*..l disait donc vrai...*")
                    Affichage.EntreePourContinuer()
                    print("Vous regardez l'homme en deux crachotements.")
                    Affichage.EntreePourContinuer()
                    print("...voici un cadeau.\ntu ne le verra pas, mais ce n'est pas ...grave.")
                    Affichage.EntreePourContinuer()
                    print("car c'est un cadeau pour toi, pas pour toi.")
                    Affichage.EntreePourContinuer()
                    print("Vous avez l'impression que quelque chose a lu vos pensées.")
                    Affichage.EntreePourContinuer()
                    print("...viens..quand tu aura vu des choses...")
                    Affichage.EntreePourContinuer()
                    print(".je le mettrais a jour...")
                    Affichage.EntreePourContinuer()
                    print("...le...")
                    Affichage.EntreePourContinuer()
                    print("l'Ancien se retourne, et continue de regarder la lune.")
                    Affichage.EntreePourContinuer()
                    print("...le livre de la cigogne blanche.\nle dernier espoir pour que quelqu'un arrête le cauchemard.")
                    Affichage.EntreePourContinuer()
                    print("...")
                    Affichage.EntreePourContinuer()
                    print("...oh.")
                    Affichage.EntreePourContinuer()
                    print("...je vois.")
                    Affichage.EntreePourContinuer()
                    print("l'Ancien esquisse un sourire.")
                    Affichage.EntreePourContinuer()
                    print("la cigogne est blanche...")
                    Affichage.EntreePourContinuer()
                    print("...blanche comme la lune.")
                    Affichage.EntreePourContinuer()
                else:
                    print("Il pose aa aal")
                    Affichage.EntreePourContinuer()
                    print("[SSSYSTEMM Osa main sur votre craneVERRIDE]")
                    Affichage.EntreePourContinuer()
                    print("[SYSTEM : Le livre de la cigogne blanche a été mis a jour avec vos connaissances !]")
                    Affichage.EntreePourContinuer()
                    print("L'homme retire sa main de votre tête, et le monde s'arrête de tourner.")
                    Affichage.EntreePourContinuer()
                    EcrireDansLivreCigogneBlanche
                print("...")
                Affichage.EntreePourContinuer()
                print("..le fabricateur...")
                Affichage.EntreePourContinuer()
                print("...apporte moi le sang des dieux, et j'essayerais de me rappeler ce qui peut être fusionné...")
                Affichage.EntreePourContinuer()
                print("...")
                Affichage.EntreePourContinuer()
                print("L'Ancien replonge dans son silence lourd de conséquence.")
                Affichage.EntreePourContinuer()
                

            elif choix == 2 and  Sove.ModifieDechetsDansSove("Limite", "Essence Carmine", 1):
                liste_de_recettes_entendues = Sove.ModifieRecettesDansSove("Donne", None)
                liste_de_recettes_possibles = []
                for number in range(0, 17):
                    liste_de_recettes_possibles.append(number)
                for numero_de_rumeur in liste_de_recettes_possibles:
                    if numero_de_rumeur in liste_de_recettes_entendues:
                        liste_de_recettes_possibles.remove(numero_de_rumeur)

                liste_de_histoires = [
                    "de contrées sauvages, de dragons ayant volé une citée d'or et de nains, et d'une longue traversée de ces contrées par un groupe hétéroclite d'aventuriers.",
                    "d'une grande caverne enfermant des monstres amicaux, et de l'enfant qui a conquit la caverne et le coeur des habitants par sa bontée et sa gentillesse. ",
                    "d'un royaume en ruine, de peuples éparpillés aux quatre coins de sa carte, et des blessures dans le paysage laissées par une gigantesque bête de malice attendant son heure dans un chateau de pierre et d'obsidienne.",
                    "de sons familiers, d'une femme aveugle attirée dans une maison hantée, et de la perception dont elle a fait preuve pour s'en sortir.",
                    "d'un homme chamboulé, amnésique, dans un chateau de poussière et de monstres, armé seulement d'une lanterne à amadou pour affronter les ténèbres de son histoire.",
                    "de vallées oubliées, nichées sur le toit du monde, redécouvertes par une archéologue intrépide qui survit a toute ses rencontre grace a sa détermination, son cran, et ses méthodes de survivaliste.",
                    "d'un homme aigris, témoin d'une époque que sa fille de coeur ne connaitra jamais, alors qu'il navigue sur les terres de son passé entre le danger des hommes, et le dangers de champignons parasitaires.",
                    "d'un groupe hétéroclite de personnes tombées sur une planète hostile, chassés par des êtres qui manipulent la réalité, alors qu'il regardent le soir les vestiges de leur humanité tomber de leur vaisseau spatial comme autant de gouttes dans une pluie de chair et de sang.",
                    "d'un enfant, écrasé par la peine, la honte, et le regret, se réfugiant dans un monde imaginaire ou son enfance prend vie, sans pour autant réussir a échapper a la culpabilité qui lui tord les veines et la haine envers lui même qui touche son coeur comme le couteau qui carresse son abdomen tout les soirs.",
                    "d'une jeune rock-star, modifiée pour la récolte de dechets, et qui se sert de sa vision du monde calée sur le rhytme de la musique qui fait battre son coeur pour déjouer les plans d'une méga corporation avec l'aide d'un groupe de hackeur.",
                    "d'une feuille solitaire qui revient encore et toujours a la vie alors qu'elle tombe de son arbre mort, voyageant a travers l'espace et le temps accompagné toujours par quelqu'un, et vouant son existance a la protection de la terre contre tout les dangers.",
                ]
                histoire = random.choice(liste_de_histoires)
                print(f"Vous donnez une essence carmine a l'ancien, et celui ci commence a raconter un de ses nombreuses histoires...")
                print(f"Quelque chose a propos {histoire}.")
                Affichage.EntreePourContinuer()

                if len(liste_de_recettes_possibles) == 0:
                    print("Mais il n'y a plus rien d'utile dans ce qu'il dit.")
                    Affichage.EntreePourContinuer()
                
                else:
                    Sove.ModifieDechetsDansSove("Enleve","Essence Carmine",1)
                    numero_de_recette_entendue = random.choice(liste_de_recettes_possibles)
                    recette = LISTERECETTES[numero_de_recette_entendue]
                    print("Alors que vous écoutez attentivement les divagations de l'homme, quelque chose vous interpelle dans les mots utilisés !")
                    Affichage.EntreePourContinuer()
                    print("Vous imprimez dans votre esprit les mots suivants :")
                    Sove.ModifieRecettesDansSove("Ajout", numero_de_recette_entendue)
                    print(recette)
                    Affichage.EntreePourContinuer()



            elif choix == 2:
                print("Vous cherchez quelque chose d'autre a donner a l'Ancien, mais il met sa main sur votre sacoche.\nIl ne vous ouvrira les portes de son esprit seulement contre des essences carmines.")
                Affichage.EntreePourContinuer()

            elif choix == 3:
                print("Vous faites le point sur les indices entendus :\n")
                liste_de_recettes_entendues = Sove.ModifieRecettesDansSove("Donne", None)

                for numero_de_la_recette in liste_de_recettes_entendues:
                    print(LISTERECETTES[numero_de_la_recette])
                    print("")
                    
                print("\n")
                Affichage.EntreePourContinuer()

            elif choix == 5:
                break

            elif choix == 4:
                while True:
                    while True:
                        try:
                            liste_de_trades = [
                                "Sacoche",
                                "Emblème de la Fin",
                            ]
                            print(f"     -=Banque=-\n\n")
                            numero = 1
                            for trade in liste_de_trades:
                                level_actuel_de_uppgrade =  Sove.ModifieLivraisonDansSove("Nombre", trade)
                                characteristique_de_luppgrade = ANNUAIREPRIXVILLAGE[trade]
                                if len(characteristique_de_luppgrade) == level_actuel_de_uppgrade:
                                    prix_de_luppgrade = "Impossible"
                                    print(f"{numero} - {trade} niv. MAX")
                                else:
                                    prix_de_luppgrade = characteristique_de_luppgrade[level_actuel_de_uppgrade]
                                    level_atteint = level_actuel_de_uppgrade + 1
                                    if len(characteristique_de_luppgrade) == level_atteint:
                                        level_atteint = "MAX"
                                    print(f"{numero} - {trade} niv. {level_actuel_de_uppgrade} ==) {trade} niv. {level_actuel_de_uppgrade + 1}")
                                    print("    Materiaux nécéssaires:")
                                    for materiau in prix_de_luppgrade:
                                        print(f"      - {prix_de_luppgrade[materiau]} {materiau}")
                                print("\n")

                                numero += 1
                            print(f"\n{numero} - Retour\n")
                            choix = int(input("Faites votre choix avec les nombres : "))
                            ClearConsole()

                            if choix in range(1, numero + 1):
                                break

                        except ValueError:
                            ClearConsole()
                    
                    if choix == numero:
                        break

                    else:
                        # trouver le prix en materiau de luppgrade
                        objet_choisi = liste_de_trades[choix - 1]
                        level_actuel_de_uppgrade =  Sove.ModifieLivraisonDansSove("Nombre", objet_choisi)
                        characteristique_de_luppgrade = ANNUAIREPRIXVILLAGE[objet_choisi]
                        if len(characteristique_de_luppgrade) == level_actuel_de_uppgrade:
                            print("Impossible d'augmenter le niveau de cet objet.")
                            Affichage.EntreePourContinuer()
                        else:
                            prix_de_luppgrade = characteristique_de_luppgrade[level_actuel_de_uppgrade]

                            achat_possible = self.CheckIfEnoughMaterials(prix_de_luppgrade)

                            if not achat_possible:
                                print("Vous n'avez pas assez de materiaux !")
                                Affichage.EntreePourContinuer()

                            else:
                                self.BuyUppgrade(prix_de_luppgrade)

                                print(f"L'ancien vous regarde, et vous voyez une larme perler dans ses yeux.")
                                print("Il se retourne alors, prend quelque chose derriere lui, et vous le tend.")
                                Affichage.EntreePourContinuer()
                                if objet_choisi == "Sacoche":
                                    print("Vous obtenez la Sacoche !")
                                    print("Cet objet plein de souvenirs interfere avec tout ce que vous tenez comme acquis dans ce monde.")
                                    print("Vous pouvez maintenant obtenir des essences carmines a votre mort, pour chaque paquets de 10 redcoins !")
                                else:
                                    print("Vous obtenez l'Emblème de la Fin !")
                                    print("Ce blason infiniment précieux vous octroie la même autoritée que les tout premiers aventuriers, et vous permet d'ameliorer votre équipement a un tout autre niveau !")
                                Affichage.EntreePourContinuer()
                                Sove.ModifieLivraisonDansSove("Ajout", objet_choisi)


    def DoHotel(self):
        while True:
            while True:
                liste_des_tags =  Sove.ModifieTagsDansSove("Donne", None)
                try:
                    print("     -=Saloon=-")
                    print(f"  Essences Dorée : { Sove.ModifieDechetsDansSove('Nombre', 'Essence Dorée', None)} \n\n")
                    if "Clé de la Chambre" in liste_des_tags:
                        print("1 - Dormir")
                    else:
                        print("1 - Acheter une chambre (50 essences dorées + 50 essences astrales)")
                    print("2 - Prendre a boire (1 essence dorée)")
                    print("3 - Faire le point sur les rumeurs")
                    print("4 - Partir\n")
                    choix = int(input("Faites votre choix avec les nombres : "))
                    ClearConsole()
                    if choix in range(1, 5):
                        break
                except ValueError:
                    ClearConsole()
            if choix == 1 and not "Clé de la Chambre" in liste_des_tags:
                if  Sove.ModifieDechetsDansSove("Limite","Essence Dorée",50) and  Sove.ModifieDechetsDansSove("Limite","Essence Astrale",50):
                    print("Vous tendez les materiaux a la réceptioniste, et elle vous donne une clé en échange.")
                    Affichage.EntreePourContinuer()
                    print("Vous obtenez la Clé de la Chambre !\nVous pouvez maintenant aller dormir dans une des chambres de l'hotel !")
                    Sove.ModifieDechetsDansSove("Enleve","Essence Dorée",50)
                    Sove.ModifieDechetsDansSove("Enleve","Essence Astrale",50)
                    Sove.ModifieTagsDansSove("Ajout", "Clé de la Chambre")
                    Affichage.EntreePourContinuer()
                else:
                    print("Vous n'avez pas assez de matériaux !")
                    Affichage.EntreePourContinuer()
                    
            elif choix == 1:
                print("Vous montez dans votre chambre et tombez lourdement sur le lit !")
                print("C'est moelleux...si doux... et vous etes tellement.. tellement.....")
                Affichage.EntreePourContinuer()
                StopAllMusic()
                print("...fatigué......")
                time.sleep(2)
                ClearConsole()
                if "Village Jour" in liste_des_tags:
                    PlaySound("nighty")
                    time.sleep(5.5)
                    print("Quand vous vous réveillez, vos yeux sont accueilli par la douce lueur d'une lune fixée dans le ciel.")
                    Affichage.EntreePourContinuer()
                    Sove.ModifieTagsDansSove("Ajout","Village Nuit")
                    Sove.ModifieTagsDansSove("Enleve","Village Jour")
                elif "Village Nuit" in liste_des_tags:
                    PlaySound("daythy")
                    time.sleep(3.9)
                    print("Quand vous vous réveillez, vos oreilles sont accueilli par le bruit de la rue bondée en dessous.")
                    Affichage.EntreePourContinuer()
                    Sove.ModifieTagsDansSove("Ajout","Village Jour")
                    Sove.ModifieTagsDansSove("Enleve","Village Nuit")
                StopAllMusic()
                FloorMaker.StopAllVillageChannels()
                FloorMaker.InitialisationOfTownVariations()
                PlayMusicDeLetage()
                CHANNELMUSIQUEDEBASE.set_volume(0.5)
                PermanentPlaySFX("noise")

            elif choix == 2 and  Sove.ModifieDechetsDansSove("Limite", "Essence Dorée", 1):
                liste_de_rumeurs_entendues = Sove.ModifieRumeursDansSove("Donne", None)
                liste_de_rumeurs_possibles = []
                if "Village Jour" in liste_des_tags:
                    for number in range(0, 26):
                        liste_de_rumeurs_possibles.append(number)
                elif "Village Nuit" in liste_des_tags:
                    for number in range(26, 51):
                        liste_de_rumeurs_possibles.append(number)
                for numero_de_rumeur in liste_de_rumeurs_possibles:
                    if numero_de_rumeur in liste_de_rumeurs_entendues:
                        liste_de_rumeurs_possibles.remove(numero_de_rumeur)

                liste_de_boissons = ["Diabolo Pêche", "Diabolo Kiwi", "Diabolo Citron", "Diabolo Fraise", "Jus de Cactus", "Jus de Fruit", "Smoothie au Brocoli", "Jus de Tomate", "Tabasco Extra-Fort", "Mayonnaise", "l'Air Pur qui Habite les Montagnes", "Cette Odeur de Vienoisserie devant les Boulangeries le Matin", "Lave en Fusion (sans sucre)", "Glaçons", "Plutonium Enrichi", "Pétillant a la Grenadine", "Thé Vert", "Thé Verre", "Troie", "Filaments", "Fromage Rapé", "Particules Elementaires (sans alcool)", "Menthe de Sirop", "Café (sans cafféine) (sans gluten) (sans sucre) (sans alcool) (sans eau) (sans grains de café) (sans café) (sans verre)", "Lait d'Amandes", "Chloroforme", "Sel", "Poivre", "Poussière et Autres Saletées Récupérées Sur Le Comptoir", "Terre", "Rien Du Tout (vous vouliez juste faire plaisir a la barman.. barwoman ?)", "verre de verre de verre de verre de verre de verre de verre de verre de verre de verre de verre de verre d'eau"]
                boisson = random.choice(liste_de_boissons)
                print(f"Vous commandez un verre de {boisson} a la barman (barwoman ?), et le sirotez en tendant l'oreille...")
                Affichage.EntreePourContinuer()

                if len(liste_de_rumeurs_possibles) == 0:
                    print("...mais tout ce que vous entendez, vous l'aviez déja entendu auparavant.")
                    Affichage.EntreePourContinuer()
                
                else:
                    Sove.ModifieDechetsDansSove("Enleve","Essence Dorée",1)
                    numero_de_rumeur_entendue = random.choice(liste_de_rumeurs_possibles)
                    rumeur = LISTERUMEURS[numero_de_rumeur_entendue]
                    print("...et entendez quelque chose d'intéressant alors que vous finissez votre verre !")
                    Affichage.EntreePourContinuer()
                    Sove.ModifieRumeursDansSove("Ajout", numero_de_rumeur_entendue)
                    print(rumeur)
                    Affichage.EntreePourContinuer()



            elif choix == 2:
                print("Vous trainez dans le saloon, mais la réceptioniste vous demande de sortir, si vous ne comptez pas prendre une consommation !")
                Affichage.EntreePourContinuer()

            elif choix == 3:
                print("Vous faites le point sur les rumeurs entendues :\n")
                liste_de_rumeurs_entendues = Sove.ModifieRumeursDansSove("Donne", None)

                for numero_de_la_rumeur in liste_de_rumeurs_entendues:
                    print(LISTERUMEURS[numero_de_la_rumeur])
                    print("")
                    
                print("\n")
                Affichage.EntreePourContinuer()

            elif choix == 4:
                break

                




class Affiche:

    def __init__(self):
        pass

    def EntreePourContinuer(self):
        input("(Appuyez sur entrée pour continuer)")
        ClearConsole()

    def ParleAuPnjNuit(self):
        print("Vous vous approchez d'une personne et l'interpelez.")
        self.EntreePourContinuer()
        while True:
            while True:
                try:
                    print("*Bonsoir.*\n\n")
                    print("1 - Le Colysée...")
                    print("2 - Le village est bien calme.")
                    print("3 - Qu'est ce que je peux faire, la nuit ?")
                    print("4 - Ca commence a devenir sacrément cher, les améliorations !")
                    print("5 - Le dernier étage...")
                    print("6 - C'est quoi, un Tout-Premier ?\n")
                    print("7 - Au revoir\n")
                    choix = int(input("Faites votre choix avec les nombres : "))
                    ClearConsole()
                    if choix in range(1,8):
                        break
                except ValueError:
                    ClearConsole()
            if choix == 1:
                print("Toi aussi tu veux voir les combats qui se déroulent la nuit, hein ?")
                Affichage.EntreePourContinuer()
                print("Eh bien, désolé de devoir calmer ta joie, mais ca n'est pas aussi simple.")
                Affichage.EntreePourContinuer()
                print("Depuis que ce gang de..de punk..a prit controle de la batisse, il faut respecter leurs règles.\nTout est devenu compliqué.")
                Affichage.EntreePourContinuer()
                print("Lorsque tu regarde les combats , tu te rendra vite compte qu'ils sont différents, a une chose près : leur talent.")
                Affichage.EntreePourContinuer()
                print("Les techniques utilisées sont variées, certe, mais elles sont du même niveau.\nLe gang fait ca pour que tu aie l'impression qu'il y a toujours quelque chose de neuf qui se passe, j'imagine.")
                Affichage.EntreePourContinuer()
                print("Et quand tu a vu toute les techniques d'un même niveau ?\nTu te retrouve bloqué a l'exterieur, a devoir payer quelques rares materiaux pour augmenter ton *grade*, afin de voir des matchs d'une plus grande intensité.")
                Affichage.EntreePourContinuer()
                print("En clair, tu ne peut pas voir les matchs du troisieme grade si tu n'a pas vu tout les matchs du premier et deuxieme grade.\Tu vois ou je veux en venir ?")
                Affichage.EntreePourContinuer()
                print("Si tu veux regarder les matchs du colysée la nuit, il faut que tu regarde tout les matchs disponible la journée.\nTu pourra alors augmenter ton grade afin de voir les matchs de haut niveaux qui se déroulent maintenant.")
                Affichage.EntreePourContinuer()
                print("C'est cher, oui, mais si tu a réussi a arriver ici, c'est que tu dois etre assez riche en materiau pour te le permettre !\nOu peut etre fais tu partie de ces sans-abris qui jonchent les rues piétonnes et les bancs du quartier commercial, ayant vendu toute tes ressources pour arriver a voir la Nuit ?")
                Affichage.EntreePourContinuer()
            elif choix == 2:
                print("Effectivement.\nLe prix d'une nuit dans un hotel ou une maison est si cher, il agit comme une barrière naturelle qui empeche tout le monde de venir ici.")
                Affichage.EntreePourContinuer()
                print("Mais ne pense pas un seul instant être dans le monde des riche : certains donnent tout ce qu'ils ont pour pouvoir voir ce ciel étoilé.\nIl y a même un buisness qui emmene certaines personnes passer quelques années ici, puis les ramènent de force dans le Jour !")
                Affichage.EntreePourContinuer()
                print("Faire l'experience du calme et de la tranquilité avant d'être abruptement ramené devant le soleil implacable, ca en brise certains.")
                Affichage.EntreePourContinuer()
            elif choix == 3:
                print("Eh bien, il y a d'abord le Colysée au Nord, qui propose des combats bien plus avancés ou se produisent des aventuriers extremement puissants.")
                Affichage.EntreePourContinuer()
                print("Au Sud, tu peut entrer dans la Banque qui y possède une succursale, pour échanger des materiaux ou augmenter ton matos.\nSi tu a de la chance, tu pourra peut etre même voir la Shamane dans le Temple a l'extreme Sud.\nOn dit que c'est une Tout-Première, alors ne te la met pas a dos !")
                Affichage.EntreePourContinuer()
                print("A l'Ouest, il n'y a rien d'interressant.\nQuoique...le Fabricateur n'est pas présent dans cette version des Champs du Crépuscule.\nC'est quelque chose , non ?")
                Affichage.EntreePourContinuer()
                print("A l'est, l'Hotel est la seule batisse ouverte.\nTu peux aller y passer la nuit, ou commander un verre et écouter les gens parler.")
                Affichage.EntreePourContinuer()
                print("Mon petit doigt me dit que les rumeurs la nuit doivent être bien plus excitantes que celles prononcées la journée...")
                Affichage.EntreePourContinuer()
            elif choix == 4 :
                print("Les améliorations ?")
                Affichage.EntreePourContinuer()
                print("Les améliorations...")
                Affichage.EntreePourContinuer()
                print("Les améliorations !")
                Affichage.EntreePourContinuer()
                print("Tu fais partie de ces gens qui fondent leurs espoirs sur les aventuriers qui arrivent ?")
                Affichage.EntreePourContinuer()
                print("Je trouve ca un peu bête, surtout qu'au final, tu perd tes ressources si ils ne dépassent pas le 3eme étage.\nMoi par exemple, j'ai fondé ma fortune sur le buisness des prêts en materiaux.")
                Affichage.EntreePourContinuer()
                print("Ca , ca a de l'avenir !")
                Affichage.EntreePourContinuer()
                print("Maintenant que j'y pense, qu dernier gala de charité du Directeur de la Banque, il y avait un objet proposé qui pourrait être interressant pour les gens comme vous...")
                Affichage.EntreePourContinuer()
                print("C'était une amulette, et une espece de pièce en or massif...qui permettait d'augmenter la chance de récuperer des materiaux sur les monstres ?\nPersonne ne l'a acheté, donc ca devrait toujours etre en vente au service objet de la banque.")
                Affichage.EntreePourContinuer()
                print("Hum? On vous refuse l'entrée ?")
                Affichage.EntreePourContinuer()
                print("C'est normal, il faut un espece de pass vip pour en bénéficier.\nSuffit de faire une faveur au Directeur, et le tour est joué !")
                Affichage.EntreePourContinuer()
                print("Je crois qu'il passe ses journée dans le jardin de son manoir, dans le quartier résidentiel, le jour.")
                Affichage.EntreePourContinuer()
                print("Le pauvre bougre profiterait bien d'un animal de companie, ou même d'une bête.\nPeut importe son apparence, il arriverait meme a dresser une immondicitée abobinable sur lesquels les dieux eux mêmes auraient experimentés !")
                Affichage.EntreePourContinuer()
                print("...")
                Affichage.EntreePourContinuer()
                print("...je sais pas pourquoi j'ai dis ca...")
                Affichage.EntreePourContinuer()
            elif choix == 5:
                print("Personne n'a battu le Colyseum, donc je ne pourrait pas te dire si il existe !\nPar contre il existe une théorie surprenante sur son existance.")
                Affichage.EntreePourContinuer()
                print("Dans le Colyseum, on ne peut voir que 8 boss, sans compter les variations du Chevalier Pourpre et du Roi Déchu.")
                Affichage.EntreePourContinuer()
                print("Sachant que les boss et les étages eux même changent entre les assauts, un aventurier devrait pouvoir tomber sur n'importe quel boss a chaque fois qu'il entre dans ce donjon maudit.")
                Affichage.EntreePourContinuer()
                print("Donc si il n'y a que 8 boss dans le roulement des boss possibles, il devrait n'y avoir que 7 étages, n'est ce pas ?")
                Affichage.EntreePourContinuer()
                print("Mais d'après le Cartographe, l'algorithme qu'il a créé pour fabriquer ses cartes est théoriquement valable pour 11 étages !")
                Affichage.EntreePourContinuer()
                print("Alors, 8 ou 11 ?")
                Affichage.EntreePourContinuer()
                print("Je vous laisserait a vos réflexions sur ce petit bout de trivia connu seulement par des gens exceptionnels :")
                Affichage.EntreePourContinuer()
                print("Les fresques que l'on trouve assez rarement montrent assez souvent une batisse divine qui correspond assez bien au panthéon divin, la divine maison abritant toute les divinités que l'humanitée a un jour priée.\nLes écrits parlent de centaines de milions d'étages contenus dans la petite ile flottante.")
                Affichage.EntreePourContinuer()
                print("Et devinez ce que le cartographe a trouvé dans son algorithme ?")
                Affichage.EntreePourContinuer()
                print("Des milions de petites variables, inutilisées dans le modèle actuel du Colyseum.")
                Affichage.EntreePourContinuer()
                print("Alors laissez moi vous poser la question :")
                Affichage.EntreePourContinuer()
                print("Qu'est ce véritablement que le dernier étage ?")
                Affichage.EntreePourContinuer()
                print("Si cette réflexion vous interesse, alors trouvez un moyen d'explorer la batisse de fond en comble.")
                Affichage.EntreePourContinuer()
            elif choix == 6:
                print("C'est simplement le nom que l'on donne aux tout-premiers aventurier arrivés aux Champs du Crépuscule.")
                Affichage.EntreePourContinuer()
                print("Bien sur, au début, ils n'étaient pas des aventuriers mais simplement le peuple qui avait été enfermé ici par le Roi Déchu.")
                Affichage.EntreePourContinuer()
                print("Mais ca n'a plus beaucoup d'importance ici, pas vrai ?")
                Affichage.EntreePourContinuer()
                print("Après avoir vécu autant de temps ici, ils sont devenus, fous, aigris, ou plein d'une sagesse insondable qui n'est accessibles qu'a celles et ceux qui seraient assez compétent pour recevoir et décrypter cette sagesse.")
                Affichage.EntreePourContinuer()
                print("Et pour ceux qui ne sont pas ici ?")
                Affichage.EntreePourContinuer()
                print("Tu levs trouvera dans les champs alentours, aussi vivants que des zombies, a chercher une mort de l'égo qui ne viendra jamais.")
                Affichage.EntreePourContinuer()
                print("Pour l'instant, j'en connais deux : la chamane du temple au Sud, et...")
                Affichage.EntreePourContinuer()
                print("...")
                Affichage.EntreePourContinuer()
                print("Non.\nCa ne me reviens pas.")
                Affichage.EntreePourContinuer()
            elif choix == 7:
                print("Bonne soirée !")
                self.EntreePourContinuer()
                break


    def ParleAuPnj(self):
        print("Vous vous approchez d'une personne et l'interpelez.")
        self.EntreePourContinuer()
        while True:
            while True:
                try:
                    print("*Hey ! Qu'est ce que je peux faire pour toi l'ami ?*\n\n")
                    print("1 - On est ou ?")
                    print("2 - Comment je suis arrivé là ?")
                    print("3 - Qu'est ce que je peux faire ?")
                    print("4 - Un type bizarre a créé la nuit ?")
                    print("5 - Le quatrième étage...")
                    print("6 - Au revoir\n")
                    choix = int(input("Faites votre choix avec les nombres : "))
                    ClearConsole()
                    if choix in range(1,7):
                        break
                except ValueError:
                    ClearConsole()
            if choix == 1:
                print("Ici ? C'est les champs du crépuscule.\nPlus précisément, tu es au centre du village, sur la stèle du renouveau.")
                self.EntreePourContinuer()
                print("C'est l'endroit ou presque toute les personnes qui ont péri dans le Coliseum se retrouvent.")
                self.EntreePourContinuer()
                print("Enfaite, on lui a donné ce nom car un mage a trouvé que cet endroit était similaire a un autre, illustré dans ses bouquins de magie.\nQuelque chose a propos d'un domaine ou habitait les dieux du Nirvana, ou qui s'en rapproche.\nEt puis le Village, c'est parce que personne n'a trouvé de meilleur nom !")
                self.EntreePourContinuer()
                print("Et puis la stèle du renouveau, c'est parce que..eh bien..c'est la que nous revenons a la vie ?\nMétaphoriquement parlant, bien sur.")
                self.EntreePourContinuer()
                print("Mais j'y pense, si tu me pose cette question, c'est que tu dois être nouveau !\nSurtout ne panique pas, et demande moi autre chose si tu veut !")
                self.EntreePourContinuer()
            elif choix == 2:
                print("Tu ne t'ai jamais demandé pourquoi personne n'était jamais revenu du Coliseum ?\nJe veux dire, tu as terminé le premier étage et battu le clone d'obsidienne, son boss.\nSon boss qui était présent quand tu es arrivé.\nCa voudrait dire quoi ?\nQue personne n'a jamais battu le premier étage ? Que le clone d'obsidienne a été le bourreau de toute les personnes qui sont entrée, sauf toi et toi seulement ?")
                self.EntreePourContinuer()
                print("La véritée est tout autre.")
                self.EntreePourContinuer()
                print("Pareil a un organisme vivant, le Coliseum assimile tout ce qui rentre a l'interieur.\nEnsuite, après la mort des corps étrangers, il se passe un triage.")
                self.EntreePourContinuer()
                print("Si tu n'es pas assez fort, tu te fait digerer. Ton énergie vitale et ton mana servira au bon fonctionnement de la structure.")
                print("Si tu a dépassé un certain point, alors tu es digéré jusqu'a un certain point. Tes compétences, charactéristiques, et meme ton corps n'existe plus, mais ton ame survie et est amenée ici.")
                print("Et si tu es assez fort, alors tu deviens un des acteurs principaux du Coliseum : Un boss.")
                self.EntreePourContinuer()
                print("Seulement, pour que le système marche, il faut que les acteurs soient, d'une certaine manière, immortels. Si ils mourraient au bout d'une seule représentation, ca serait pas rentable.")
                self.EntreePourContinuer()
                print("Ainsi donc, la même énergie qui est absorbée du corps des challengers...")
                print("...sert a invoquer des monstres, garder l'intégritée de l'étage, et ranimer les boss !")
                self.EntreePourContinuer()
                print("La seule chose qu'on a toujours pas réussi a comprendre, c'est pourquoi on nous laisse quand meme sous forme d'âme, si on ne peut plus contribuer a l'entropie du système...")
                self.EntreePourContinuer()
            elif choix == 3:
                print("Eh bien, un peu tout ce que tu veux !")
                self.EntreePourContinuer()
                print("Tu es une ame maintenant, tu as tout le temps du monde.")
                print("Mais en gros, voila les activités principales du Village :")
                self.EntreePourContinuer()
                print("A l'Ouest, c'est la déchetterie. C'est un des endroits les plus importants.")
                self.EntreePourContinuer()
                print("Tout ce que tu possédait sur toi, matériaux, artefacts, golds; ne peuvent pas étre completement absorbé par le Coliseum.")
                print("Et c'est la que tu peut retrouver ton équipement sous forme de materiau.")
                print("Va donc y faire un tour, parce que tout ici se paye en materiau. On ne peut rien changer a l'endroit lui meme, étant des ames immaterielles.\nCepandant, pour une raison obscure, on peut utiliser les materiaux pour faire maison et autre, même si on en a plus vraiment besoin.")
                self.EntreePourContinuer()
                print("Ya aussi un fabricateur la bas, afin de combiner les materiaux entre eux, mais si on met pas les bons materiaux ils sont détruit.\nPersonne ne se souvient des recettes possibles, donc c'est devenu plutot inutile.")
                self.EntreePourContinuer()
                print("Au Nord, c'est le Coliseum.")
                self.EntreePourContinuer()
                print("Tu sais, quand tu te bat, tu peut voir des figures fantomatiques dans les gradins ?\nBah c'est nous.\nD'une certaine manière, on peut accéder au coliseum par la réplique de colisée au Nord, et ainsi assister aux combats.")
                print("Seul problème, un groupe en a prit le controle, et maintenant on doit payer avec des materiaux si on veut assister aux matchs.\nC'est litteralement notre seule source de divertissement, alors on paye et puis c'est tout.")
                self.EntreePourContinuer()
                print("Au Sud, c'est la partie commerciale.")
                self.EntreePourContinuer()
                print("Tu pourrais penser, au vu du nom, que c'est un endroit ou tu peut acheter des choses pour toi, mais enfaite c'est tout le contraire.")
                self.EntreePourContinuer()
                print("Tu peut payer des materiaux pour acheter ou construire des choses qui se retrouveront a l'étage 1 pour les futurs challengers.\nD'une certaine manière, tu les sponsorise !")
                self.EntreePourContinuer()
                print("Comment ils font ca ?\nCertains parlent d'une grande figure habillée avec des habits de majordome, mais on sait pas vraiment.\nPourquoi ils font ca ?\nL'ennui peut etre, qu'en sais-je.")
                self.EntreePourContinuer()
                print("A l'Est, c'est le quartier résidentiel.")
                self.EntreePourContinuer()
                print("Tu peut y trouver des maisons style bidonville dans lesquelles seul les plus riches peuvent être, quelques gens importants, et même un hotel.")
                print("Pourquoi des fantomes qui n'ont plus besoin de dormir voudraient payer des materiaux pour dormir dans une chambre d'hotel ?\nEh bien c'est là que ca devient interessant.")
                self.EntreePourContinuer()
                print("Je te la fait courte : Si tu dors dans un lit, dans une maison, tu te fait téléporter dans le même endroit, mais la nuit.")
                self.EntreePourContinuer()
                print("Apparemment, c'est un type bizarre qui a fait ca pour encourager les gens a continuer de vivre normalement : boire manger dormir, même si ca a pas de sens pour un fantome.")
                print("Et la nuit, les marchandises se font plus rares et précieuses, tandis que les combats se font plus intenses !")
                self.EntreePourContinuer()
                print("Enfin, si d'ici quelques millions d'années la folie finit par te prendre, dans cet endroit sans substance ou le soleil ne se couche jamais...")
                self.EntreePourContinuer()
                print("Tu peut toujours aller errer dans les champs en bordure de ville, en esperant un jour perdre la boule .")
                self.EntreePourContinuer()
                print("C'est ce qui se rapproche le plus de la mort, après tout.")
                self.EntreePourContinuer()
            elif choix == 4 :
                print("Je connais pas trop les détails, va donc écouter un peu les rumeurs des gens au saloon : ils s'y connaissent mieux que moi !")
                print("Après c'est pas grand chose pour toi, la nuit. \nMais a force de voir toujours les memes personnes, les memes endroits, la meme chaleur, et le meme soleil pendant des centaines d'années...")
                self.EntreePourContinuer()
                print("Voir la nuit, c'est un changement très apprécié. Bien plus que ca : c'est de l'espoir.")
                self.EntreePourContinuer()
            elif choix == 5:
                print("Il n'y avait pas de clé au quatrième étage ?")
                self.EntreePourContinuer()
                print("Hum...")
                self.EntreePourContinuer()
                print("C'est vrai que ca fait tellement longtemps que quelqu'un n'est pas venu du quatrième étage... j'ai presque oublié qu'il existe !")
                print("En tout cas, si il y a bien une personne qui peut t'aider pour ce truc bizarre, c'est bien la folle du quartier résidentiel ! Elle vit dans la tour tordue avec pleins de cristaux a l'interieur !")
                print("Et meme si elle n'y est pas, elle devrait avoir laissé un truc interconnecté à elle, pour pouvoir la retrouver !\nElle parlait tout le temps de trucs hol.. hillos..hollistique ?\nUn sacré phénomène !")
                self.EntreePourContinuer()
                print("Après, ca devrait pas avoir beaucoup d'interet pour toi...\nTu veut sponsoriser quelqu'un ?")
                self.EntreePourContinuer()
            elif choix == 6:
                print("A plus !")
                self.EntreePourContinuer()
                break

    def ParlerAvecLeDirecteur(self):
        liste_de_tags =  Sove.ModifieTagsDansSove("Donne",None)
        liste_des_artefacts_debloque = Sove.ModifieArtefactDansSove("Donne",None)
        if not "Carte VIP" in liste_de_tags and "Ecaille de la Bête" in liste_des_artefacts_debloque:
            print("Alors que vous vous approchez du jardin du banquier, vous apercevez la Bete que vous avez libéré entrain de s'approcher doucement du Directeur.")
            Affichage.EntreePourContinuer()
            print("Vous commencez a courir dans sa direction, afin de le prévenir de l'arrivée imminente de la chose, mais c'est trop tard : La Bete se jette sur le pauvre homme...")
            Affichage.EntreePourContinuer()
            print("...et lèche son visage, alors que l'homme rigole.")
            Affichage.EntreePourContinuer()
            print("La Bête vous regarde, tourne la tête, et s'approche de vous en trotinant.")
            Affichage.EntreePourContinuer()
            print("*Hey l'ami !*")
            Affichage.EntreePourContinuer()
            print("L'Homme s'approche de vous et vous tend la main.")
            Affichage.EntreePourContinuer()
            print("*J'ai vu via le Coliseum que c'est toi qui a récupéré la carte afin de libérer mon ami, et que tu a meme battu le boss pour qu'il puisse s'échapper !*")
            Affichage.EntreePourContinuer()
            print("Vous serrez la main fantomatique du directeur, alors que la Bete se frotte a vos jambes.")
            Affichage.EntreePourContinuer()
            print("*Tu vois, tout ce temps, je m'étais fait a ma fortune, mais je n'avais personne avec qui partager la richesse d'une simple accolade.*")
            print("*Alors quand Neil est arrivé ici, et que tout le monde le fuyait...*")
            Affichage.EntreePourContinuer()
            print("*...je lui ai donné sa chance.*")
            Affichage.EntreePourContinuer()
            print("*Et maintenant regarde ! Il est aussi inofensif qu'une bébé chiot, et j'ai enfin une raison de me balader dans mon grand jardin !*")
            Affichage.EntreePourContinuer()
            print("*Je voulais te remercier d'une manière ou d'une autre d'avoir libéré Neil, alors voici : une carte VIP que tu peut utiliser dans ma banque pour acheter nos items exclusifs !*")
            Affichage.EntreePourContinuer()
            print("Le Directeur vous tend une carte dorée.\nVous obtenez la Carte VIP ! Vous pouvez maintenant acheter et upgrader les objets exclusifs de la Banque !")
            Sove.ModifieTagsDansSove("Ajout","Carte VIP")
            Affichage.EntreePourContinuer()
            print("*Comme pour les autres marchand, l'aventurier que tu sponsorisera avec ces items devrait pouvoir les trouver directement au premier étage du Coliseum.*")
            Affichage.EntreePourContinuer()
            print("*Passe nous rendre visite quand tu le souhaite !*")
            Affichage.EntreePourContinuer()
        elif "Carte VIP" in liste_de_tags:
            while True:
                while True:
                    try:
                        print("Neil et le Directeur jouent gaiement dans le jardin de la demeure.\n\n")
                        print("1 - Parler au Directeur")
                        print("2 - Caresser Neil")
                        print("3 - Jouer avec eux")
                        print("4 - Dire au revoir\n")
                        choix = int(input("\nFaites votre choix avec les nombres : "))
                        ClearConsole()
                        if choix in range(1, 5):
                            break
                    except ValueError:
                        ClearConsole()
                if choix == 4 :
                    print("Vous saluez les deux personnages et sortez du Jardin.")
                    Affichage.EntreePourContinuer()
                    break
                elif choix == 1:
                    print("*L'un des avantages d'être aussi riche ici, c'est qu'on peut litteralement tout construire avec sa richesse.*")
                    print("*Chaque materiau a son utilité !*")
                    Affichage.EntreePourContinuer()
                    print("*Par exemple, tu vois quand je suis arrivé ? Les essences dorées ne servaient pas a grand chose.*")
                    Affichage.EntreePourContinuer()
                    print("*Ce n'était qu'une ressource supplementaire qui venait encombrer la décharge, vu que chaque aventuriers mourraient avec au minimum 100 golds.*")
                    Affichage.EntreePourContinuer()
                    print("*Eh bien moi, ces essences, j'ai passé un bon nombre d'année a les toucher, a les casser, a les modifier.*")
                    print("*A force, j'ai trouvé un moyen d'en faire une sorte de colle qui peut faire tenir les materiaux ensembles ! Voila pourquoi toute les maisons brillent ! Leurs joints sont litérallement fait d'or !*")
                    Affichage.EntreePourContinuer()
                    print("*Et d'après mon experience, je suis sûr qu'on pourrait faire marcher le fabricateur et combiner cette colle avec un éclat de cloche pour en faire une petite cloche...*")
                    Affichage.EntreePourContinuer()
                    print("*Pourquoi je ne le fais pas ? Ca ne m'interesse pas de sponsoriser. Je suis très bien comme je suis actuellement !*")
                    Affichage.EntreePourContinuer()
                elif choix == 2:
                    print("Vous approchez une main hésitante de la carapace chitineuse de Neil, et elle se met a vibrer.")
                    Affichage.EntreePourContinuer()
                    print("Votre main s'enfonce alors dans une texture semblable a un nuage de coton, et Neil ferme ses yeux.")
                    Affichage.EntreePourContinuer()
                    print("Vous vous laissez prendre au jeu, et ne retirez votre main qu'après quelques minutes aussi étranges que raffraichissantes.")
                    Affichage.EntreePourContinuer()
                    print("Neil semble avoir apprécié l'experience !")
                    Affichage.EntreePourContinuer()
                    liste_de_tags =  Sove.ModifieTagsDansSove("Donne",None)
                    if not "Neil" in liste_de_tags:
                        print("Neil vous regarde dans les yeux avec insistance !")
                        Affichage.EntreePourContinuer()
                        print("Vous plongez votre regard dans le sien et voyez des formes étranges,")
                        Affichage.EntreePourContinuer()
                        print("Des couleurs incroyables, des mots incompréhensibles,")
                        Affichage.EntreePourContinuer()
                        print("Des notions ésot-[SYSTEME INTRUSION EN COURS]")
                        Affichage.EntreePourContinuer()
                        print("[TENTATIVE DE REJET D'INTRUSION ECHOUEE]")
                        Affichage.EntreePourContinuer()
                        print("[REECRITURE URE URE CODDDDDDEEE]")
                        Affichage.EntreePourContinuer()
                        print("[MESSAGE ADMINTILISATEURINCONNU ERREUR MESSAGE]")
                        print("Vous avez débloqué [Neil] en tant que personnage jouable !")
                        Sove.ModifieTagsDansSove("Ajout","Neil")
                        print("[FIN MESSAGE ADMINTILISATEURINCONNU ERREUR FIN MESSAGE]")
                        Affichage.EntreePourContinuer()
                        print("[SYSTEME : AUCUNE INTRUSION DETECTEE]")
                        Affichage.EntreePourContinuer()
                        print("Neil vous lance un sourire mystérieux, et retourne jouer avec son nouvel ami.")
                        Affichage.EntreePourContinuer()

                elif choix == 3:
                    print("Vous prenez un frisbee et le jettez dans les airs.")
                    Affichage.EntreePourContinuer()
                    print("Le Directeur et Neil se battent pour essayer de l'avoir en premier...")
                    Affichage.EntreePourContinuer()
                    numero_aleatoire = random.randint(0,100)
                    if numero_aleatoire < 50:
                        print("...et c'est le Directeur qui le prend dans ses mains !")
                    else:
                        print("...et c'est Neil qui l'attrape dans sa bouche !")
                    Affichage.EntreePourContinuer()
                    print("Vous riez aux éclats !")
                    Affichage.EntreePourContinuer()
        else:
            print("Vous vous approchez du jardin d'une grande demeure")
            Affichage.EntreePourContinuer()
            while True:
                while True:
                    try:
                        print("Un homme est assis devant une partie d'échec.\n\n")
                        print("1 - Parler a l'homme")
                        print("2 - Jouer contre l'homme")
                        print("3 - Repartir")
                        choix = int(input("\nFaites votre choix avec les nombres : "))
                        ClearConsole()
                        if choix in range(1, 4):
                            break
                    except ValueError:
                        ClearConsole()
                if choix == 3 :
                    print("Vous saluez l'homme et sortez du Jardin.")
                    Affichage.EntreePourContinuer()
                    break
                elif choix == 1:
                    print("*J'imagine que les gens de cette génération ne connaissent pas les règles d'usage ?*")
                    Affichage.EntreePourContinuer()
                    print("*Je suis le Directeur. Je possède la Banque dans le quartier commercial.*")
                    Affichage.EntreePourContinuer()
                    print("Le Directeur lève les yeux de sa partie et vous regarde.")
                    Affichage.EntreePourContinuer()
                    print("*Ce n'est pas suffisant ? Je suis un homme riche, et seul. L'un de ces deux faits est vrai par choix, et l'autre, par obligation.*")
                    Affichage.EntreePourContinuer()
                    print("Le Directeur redirige son regard sur sa partie.")
                    Affichage.EntreePourContinuer()
                    print("*Et maintenant , ayez l'obligation de sortir de chez moi.*")
                    Affichage.EntreePourContinuer()
                elif choix == 2:
                    print("*Je n'ai pas besoin de compagnie, encore moins de la votre.*")
                    Affichage.EntreePourContinuer()
                    print("*Si vous voulez faire quelque chose, trouvez moi plutot un animal de companie, car je préfère leur présence a la votre.*")
                    Affichage.EntreePourContinuer()
                    print("*Même une bête ferait l'affaire !*")
                    Affichage.EntreePourContinuer()


    def ShowDeath(self, game_is_over=False):
        if not game_is_over and Player.numero_de_letage < 5:
            StopAllMusic()
            print("[AVENTURE TERMINE]")
            Affichage.EntreePourContinuer()
            print("[CALCUL DE LA CONTRIBUTION DU PERSONNAGE EN COURS...]")
            Affichage.AfficheAvecUnTempsDattente(3)
            print("[CALCUL TERMINE]")
            Affichage.EntreePourContinuer()
            print("[CONTRIBUTION DU PERSONNAGE INSUFFISANTE]")
            Affichage.EntreePourContinuer()
            print("[REALISATION DU DESIR REFUSEE]")
            Affichage.EntreePourContinuer()
            print("[MORT VALIDEE]")
            Affichage.EntreePourContinuer()
        PlayMusic("ending")
        print(
            "|                                                                                         "
        )
        print(
            "|       .-.             .                                                                 "
        )
        print(
            "|      (0.0)                                 +                 .               _.._       "
        )
        print(
            "|       |m|                                                                  .' .-'`      "
        )
        print(
            "|       |=|                                                                 /  /          "
        )
        print(
            "|       |=|                x                       +                     x  |  |          "
        )
        print(
            "|   /|__|_|__|\                                                             \  '.___.;    "
        )
        print(
            "|  (    ( )    )  *                                        x                 '._  _./     "
        )
        print(
            "|   \|\/\\'/\/|/         .                    .                                  ``        "
        )
        print(
            "|     |  Y  |                                                                             "
        )
        print(
            "|     |  |  |                          .                        *                         "
        )
        print(
            "|     |  |  |                                                                             "
        )
        print(
            "|    _|  |  |___________         .                              __________________________"
        )
        print(
            "| __/ |  |  |\          \             _________________________/                          "
        )
        print(
            "|/  \ |  |  |  \         \  _________/                                  88888888          "
        )
        print(
            "|   __|  |  |   |__       \/                                          888888888888        "
        )
        print(
            "|/\/  |  |  |   |\ |______/                                          88888\88/88888       "
        )
        print(
            "| <   +\ |  |\ />  \\'                         ______ ______          888888yy888888       "
        )
        print(
            "|  >   + \  |  \    |                       _/      Y      \_         88888||88888        "
        )
        print(
            "|        + \|+  \  < \                     // Game  | ~~ ~  \\\         88  ||  88         "
        )
        print(
            "|  (O)      +    |    )                   // ~ ~ ~~ |   Over \\\            ||             "
        )
        print(
            "|   |             \  /\                  //________.|.________\\\           ||             "
        )
        print(
            "| ( | )   (o)      \/  )                `----------`-'----------'          ||             "
        )
        print(
            "|_\\\|//__( | )______)_/                                                    ||             "
        )
        print(
            "|        \\\|//                                        Appuyez sur entrée pour terminer.  "
        )
        input(
            "|_________________________________________________________________________________________"
        )
        if Player.numero_de_letage >= 4 and not game_is_over:
            Player.player_tags.append("Fantome")
        else:
            sys.exit()

    def AfficheGacha(self, recompense):
        PlaySound("gacha")
        print("Le mutagène se révèle...")
        Affichage.AfficheAvecUnTempsDattente(1.7)
        print("Le mutagène se révèle être...")
        Affichage.AfficheAvecUnTempsDattente(1.7)
        print("Le mutagène se révèle être un...")
        Affichage.AfficheAvecUnTempsDattente(1.5)
        time.sleep(0.9)
        print(f"Le mutagène se révèle être un [{recompense}] !")
        self.EntreePourContinuer()
        PlayMusicDeLetage()

    def IntroBoss(self, commentaire):
        print(commentaire)
        self.EntreePourContinuer()

    def AfficheMegaTirage(self, commentaire):
        print(commentaire)
        self.EntreePourContinuer()

    def AfficheLongChargement(self):
        print("Récupération en cours, veuillez patienter...")
        print("(Temps d'attente estimé a 1 minute)")
        time.sleep(60)
        ClearConsole()

    def AfficheIntroCombat(self):
        if Player.stigma_positif == "Débrouillarde":
            print(
                "Vous vous approchez de l'arène et trouvez des déchets et autres bidules sur le sol..."
            )
            self.EntreePourContinuer()
            nombre_aleatoire = random.randint(0, 100)
            if nombre_aleatoire <= 20:
                nom_de_litem = GetRandomItemFromList(LISTEITEM)
                print(
                    "...et une idée germe dans votre esprit !"
                    f"\nVous rassemblez alors les objets entre eux et créez l'objet : {nom_de_litem} !"
                )
                Player.items_possedes[nom_de_litem] += 1
            else:
                print("...mais aucune idée ne vous vient a l'esprit.")
            self.EntreePourContinuer()
        if Player.stigma_positif == "Cueilleuse":
            print(
                "Vous vous approchez de l'arène et trouvez de curieuses plantes dans les interstices entre les briques..."
            )
            self.EntreePourContinuer()
            nombre_aleatoire = random.randint(0, 100)
            if nombre_aleatoire <= 50:
                nom_de_litem = GetRandomItemFromList(LISTEITEMDEFENCE)
                print(
                    "...et une idée germe dans votre esprit !"
                    f"\nVous cueillez alors les monceaux biologiques, appliquez vos techniques de druidesses, et créez l'objet : {nom_de_litem} !"
                )
                Player.items_possedes[nom_de_litem] += 1
            else:
                print("...mais rien ne peut etre fait avec.")
            self.EntreePourContinuer()
        print(
            "Vous rentrez dans l'arène et jettez un coup d'oeil aux tribunes vides, avant de frapper le sol de votre pied."
            "\nAussitôt, une vague bruyante de spectateurs fantomatiques apparaissent, et un ennemi apparait devant vous."
        )
        self.EntreePourContinuer()

    def AffichePlusDennemis(self):
        print(
            "Vous rentrez dans l'arène et jettez un coup d'oeil aux tribunes vides, avant de frapper le sol de votre pied."
            "\nMais rien ne se passe.\nIl n'y a plus personne pour vous affronter."
        )
        if not Player.boss_battu:
            print("A part le boss.")
        if not Player.red_coin_recu_par_extermination and Player.boss_battu:
            print(
                "Un spectateur fantomatique amusé par votre désir d'extermination vous envoie un cadeau depuis les gradins, avant de disparaitre."
            )
            self.EntreePourContinuer()
            print("Vous gagnez un Red Coin !")
            Player.nombre_de_red_coin += 1
            Player.red_coin_recu_par_extermination = True
        self.EntreePourContinuer()

    def AfficheIntroCombatBoss(self):
        if Player.nom_de_letage == "Limbes Flétrissants":
            print("Vous vous approchez du terrain vide, et votre tatouage réagit.")
            self.EntreePourContinuer()
            print("Quelqu'un s'approche.")
            self.EntreePourContinuer()
        else:
            print(
                "Vous rentrez dans l'arène et jettez un coup d'oeil aux tribunes vides."
                "\nVotre tatouage en forme de clé se met a briller.\nVous tendez votre main en direction de la grille de métal ancien, et celle ci brille a son tour."
                "\nAussitôt, une vague silencieuse de spectateurs fantomatiques apparaissent."
            )
            self.EntreePourContinuer()
            if ("Regard de la Bête" in Player.liste_dartefacts_optionels and (not "Âme de la Bête" in Player.liste_dartefacts_optionels) 
            and (not "Âme de la Bête" in Player.liste_dartefacts_optionels)) : 
                print("La grille s'ouvre.\nLe Maitre des lieux... s'effondre ?")
                self.EntreePourContinuer()
                print("Vous pouvez voir le boss, haletant, devant le cadavre de la bête que vous avez libéré de sa capsule, un peu plus tôt.")
                self.EntreePourContinuer()
                print("Vous vous approchez de la chose par terre, et Zeroual s'empresse d'absorber son âme.")
                self.EntreePourContinuer()
                print("Vous obtenez l'artefact [Âme de la Bête] !")
                print("Un reste de quelque chose que vous ne pouvez pas décrire.\nVous gagnez 5 points de force !")
                self.EntreePourContinuer()
                FloorMaker.GiveRandomArtefact("Âme de la Bête","Don")
                Player.points_de_force += 5
                Player.nombre_de_monstres_tues += 1
                print("Le boss finit de reprendre son souffle, et commence son speech, malgrès ses blessures.")
                self.EntreePourContinuer()
                Player.player_tags.append("Boss Blessé")
            else:
                print("La grille s'ouvre.\nLe Maitre des lieux s'approche.")
                self.EntreePourContinuer()
        if (Player.numero_de_letage != 8) and (Player.nom_de_letage not in ["Jungle Cruelle"]):
            PlayMusic("boss_introV2")
        liste_commentaire = []
        if Player.numero_de_letage == 1:
            commentaire = "Une boule d'obsidienne flotte jusqu'à votre niveau, et une voix artificielle remplit l'arène."
            liste_commentaire.append(commentaire)
            commentaire = (
                "*SENTIENCE RECONNUE. INITIATION DU PROTOCOLE D'EXPLIQUATION ENCLENCHE*"
                "\n*POUR LES CRIMES SUIVANT CONTRE VOTRE ROI MALGRES SES ANNEES DE BONS ET LOYAUX SERVICES, VOUS VOILA CONDAMNE A LA PEINE DE MORT :*"
                "\n*TENTATIVE DE TRAHISON, TENTATIVE DE REGICIDE, TENTATIVE DE REBELLION, TENTATIVE DE REVOLUTION,*"
                "\n*AVOIR CRACHE SUR UN TABLEAU DU ROI, AVOIR EXPRIME DE LA DISSATISFACTION ENVERS LE ROI ACTUEL,*"
                "\n*AVOIR UN COMPORTEMENT SUSPECT PROCHE DE LA RESIDENCE DU ROI, AVOIR UN COMPORTEMENT SUSPECT PROCHE DE LA CAPITALE DU ROI,*"
                "\n*AVOIR UN COMPORTEMENT SUSPECT DANS LE ROYAUME DIRIGE PAR LE ROI, ET ENCORE 2324 AUTRES INFRACTIONS NON CITEE.*"
            )
            liste_commentaire.append(commentaire)
            commentaire = (
                "*QUESTIONS SOUVENT POSEES :*"
                "\n* - MAIS JE N'AI JAMAIS FAIT CELA !*"
                "\n* - CELA DOIT ETRE UNE ERREUR !*"
                "\n* - COMMENT PEUT ON SORTIR D'ICI ?*"
                "\n*UNE SEULE REPONSE : UN ROI JUSTE NE PUNIT PAS LES INNOCENTS.*"
                "\n*CONSIDEREZ VOTRE PRESENCE ICI COMME UNE PREUVE IRREFUTABLE DE VOTRE CULPABILITE.*"
                "\n\n*PROTOCOLE DEXPLIQUATION TERMINE*"
                "\n*PROTOCOLE DE COMBAT ENCLENCHE*"
            )
            liste_commentaire.append(commentaire)
            commentaire = (
                "La sphère bouge et se transforme en une copie conforme de vous, puis se met a parler :"
                "\n*Nous avions toujours dit qu'il fallait combattre le feu avec le feu !*"
            )
            liste_commentaire.append(commentaire)
        elif Player.numero_de_letage == 0:
            commentaire = "LOREM IPSUM"
            liste_commentaire.append(commentaire)
            commentaire = ("LOREM IPSUM")
            liste_commentaire.append(commentaire)
            commentaire = "LOREM IPSUM"
            liste_commentaire.append(commentaire)
            commentaire = ("LOREM IPSUM")
            liste_commentaire.append(commentaire)
            commentaire = "LOREM IPSUM"
            liste_commentaire.append(commentaire)
            commentaire = ("LOREM IPSUM")
            liste_commentaire.append(commentaire)
        elif Player.numero_de_letage == 9:
            commentaire = "LOREM IPSUM"
            liste_commentaire.append(commentaire)
            commentaire = ("LOREM IPSUM")
            liste_commentaire.append(commentaire)
            commentaire = "LOREM IPSUM"
            liste_commentaire.append(commentaire)
            commentaire = ("LOREM IPSUM")
            liste_commentaire.append(commentaire)
            commentaire = "LOREM IPSUM"
            liste_commentaire.append(commentaire)
            commentaire = ("LOREM IPSUM")
            liste_commentaire.append(commentaire)
        elif Player.numero_de_letage == 2:
            if Player.nom_de_letage == "Jungle Cruelle":
                StopAllMusic()
                commentaire = ("L'armure vide se rapproche de vous, et se met en position de combat.")
                liste_commentaire.append(commentaire)
                commentaire = ("Vous jettez un coup d'oeil au tentacule accroché a l'ennemi,"
                               " et vous rendez compte qu'elle n'est pas seulement accrochée, mais fusionnée avec l'armure et son précédent occupant...")
                liste_commentaire.append(commentaire)
                if "Lame Spectrale" in Player.liste_dartefacts_optionels:
                    commentaire = ("...que vous pouvez voir a peine respirer.\nLaisser le coeur de bois mourir n'aura donc pas suffit a sauver le pauvre homme.")
                    liste_commentaire.append(commentaire)
                    commentaire = ("...")
                    liste_commentaire.append(commentaire)
                    commentaire = ("Vous entendez une petite voix sortir avec peine du casque de l'ennemi :")
                    liste_commentaire.append(commentaire)
                    commentaire = (" . . . t  u  e   z     m      o       i      .       .            .            .")
                    liste_commentaire.append(commentaire)
                else:
                    commentaire = ("...dont vous apercevez les restes asséchés. La racine a pompé toute l'énergie du pauvre homme.")
                    liste_commentaire.append(commentaire)
                    commentaire = ("Ce n'est qu'une poupée de chair controllée par un systeme biologique malicieux.")
                    liste_commentaire.append(commentaire)
                    commentaire = ("Une simple...")
                    liste_commentaire.append(commentaire)
                    commentaire = ("...Coquille...")
                    liste_commentaire.append(commentaire)
                    commentaire = ("......vide.")
                    liste_commentaire.append(commentaire)
            else:
                commentaire = (
                    "Un chevalier en armure violette saute depuis le sommet de la tour et atterit en plein milieu de l'arène."
                    "\n*C'est toi le prochain traitre ?*"
                    "\nVous le regardez avec étonnement."
                )
                liste_commentaire.append(commentaire)
                commentaire = (
                    "*Fais pas semblant, je suis une bonne personne, je sais reconnaitre qui n'est ou n'est pas une menace pour le chateau.*"
                    f"\n*Toi par exemple, tu a du sang de monstre sur les mains.*\n*Je dirais que tu a massacré...{Player.nombre_de_monstres_tues} monstres.*"
                )
                liste_commentaire.append(commentaire)
                commentaire = (
                    "*Tu a gouté aux joies du combat, et tu en veux plus, toujours plus.*\n*Je fais confiance a mon flair pour ca. Il m'a sauvé la mise de très nombreuses fois.*"
                    "\n*Tu es une menace pour mon roi et sa sécuritée.*\n*Tu es une menace pour le royaume et son épanouissement.*"
                    "\n*Tu es une menace pour tout ceux que tu croisera sur ton chemin.*"
                    "\nIl se tourne alors vers les spectateurs."
                )
                liste_commentaire.append(commentaire)
                commentaire = (
                    "*Et quel piètre chevalier je serais si je n'arretais pas une vermine dans son genre, hein ?*"
                    "\nLe chevalier pourpre se tourne vers vous et sort une lame rongée par la rouille et la souillure."
                    "\n*Laisse tomber, l'affreux. La justice et le bien sont de mon coté. Tu n'a aucune chance de gagner.*"
                )
                liste_commentaire.append(commentaire)
                commentaire = "*Car tu vois...*"
                liste_commentaire.append(commentaire)
                commentaire = "*...je suis le Chevalier que les gens comme toi ne veulent pas rencontrer.*"
                liste_commentaire.append(commentaire)
        elif Player.numero_de_letage == 3:
            commentaire = (
                "L'arène se met alors a trembler, et le sable commence a s'écouler par les cotés."
                "\nDes blocs de roche, de bois et d'or commencent alors a apparaitre, et au milieu de tout ca, une bien étrange structure pentagonale surmontée d'un sarcophage et de 5 vases canopes."
            )
            liste_commentaire.append(commentaire)
            commentaire = (
                "Un examen plus approfondi de la salle révèle aussi des têtes empaillées et accrochées sur tous les murs de l'arène."
                "\n*Il faut toujours rendre la chose plus spectaculaire. Plus incroyable. C'est du travail, empailler les têtes. Tu aime ?*"
            )
            liste_commentaire.append(commentaire)
            commentaire = (
                "Le sarcophage se souleve alors et une forme vaguement humaine zébrée de lignes de coutures avec un masque de pharaon en sort."
                "\n*Le roi, dans sa folie, s'est emparé des cadavres de ses soi-disants ennemis qu'il a cousut entre eux. puis il a mit l'âme de son frère a l'interieur.*"
                "\n*Je suis un monstre, une atrocitée, mais sur laquelle il avait enfin le controle que son esprit malade requit.*\n*Un Roi des sables du sud que l'on a enfermé dans ce corps....* "
            )
            liste_commentaire.append(commentaire)
            commentaire = (
                "Les vases canopes commencent alors a leviter."
                "\n*Vois ce qu'il reste de la grande lignée qui précédait ce fou : des morceaux de chairs dans des vases magiques.*\n\n\n*Pitoyable.*\n\n"
                "\n*Mais bon. Trêve de bavardage. Il est temps que je t'acceuille comme il se doit.* "
            )
            liste_commentaire.append(commentaire)
            commentaire = "Le roi-monstre jette un coup d'oeil inquiet vers les spectateurs avant de se retourner vers vous et de prendre une pose extravagante."
            liste_commentaire.append(commentaire)
            commentaire = (
                "*Je te souhaite la bienvenue dans mon antre voyageur.*\n*Devant toi se trouve une folie engendrée par le plus malade des esprits : Moi même ! Le grand roi Amonrê !*"
                "\n*JE SUIS NE HOMME ET SI TU EST ASSEZ FORT, C'EST AUJOURDHUI QUE JE MOURRAI MONSTRE !*\n*APPROCHE DONC ET MONTRE MOI L'ETENDUE DE TA PUISSANCE !* "
            )
            liste_commentaire.append(commentaire)
        elif Player.numero_de_letage == 4:
            commentaire = (
                "Vous entendez le son d'un livre qui se ferme fort, et l'apparence de l'arène change brusquement. "
                "\nVous observez alors un bureau finement décoré et rempli d'étagères sur lesquelles sont négligement placés des livres de magie et de sortillèges."
                "\nAu milieu, une adolescente d'une quinzaine d'année vous regarde fixement, coincée entre deux piles de livre plus haute qu'elle."
            )
            liste_commentaire.append(commentaire)
            commentaire = "*C'est l'heure pas vrai ?*\n*Bon, ben me fout pas la honte hein !*\n*Ya un endroit qu'il faut pas taper, c'est là.*"
            liste_commentaire.append(commentaire)
            commentaire = (
                "L'ennemie tapote son torse, ou repose une amulette a l'aspect ancien."
            )
            liste_commentaire.append(commentaire)
            commentaire = (
                "*Allez, bonne chance !*"
                "\nVous vous retrouvez alors dans l'arène, avec l'enfant mage en face de vous."
            )
            liste_commentaire.append(commentaire)
            commentaire = (
                "*Vous voulez aller plus loin ?*\n*Vous souhaitez sortir du Coliseum avec la gloire, l'argent, et la vie sauve ?*"
                "\n*Dommage pour vous !*\n*Car vous êtes tombé sur le disciple du grand...*"
            )
            liste_commentaire.append(commentaire)
            commentaire = "*Du puissant...*"
            liste_commentaire.append(commentaire)
            commentaire = "*Du musculeux...*"
            liste_commentaire.append(commentaire)
            commentaire = "*Maitre Mage ! Créateur des ces lieux !*"
            liste_commentaire.append(commentaire)
            commentaire = "Votre expression s'assombrit.\n*Bah alors ? Fait pas cette tête ! Tu va pas l'affronter maintenant !*\n*Il n'est pas avec moi car...il est en...*"
            liste_commentaire.append(commentaire)
            commentaire = "Son expression s'assombrit.\n*...en réclusion. Quelque part. Pour devenir plus fort. Surement.*"
            liste_commentaire.append(commentaire)
            commentaire = "*...*"
            liste_commentaire.append(commentaire)
            commentaire = "*...amène toi.*"
            liste_commentaire.append(commentaire)
        elif Player.numero_de_letage == 5:
            commentaire = "Vous entendez du bruit vers un stand de chamboule-tout, et voyez une clochette dépasser d'une poubelle proche."
            liste_commentaire.append(commentaire)
            commentaire = (
                "L'ennemi sort alors de sa cachette."
                "\nIl est habillé avec des vêtements colorés déchirés, de grandes chaussures rouges trouées, "
                "et un masque sur lequel est représenté un sourire béant."
                "\nVous frissonnez en voyant la folie sanguinaire dans les yeux de l'ennemi, a travers un trou dans le costume."
            )
            liste_commentaire.append(commentaire)
            commentaire = "*BONJOUR-JOUR VOYAGEUR ! JE SUIS LE BOUFFON BOUFFON ! JE SUIS ICI-CI POUR AMUSER-MUSER MON ROI !*"
            liste_commentaire.append(commentaire)
            commentaire = (
                "*ET TU SAIS CE QUI L'AMUSERAIT BEAUCOUP ? MOI JE SAIS ! MOI JE SAIS !*"
            )
            liste_commentaire.append(commentaire)
            commentaire = (
                "*CA SERAIT TA TETE AU BOUT D'UN PIQUE ET TES TRIPES DANS UN GATEAU !*"
            )
            liste_commentaire.append(commentaire)
            commentaire = "*ET PUIS SI JE FAIT CA IL ME LAISSERA SUREMENT-REMENT REMONTER DANS LE CHATEAU PAS VRAI ? ET PUIS IL ME LAISSERA MANGER AUTRE CHOSE QUE CES VOYAGEURS SANS RIEN SUR LES OS !*"
            liste_commentaire.append(commentaire)
            commentaire = "*JOUONS ! JOUONS ! YAHAHAHA !*"
            liste_commentaire.append(commentaire)
        elif Player.numero_de_letage == 6:
            commentaire = "Vous entendez des bruits de pas venant de derriere vous.\nAlors que vous vous retournez, vous les entendez encore derriere vous."
            liste_commentaire.append(commentaire)
            commentaire = "*Bienvenue dans mon domaine, voyageur.*"
            liste_commentaire.append(commentaire)
            commentaire = (
                "Finalement, vous vous retournez une dernière fois et trouvez un enfant petit, mais d'allure robuste.\nUn chapeau de pirate est vissé sur sa tête."
                "\nAutour de lui se trouvent des batisses faites de vêtements et autres monceaux de métal.\nDe part et d'autres, des ossements humains jonchent le sol."
            )
            liste_commentaire.append(commentaire)
            commentaire = (
                "*Enfin, mon domaine, plutot celui du Roi.*"
                "\n*Mais avec quelques amis, nous sommes arrivés a battre celui qui dominait cet étage.*"
                "\n*Il est d'ailleurs en plein changement de propriétaire !*"
                "\n*Je pense que c'est assez pour pouvoir dire que c'est le mien maintenant*."
                "\n*N'est-ce pas ?*"
            )
            liste_commentaire.append(commentaire)
            commentaire = "Vous le regardez, pensif. Cet enfant serait donc si agé ?"
            liste_commentaire.append(commentaire)
            commentaire = (
                "*Pas de réponses ?*"
                "\n*Tu dois être déterminé a en finir avec cet endroit.*"
                "\n*Mais regarde donc : Ici repose toutes les personnes qui m'ont suivie.*"
                "\n*Nous avons tenté de nous installer ici, mais le manque d'eau et de lumière nous a rendu fou.*"
                "\n*Enfin, nous...*"
            )
            liste_commentaire.append(commentaire)
            commentaire = (
                "*Eux plutot. L'espèce de pendule vivante qui vivait ici possédait plusieurs reliques qui m'ont aidé a survivre.*"
                "\n*Mais que je suis impoli ! Je ne me suis même pas présenté.*"
            )
            liste_commentaire.append(commentaire)
            commentaire = "*Je suis le Prince des voleurs !*"
            liste_commentaire.append(commentaire)
            commentaire = "*Intemporel, Plus riche que le plus riche des hommes, Libéré des chaines de la soif et de la satiété !*"
            liste_commentaire.append(commentaire)
            commentaire = "*Et afin de conserver tout ces privilèges, je vais me battre contre toi voyageur.*"
            liste_commentaire.append(commentaire)
            commentaire = (
                "Le Prince des Voleurs se tourne alors vers un des membres fantomatiques de l'audience, qui a presque l'air de..."
                "\n...sourire ?"
            )
            liste_commentaire.append(commentaire)
            commentaire = "*Trop de blabla...pas assez envoutant...*"
            liste_commentaire.append(commentaire)
            commentaire = "Il commence a marmoner en regardant le sol, puis vous regarde brusquement."
            liste_commentaire.append(commentaire)
            commentaire = "*Pas grave ! Alors ? On commence ?*"
            liste_commentaire.append(commentaire)
        elif Player.numero_de_letage == 7:
            if Player.nom_de_letage == "Douves du Pénitent":
                commentaire = (
                    "Vous voyez un vieillard aux joues creusées et aux bras tailladés."
                    "\nSon apparence ressemble a ces descriptions que l'on fait des ames damnées, tourmentées en enfer pour l'éternité."
                    "\nCe n'est plus qu'une trace de lui meme maintenant."
                )
                liste_commentaire.append(commentaire)
                commentaire = "*...qui es tu ?*"
                liste_commentaire.append(commentaire)
                commentaire = (
                    "Il n'y a pas une once de curiosité dans sa voix.\nIl ne vous considère pas comme une personne, seulement comme un spectateur monté sur scène pour parler a un acteur."
                )
                liste_commentaire.append(commentaire)
                commentaire = "*Il n'y a plus rien a faire ici. Plus rien a voir. Personne ne viendra à mon secours.*"
                liste_commentaire.append(commentaire)
                commentaire = "Vous le voyez marcher en rond, ses pas laissant un sillage a peine visible dans l'eau sale."
                liste_commentaire.append(commentaire)
                commentaire = (
                    "*J'ai tué mes fidèles serviteurs, fait d'eux un golem suivant mes ordres a la lettre.*"
                )
                liste_commentaire.append(commentaire)
                commentaire = "*J'ai jeté un chevalier qui ne voulait que mon bien dans un affreux paysage. Découpé mon frère pour creer un garde capable de me défendre de mes propres démons.*"
                liste_commentaire.append(commentaire)
                commentaire = "*Fusionné mes ministres avec la fabrique du temps, pour me protéger d'invisibles et tout-puissants ennemis. Contaminé de ma folie le plus drole des Hommes du nord.*"
                liste_commentaire.append(commentaire)
                commentaire = "*J'ai tant blessé, pour ne pas être blessé a mon tour.*"
                liste_commentaire.append(commentaire)
                commentaire = "*Ce n'est pas de mes ennemis que j'aurais du me proteger, mais de moi même.*"
                liste_commentaire.append(commentaire)
                commentaire = "Le Roi vous regarde, intensément."
                liste_commentaire.append(commentaire)
                commentaire = (
                    "*Ca y est, tu a eu ce que tu voulait ? Tu connait mon histoire et maintenant tu sais ce que j'en pense ?*"
                )
                liste_commentaire.append(commentaire)
                commentaire = "Une lueur de folie commence a perler dans les yeux du Roi."
                liste_commentaire.append(commentaire)
                commentaire = "*Tu sais que je suis désolé ? Tu sais que je m'en veut énormément ???*"
                liste_commentaire.append(commentaire)
                commentaire = "Des larmes commencent a couler sur ses joues."
                liste_commentaire.append(commentaire)
                commentaire = "*ALORS SORS MOI DE LA !! ARRETE LA TORTURE ! ACCORDE MOI TON PARDON ET LAISSE MOI VIVRE !*"
                liste_commentaire.append(commentaire)
                commentaire = "*TU SAIS QUE RIEN N'EST DE MA FAUTE !! C'EST PAS JUSTE ! CA N'ARRIVE QU'A MOI !*"
                liste_commentaire.append(commentaire)
                commentaire = "Le Roi récupère des objets rouillés en dessous de l'eau, et se prépare au combat."
                liste_commentaire.append(commentaire)
                commentaire = "*RIEN N'EST DE MA FAUTE !! MEURT EN MON NOM POUR QUE JE PUISSE SORTIR ET RETROUVER MA DIGNITE !*"
                liste_commentaire.append(commentaire)
                commentaire = "*MAITRE MAGE ! VALIDE MES CONVICTIONS !*"
                liste_commentaire.append(commentaire)
                commentaire = "Une aura dorée enveloppe le Roi."
                liste_commentaire.append(commentaire)
                commentaire = "*AHAHAHA !! TU VOIS ? MEME LUI EST D'ACCORD !! J'AI TOUJOURS DES GENS DE MON COTE !!! RIEN N'EST DE MA FAUTE !!*"
                liste_commentaire.append(commentaire)
                commentaire = "*ALORS...*"
                liste_commentaire.append(commentaire)
                commentaire = "*MEURT POUR QUE JE PUISSE VIVRE !!!*"
                liste_commentaire.append(commentaire)
            else:
                commentaire = (
                    "Vous voyez un vieillard aux joues creusées et aux bras tailladés."
                    "\nSon apparence ressemble a ces descriptions que l'on fait des ames damnées, tourmentées en enfer pour l'éternité."
                    "\nCe n'est plus qu'une trace de lui meme maintenant."
                )
                liste_commentaire.append(commentaire)
                commentaire = "*T-t-t-TOI !*\n*Tu est venu me TUER c'est ca ?*\n*Comme tout le monde dans ce foutu trou a rat !*\n*Quoique je ne me rapelle pas t'avoir fait jeter ici..*"
                liste_commentaire.append(commentaire)
                commentaire = (
                    "En le voyant vous parler, deux expressions vous viennent a l'esprit : En plein burnout, et Roi de pacotille."
                    "\nSait il seulement qu'il ne parle pas a un des spectres qui hante ses cauchemards ?"
                    "\nQu'il ne parle pas a une création de son cerveau malade, mais a une vraie personne ?"
                )
                liste_commentaire.append(commentaire)
                commentaire = "*MAIS!*\n*Tu ne vas RIEN me faire !*\n*héhé... CLONE D'OBSIDIENNE ! VIENS A MOI !*"
                liste_commentaire.append(commentaire)
                commentaire = "Mais personne ne vient."
                liste_commentaire.append(commentaire)
                commentaire = (
                    "*Tu... l'a tué ?*\n*HAHAHAHA ! TU ES FORT ! MAIS CELA NE SUFFIRA PAS !*\n*TOUS MES GENERAUX SONT SOUS MON COMMANDEMENT !*"
                    "\n*ROI AMONRE ! MON FRERE ! VIENS ICI DEFENDRE TA FAMILLE !*"
                )
                liste_commentaire.append(commentaire)
                commentaire = "Mais personne ne vient.                                            Seul le bruit des flammes répond a ses supplications."
                liste_commentaire.append(commentaire)
                commentaire = "*Ah.... Ah... Je t'avais tout donné mon frère...misérable...*\n*CHEVALIER POURPRE !*\n*RIGOR MORTEX !*\n*AMENEZ VOUS BON SANG !*"
                liste_commentaire.append(commentaire)
                commentaire = "Mais personne ne vient.                              Répéter les mêmes actions en s'attendant a un résultat différent..."
                liste_commentaire.append(commentaire)
                commentaire = "*Ah...AH....AH... STUPIDE CHEVALIER ! ET STUPIDE HORLOGE MAGIQUE !*\n\n*bouffon...s'il te plait...*"
                liste_commentaire.append(commentaire)
                commentaire = "Mais personne ne vient.                                                ...n'est-ce pas là la définition de la folie ? :)"
                liste_commentaire.append(commentaire)
                commentaire = (
                    "*m-m-mon bouffon n'est pas mort, i-i-il est trop fort pour ca...*\n*Il se sont tous retournés contre moi c'est ça ?*"
                    "\n*HEIN ?*\n*JE ME SUIS FAIT TRAHIR ENCORE UNE FOIS ! HAHAHAHAHAHHHHHHH *"
                )
                liste_commentaire.append(commentaire)
                commentaire = "*MAGE ! TU M'A CREE CET ENDROIT !*\n*NE ME TOURNE PAS LE DOS TOI AUSSI !*"
                liste_commentaire.append(commentaire)
                commentaire = "Une voix se met à résonner a l'interieur de la salle."
                liste_commentaire.append(commentaire)
                commentaire = "*Ce type a tué mon apprentie. Je m'occuperais personnellement de son cas. Débrouillez vous avec ca.*"
                liste_commentaire.append(commentaire)
                commentaire = "Une armure d'or et de rubis magiques apparait sur le Roi Déchu. Une épée apparait a ses pieds."
                liste_commentaire.append(commentaire)
                commentaire = "*HAHAHA!*\n*A nous deux maintenant ASSASSIN !* "
                liste_commentaire.append(commentaire)
        elif Player.numero_de_letage == 8:
            commentaire = "Le vieil homme à la barbe blanche se lève et vient se positionner à quelques mètres de vous,\nHache de guerre dans une main, Grimoire dans l'autre."
            liste_commentaire.append(commentaire)
            commentaire = (
                "*Sincèrement...*\n*Que dire de plus que ce qui n'a pas déjà été dit ?*"
            )
            liste_commentaire.append(commentaire)
            commentaire = "*Tu as tué tout le monde ici.*"
            liste_commentaire.append(commentaire)
            commentaire = "*Tu a affronté la quintessence de gardes loyaux, fusionnés en une conscience collective, figés dans l'éternité d'un rêve couleur encre...*"
            liste_commentaire.append(commentaire)
            commentaire = "*...d'un mercenaire devenu chevalier par peur de la mort, bercé d'idéaux souillés par la triste réalitée de sa condition...*"
            liste_commentaire.append(commentaire)
            commentaire = "*...d'un roi dur mais juste, tranformé en monstre a son insu, gardé captif par les liens de la famille...*"
            liste_commentaire.append(commentaire)
            commentaire = "*...d'un faux génie, un trésor d'efforts sans résultats, une apprentie loyale brisé par ses propres démons...*"
            liste_commentaire.append(commentaire)
            commentaire = "*...d'un homme du nord portant un masque de faux sourires, porté par l'espoir de revoir ses contrées...*"
            liste_commentaire.append(commentaire)
            commentaire = "*...d'un représentant du peuple des bas-fonds du royaume, sacrifié au nom d'une loi brimée par le sang et l'injustice...*"
            liste_commentaire.append(commentaire)
            commentaire = "*...et enfin d'un pitoyable Roi qui a, dans sa folie, changé le destin de millions de pauvre gens.*"
            liste_commentaire.append(commentaire)
            commentaire = "*Tu as usé de ta lame sur la quasi-entieretée de la cour du Roi Déchu...*"
            liste_commentaire.append(commentaire)
            commentaire = "*...et maintenant il ne te reste plus que le magicien, l'outil sans qui tout cela n'aurait été possible.*"
            liste_commentaire.append(commentaire)
            commentaire = "*Alors gardons cette conversation simple.*"
            liste_commentaire.append(commentaire)
            commentaire = (
                "*le Maitre Mage prend une grande inspiration.*"
                "\n*JE SUIS LE MAITRE MAGE, CREATEUR DE CES LIEUX. MA MAGIE COULE EN CHACUN DE CES MURS.*"
                "\n*JE SUIS L'APOGEE DE TA QUETE, L'OBJECTIF FINAL DE TA DESTINEE !*"
            )
            liste_commentaire.append(commentaire)
            commentaire = (
                "Les hauts murs de l'arène se détruisent pour réveler les autres étages flottant dans un vide pourpre nacré, tournés vers vous deux."
                "\nLa foule fantomatique silencieuse se met a s'agiter dans tout les sens,"
                "\net sur un claquement de doigt du Maitre Mage, s'autorise a exprimer leur excitation de manière verbale."
                "\nElle se met a scander votre nom, et celui du Maitre Mage, dans un chaos et un brouhaha sans nom !"
                "\nLes spectateurs sont en pleine ébulition !\nVous reconnaissez les figures fantomatiques des différents boss dans les gradins !"
            )
            liste_commentaire.append(commentaire)
            commentaire = "*NE FAISONS PAS ATTENDRE NOTRE PUBLIC !*"
            liste_commentaire.append(commentaire)
            commentaire = "*ROCK AND ROLL !*"
            liste_commentaire.append(commentaire)
        elif Player.numero_de_letage == 9:
            commentaire = "" "\n" "\n"
        elif Player.nom_de_letage == "Dédale Frontière" :
            commentaire = "" "\n" "\n"
        elif Player.nom_de_letage == "Limbes Flétrissants" :
            if Player.numero_boss_alt == 1:
                commentaire = "" "\n" "\n"
            elif Player.numero_boss_alt == 2:
                commentaire = "" "\n" "\n"
            elif Player.numero_boss_alt == 3:
                commentaire = "" "\n" "\n"
            elif Player.numero_boss_alt == 4:
                commentaire = "" "\n" "\n"
            elif Player.numero_boss_alt == 5:
                commentaire = "" "\n" "\n"
            elif Player.numero_boss_alt == 6:
                commentaire = "" "\n" "\n"
            elif Player.numero_boss_alt == 7:
                commentaire = "" "\n" "\n"
            elif Player.numero_boss_alt == 8:
                commentaire = "" "\n" "\n"
            elif Player.numero_boss_alt == 9:
                commentaire = "" "\n" "\n"
            elif Player.numero_boss_alt == 10:
                commentaire = "" "\n" "\n"
        for commentaire in liste_commentaire:
            Affichage.IntroBoss(commentaire)

    def AfficheDescente(self):
        if Player.nom_de_letage == "Limbes Flétrissants" and Player.numero_boss_alt != 11:
            print("L'ennemi battu, vous entendez quelque chose s'ouvrir.")
            self.EntreePourContinuer()
            print("C'est la porte de la ferme en ruine.")
            self.EntreePourContinuer()
            print("A l'interieur, vous ne voyez pas grand chose d'interressant.")
            print("Le bois vermoulu crisse et plie sous vos pas, et seul le son du vent a travers les planches semble vous accompagner.")
            self.EntreePourContinuer()
            print("Dans un coin proche de l'entrée, vous trouvez un vieil escalier de bois, descendant dans l'obscurité.")
            self.EntreePourContinuer()
        elif Player.nom_de_letage == "Limbes Flétrissants" and Player.numero_boss_alt == 11:
            StopAllMusic()
            print("Vous vous approchez de la maison en ruine.")
            self.EntreePourContinuer()
            print("La porte s'ouvre lentement.")
            self.EntreePourContinuer()
            print("Derrière, vous trouvez une commode en ruine surmontée d'un coffret de bois d'olivier.")
            if Player.death_divinity :
                print("A l'interieur, il y a plusieurs boites de bois noir !")
                FloorMaker.GiveRandomArtefact()
                FloorMaker.GiveRandomArtefact()
                FloorMaker.GiveRandomArtefact()
                print("Après avoir récupéré les artefacts, vous regardez autour de vous pour trouver une sortie.")
                self.EntreePourContinuer()
                print("Au niveau de la cuisine, vous voyez une faille, ou une fracture a hauteur de tête.")
                self.EntreePourContinuer()
                print("Comme si quelqu'un ou quelque chose était passé par là, mais avait rebroussé chemin après n'avoir rien trouvé.")
                self.EntreePourContinuer()
                print("Vous entrez dans la faille, et vous retrouvez dans un escalier de pierre.")
                Player.numero_de_letage = 10
                Player.etage_alternatif = False

            else:
                self.EntreePourContinuer()
                print("A l'interieur, vous trouvez une photo jaunie par le temps, sur laquelle une centaine de figures différentes, toutes drapées de chitons, se tiennent par les épaules et sourient.")
                self.EntreePourContinuer()
                print("Derriere, il est écrit : *Dans la vie comme dans la mort, je ne fait qu'envier votre sort.*")
                self.EntreePourContinuer()
                print("...")
                self.EntreePourContinuer()
                donnees_de_s0ve = Observation.GetPermanentThingsFromS0ve()
                donnees_de_s0ve["77454135415415"] = "Divinité de la Mort"
                Observation.SetPermanentThingsToS0ve(donnees_de_s0ve)
                dir_path = os.path.dirname(os.path.realpath(__file__))
                chemin_du_fichier_save = dir_path + "\\save.txt"
                os.remove(chemin_du_fichier_save)
                PlaySound("questdone")
                print("Vous obtenez la Divinité de la Mort !")
                print("\nC'est une photo du dernier panthéon des dieux, il y a bien longtemps.\nElle est imprégnée de la culpabilité du Dieu de la Mort, seul survivant de la Guerre de l'Interdit.")
                print("\n - Vous pouvez désormais utiliser les méchanismes anciens a leurs plein potentiel !")
                print(" - Terah gagne le Deuxieme Stigma Positif [Réceptacle de la Mort] !")
                print(" - Vous pouvez désormais utiliser l'élément de la Mort ! Vous pouvez retrouver la liste des talents Ames dans le fichi[ERREUR : FICHIER INTROUVABLE] ")
                print("[FICHIER NOM:122367325 ADDRESSE IPV4:(XXX) INTROUVABLE]")
                print(" - La porte aux redcoins s'ouvre désormais pour tout les personnages jouables ! Finissez le boss rush a nouveau pour gagner 5 artefacts et sortez directement a l'étage 11 !")
                self.EntreePourContinuer()
                print("...?")
                self.EntreePourContinuer()
                print("Une présence immonde s'approche.")
                self.EntreePourContinuer()
                print("La pierre du désir vient vous récolter.")
                self.EntreePourContinuer()
                print("Mais Terah sourit.")
                self.EntreePourContinuer()
                print("Il avait trouvé son chemin.")
                self.EntreePourContinuer()
                print("Et il en profiterait dans une autre vie.")
                self.EntreePourContinuer()
                print("Terah sentit la pierre de désir fracturer l'espace pour venir jusqu'a lui.")
                self.EntreePourContinuer()
                print("Il vit une ombre affreuse venir de la cuisine.")
                self.EntreePourContinuer()
                print("Terah ignora la voix tordue de la chose en face, ferma les yeux, et compta jusqu'a quatre.")
                time.sleep(2.5)
                ClearConsole()
                print("[B0NJ0uR PeTITT5 FL5URR !!§§:;/ 1L EST T3MPsss D- ]")
                time.sleep(1.5)
                sys.exit()
        elif "Passe La Porte Redcoin" not in Player.player_tags :
            print(
                "Vous pressez votre main contre la grille autrefois fermée."
                "\nAlors que la clé incrustée s'efface de votre main, la grille s'ouvre lentement."
            )
            self.EntreePourContinuer()
        if "Draupnir" in Player.liste_dartefacts_optionels and "Passe La Porte Redcoin" not in Player.player_tags :
            print("...?")
            self.EntreePourContinuer()
            print("Vous sentez Draupnir vibrer dans votre poche, et entendez un son de gold tombant par terre...")
            self.EntreePourContinuer()
            print("Puis un autre...")
            self.EntreePourContinuer()
            print("Et encore un autre !")
            self.EntreePourContinuer()
            print("Bientot, c'est une brève pluie de gold qui s'abat sur vous, et dévale les marches de l'escalier !")
            self.EntreePourContinuer()
            gain_gold = Player.nombre_de_gold
            Player.AddGoldToPlayer(gain_gold)
            print(f"Après une petite heure a tout ramasser, vous vous retrouvez avec {gain_gold} golds supplémentaires !")
            self.EntreePourContinuer()
        if "Char Leclerc 3ème Génération à Dispositif GALIX, Canon Principal 120mm et Armement Secondaire à Mitrailleuse 12,7 mm Coaxiale et Mitrailleuse de 7,62 mm en Superstructure" in Player.liste_dartefacts_optionels:
            print("Alors que vous avancez, vous trébuchez sur votre propre pied et tombez sur le sol.")
            self.EntreePourContinuer()
            print("Votre Char Leclerc 3ème Génération à Dispositif GALIX, Canon Principal 120mm et Armement Secondaire à Mitrailleuse 12,7 mm Coaxiale et Mitrailleuse de 7,62 mm en Superstructure tombe de votre inventaire et se brise en plusieurs centaines de morceaux !")
            self.EntreePourContinuer()
            Player.liste_dartefacts_optionels.remove("Char Leclerc 3ème Génération à Dispositif GALIX, Canon Principal 120mm et Armement Secondaire à Mitrailleuse 12,7 mm Coaxiale et Mitrailleuse de 7,62 mm en Superstructure")
            print("Vous faites le deuil de votre Char Leclerc 3ème Génération à Dispositif GALIX, Canon Principal 120mm et Armement Secondaire à Mitrailleuse 12,7 mm Coaxiale et Mitrailleuse de 7,62 mm en Superstructure et continuez d'avancer, une larme perlant à l'oeuil et les meilleurs souvenirs passés avec votre Char Leclerc 3ème Génération à Dispositif GALIX, Canon Principal 120mm et Armement Secondaire à Mitrailleuse 12,7 mm Coaxiale et Mitrailleuse de 7,62 mm en Superstructure passant en boucle dans votre mémoire...")
            self.EntreePourContinuer()
        for artefact in Player.liste_dartefacts_optionels:
            if artefact in ["Element [Ame] Surchargé", "Element [Foudre] Surchargé", "Element [Feu] Surchargé", "Element [Terre] Surchargé", "Element [Glace] Surchargé", "Element [Sang] Surchargé", "Element [Corps] Surchargé"]:
                Player.liste_dartefacts_optionels.remove(artefact)
                print("Vous sentez l'appel de la nature et vous soulagez sur place.")
                print(f"Vous perdez l'effet [{artefact}] de la boisson que vous aviez bu !")
                self.EntreePourContinuer()
        if "Assurance Distributeur" in Player.liste_dartefacts_optionels:
            print(f"L'artefact [Assurance Distributeur] part en fumée, protégeant ainsi les artefacts achetés au distributeur !")
            Player.liste_dartefacts_optionels.remove("Assurance Distributeur")
            self.EntreePourContinuer()
        else:
            for artefact in Player.liste_dartefacts_optionels:
                if artefact in ["Epée de Damocles", "Morceau d'Ether Fragile", "Eau Bénite", "Bandeau Catharsis", "Charbon Primordial", "Saphir de Gel", "Fossile Figé", "Fiole des Eclairs"]:
                    Player.liste_dartefacts_optionels.remove(artefact)
                    print(f"L'artefact [{artefact}] disparait de votre inventaire !\nLes artefacts achetés au distributeurs ne tiennent vraiment pas dans la durée...")
                    self.EntreePourContinuer()
        if "Canigou" in Player.liste_dartefacts_optionels:
            Player.liste_dartefacts_optionels.remove("Canigou")
            print("Alors que vous avancez, Canigou fait des petits gémissements de douleur.")
            self.EntreePourContinuer()
            print("Vous saviez qu'un chien modifié ne survivrait pas longtemps en dehors d'un habitat spécifiquement désigné pour lui.")
            print("Vous regardez Canigou avec des larmes dans vos yeux, le caressez une dernière fois, et le laissez repartir dans la niche d'ou il vient.")
            self.EntreePourContinuer()
            print("Adieu, petit chien. On se reverra dans une autre partie.")
            self.EntreePourContinuer()
        if ("Regard de la Bête" in Player.liste_dartefacts_optionels and (not "Âme de la Bête" in Player.liste_dartefacts_optionels) 
            and (not "Âme de la Bête" in Player.liste_dartefacts_optionels)) :
            print("Un peu plus bas dans les escaliers, vous trouvez des morceaux de fer.")
            self.EntreePourContinuer()
            print("Vous aviez vu des marques de griffe au niveau de la grille, mais ne pensiez pas que la bête que vous aviez libéré puisse descendre sans la Clé Incrustée...")
            self.EntreePourContinuer()
            print("...?")
            self.EntreePourContinuer()
            print("Quelque chose brille entre les morceaux de grille éparpillés au sol.")
            self.EntreePourContinuer()
            print("Vous obtenez l'artefact [Ecaille de la Bête] !")
            print("Le dernier témoin de l'existence d'une bête féroce dans le Coliseum, laissée derriere a la poursuite de la liberté.\nVous gagnez 10 points de défence !")
            FloorMaker.GiveRandomArtefact("Ecaille de la Bête","Don")
            Player.points_de_defence += 10
            self.EntreePourContinuer()
            donnees_de_s0ve = Observation.GetPermanentThingsFromS0ve() 
            liste_dartefact_debloque = ast.literal_eval(donnees_de_s0ve["Artefact Debloques"])
            if not "Ecaille de la Bête" in liste_dartefact_debloque :
                PlaySound("questdone")
                print("L'artefact [Ecaille de la Bête] est désormais disponible dans la livre de la Cigogne Bleue !")
                self.EntreePourContinuer()
                liste_dartefact_debloque.append("Ecaille de la Bête")
                donnees_de_s0ve["Artefact Debloques"] = liste_dartefact_debloque
                Observation.SetPermanentThingsToS0ve(donnees_de_s0ve)
        if  Sove.ModifieTagsDansSove("Checke", "Chuchoteur"):
            if RegardeSiEtageCompletementObserve(FloorMaker.FloorBlueprint):
                print("Vous avez terminé l'étage, et avez observé toute les salles observables !")
                print("Vous mémorisez la structure de l'étage dans un coin de votre esprit.")
                print("Vous gagnez une Carte Mentale !")
                Sove.ModifieDechetsDansSove("Ajout", "Carte Mentale", 1)



        print("Vous vous enfoncez encore plus profondément dans le Coliseum.")
        self.EntreePourContinuer()

    def AfficheRentrerChezMarchand(self):
        print(
            "Vous passez une porte primitive de tissu et rentrez dans une salle miteuse.\n"
            "Devant vous, une figure drapée vous propose des items placés sur un bout de chiffon sale... pour un prix."
        )
        self.EntreePourContinuer()

    def AffichePasAssezDargent(self):
        print("Vous n'avez pas assez de golds !")
        self.EntreePourContinuer()

    def AffichePartirMarchand(self, argent_depense):
        print("Vous faites un signe au marchand et repassez la porte de tissu.")
        self.EntreePourContinuer()
        if argent_depense >= Player.numero_de_letage * 150 or argent_depense >= 1000:
            print("Ce dernier vous arrête dans vos pas, et vous donne un jeton singulier.")
            self.EntreePourContinuer()
            print("Il vous explique que ce ce cadeau récompense celle et ceux qui déboursent plus d'un certain nombre de gold, en une fois.")
            self.EntreePourContinuer()
            print("Quand vous lui demander quoi faire de ce jeton, il vous fait un sourire malicieux, et designe le symbole triangulaire qui orne sa porte.")
            self.EntreePourContinuer()
            print("Vous gagnez un Jeton !")
            self.EntreePourContinuer()
            Player.jetons += 1
        nombre_aleatoire = random.randint(0, 100)
        if Player.numero_de_letage == 1 and  Sove.ModifieTagsDansSove("Checke","Livraison En Attente"):
            Sove.ModifieTagsDansSove("Enleve","Livraison En Attente")
            Sove.ModifieTagsDansSove("Ajout","Livraison Terminée")
            print("Le marchand vous arrête, vous observe quelques instants, et vous tend une petite boite de carton noir enrobée dans un tissu rouge élégant.")
            Affichage.EntreePourContinuer()
            print("Vous ouvrez la boite et trouvez :")
            PasseDeLivraisonABonus()
            Affichage.EntreePourContinuer()
            print("Au fond de la boite, il y a un simple morceau de papier sur lequel est écrit :")
            print("*Quelqu'un pense a vous.*")
            Affichage.EntreePourContinuer()
            Save.SaveTheGameSansAffichage()
        elif nombre_aleatoire <= 10:
            print(
                "...? Vous jureriez reconnaitre l'embleme cousu sur le chiffon sale."
                "\nUn griffon a trois tête, cinq ailes, et un bec...le même que celui a l'entrée du coliseum..."
            )
            self.EntreePourContinuer()

    def AfficheChargement(self):
        for nombre in range(1, 7):
            if nombre in [1, 4]:
                print("Chargement en cours.")
            elif nombre in [2, 5]:
                print("Chargement en cours..")
            elif nombre in [3, 6]:
                print("Chargement en cours...")
            time.sleep(0.3)
            ClearConsole()
        print("Chargement Terminé !")
        self.EntreePourContinuer()

    def AfficheSauvegarde(self):
        for nombre in range(1, 7):
            if nombre in [1, 4]:
                print("Sauvegarde en cours.")
            elif nombre in [2, 5]:
                print("Sauvegarde en cours..")
            elif nombre in [3, 6]:
                print("Sauvegarde en cours...")
            time.sleep(0.3)
            ClearConsole()
        print("Sauvegarde Terminé !")
        self.EntreePourContinuer()

    def AfficheAvecUnTempsDattente(self, temps):
        time.sleep(temps)
        ClearConsole()

    def AffichageDescriptionEtage(self):
        StopAllMusic()
        if Player.numero_de_letage == 0:
            commentaire = (
                "Vous ouvrez les yeux en bas d'un escalier monumental dont les marches semblent s'effondrer sur elle même."
                "\nEn vous retournant, vous découvrez un espace sali par le sang et la poussière, jonchés de constructions humaines faites d'os et de terre."
                "\nLa grille est grande ouverte, et une masse argentée semble flotter au milieu de l'arène."
                "\nVous voici a l'étage zéro du Coliseum , la cage mélancolique d'une âme brisée."
            )
            Player.boss_battu = True
        elif Player.numero_de_letage == 1:
            commentaire = (
                "Vous descendez les marches de l'escalier en spirale, et sentez une odeur acre de moisissure monter a vos narines."
                "\nDes murs crasseux, des gradins en ruine, et un sol de gravier et d'os mélangés vous attendent a la fin."
                "\nVous voici au premier étage du Coliseum , une ruine mal entretenue."
            )
            if Player.benediction == "Augmenté":
                if not "Affinitée de Foudre" in Player.talents_possedes:
                    Player.talents_possedes.append("Affinitée de Foudre")
                if not "Affinitée de Glace" in Player.talents_possedes:
                    Player.talents_possedes.append("Affinitée de Glace")
                if not "Affinitée de Terre" in Player.talents_possedes:
                    Player.talents_possedes.append("Affinitée de Terre")
                if not "Affinitée de Feu" in Player.talents_possedes:
                    Player.talents_possedes.append("Affinitée de Feu")
                if not "Affinitée de Sang" in Player.talents_possedes:
                    Player.talents_possedes.append("Affinitée de Sang")
                if not "Affinitée Physique" in Player.talents_possedes:
                    Player.talents_possedes.append("Affinitée Physique")
                if not "Elémento-Réceptif" in Player.talents_possedes:
                    Player.talents_possedes.append("Elémento-Réceptif")
                
        elif Player.numero_de_letage == 2:
            if Player.nom_de_letage == "Jungle Cruelle" :
                commentaire = (
                    "Vous laissez derrière vous le donjon de pierre fragile, et voyez perler sur le plafond des gouttes de...sang ?"
                    "\nUne masse horrible de plantes aux aspects repoussants s'infiltrant dans les moindres interstices,"
                    "\ndes fleurs sur lequelles se dessinent des visages de mort et des yeux percants,"
                    "\nune arène envahie par des racines mouvantes, pulsantes, et des monceaux de briques éclatés vous attendent en bas."
                    "\nAu centre de tout cela, une armure de chevalier maintenue dans les airs par un puissant tentacule de bois semble attendre que vous croisez sa route."
                    "\nVous voici au deuxieme étage du Coliseum , une jungle assassine, assoifée de sang."
                )
            else:
                commentaire = (
                    "Vous laissez derrière vous le donjon de pierre fragile, et voyez perler sur le plafond des gouttes d'eau."
                    "\nUne masse informe de plantes extravagantes poussant dans les interstices entre les briques,"
                    "\nune arène envahie par les mauvaises herbes, et une tour de chateau au dessus de la sortie vous attendent en bas."
                    "\nVous voici au deuxieme étage du Coliseum , une forêt (dés)enchantée."
                )
        elif Player.numero_de_letage == 3:
            commentaire = (
                "Vous laissez derrière vous l'humiditée excessive, et entendez un bruissement sourd."
                "\nUn sol jaune granuleux dans lequel on s'enfonce, un étage sans mur, un soleil artificiel et "
                "\nun vent impossible battant le sable dans vos yeux vous attendent en bas."
                "\nVous voici au troisième étage du Coliseum , un océan de sable."
            )
        elif Player.numero_de_letage == 4:
            commentaire = (
                "Vous laissez derrière vous la sécheresse, et revenez a un environement plus comfortable."
                "\nDes murs infiniment haut sur lesquels reposent des étagères remplies d'un nombre impossible de livres, "
                "\ndes plateaux volants remplis de bouquins, allant d'un bout a l'autre de l'arene, et un sol couvert de moquette douce au toucher vous attendent en bas."
                "\nVous voici au quatrième étage du Coliseum , une tour dédiée a l'étude de la magie."
            )
        elif Player.numero_de_letage == 5:
            commentaire = (
                "Vous laissez derrière vous les livres, et entendez une musique entêtante."
                "\nDes clowns peints sur le mur, des manequins souriants simulant une foule désoeuvrée,"
                "\ndes fausses attractions fabriquées a la hâte avec quelques bouts de carton ,"
                "\net de vieilles enceintes crachant une musique joyeuse en boucle vous attendent en bas."
                "\nVous voici au cinquième étage du Coliseum , une misérable fête foraine."
            )
        elif Player.numero_de_letage == 6:
            commentaire = (
                "Vous laissez derrière vous la fête, et ressentez une présence particulière."
                "\nUn bidonville vide de monde, dans lequel sont parsemés horloges montres et alarmes brisées, "
                "\ndes vieilles banderoles trouées accrochées au plafond, et une gigantesque tour d'horloge au milieu de l'arène vous attendent en bas."
                "\nVous entendez le tic particulier d'un mécanisme, mais l'aiguille des secondes est coincée sur 13h42."
                "\nVous voici au sixième étage du Coliseum , une fracture entre temps et société de quartiers pauvres."
            )
        elif Player.numero_de_letage == 7:
            if Player.nom_de_letage == "Douves du Pénitent":
                commentaire = (
                    "Vous laissez derrière vous le royaume du prince des voleurs, et entendez le sons de quelques clapotis."
                    "\nDes murs de pierre nus, trainés dans la boue, des grilles protégeants quelques culs de sacs des rares personnes a s'aventurer ici, "
                    "\net une peu profonde mais omniprésente couche d'eau tapissant le sol d'un étage qui ressemble plus a une prison innondée qu'a un lieu de vie."
                    "\nVous voici au septieme étage du Coliseum , la bulle de confort d'un esprit torturé par ses propres décisions, pleurant a jamais un pardon qui ne peut être accordé."
                )
            else:
                commentaire = (
                    "Vous laissez derrière vous le royaume du prince des voleurs, et sentez la température augmenter."
                    "\nDes flammes inextinguibles, des cris sans réponses venant de nulle part, des cadavres accrochés a différents instruments de torture, "
                    "\net le mot *Traitre* écrit a l'aide de différents type **d'encre** sur tout les murs de l'arène, telle est la vision qui vous attend en bas."
                    "\nVous voici au septieme étage du Coliseum , le bac à sable d'un esprit fou, torturé, paranoïaque."
                )
        elif Player.numero_de_letage == 8:
            commentaire = (
                "Vous laissez derrière vous les cris de désespoirs, et vous concentrez sur votre but."
                "\nDes murs propres, neufs, ornés de torches. Un sol de marbre, dépassant les gradins, montant au plafond.\nEt une place au dessus de la sortie,"
                " sur laquelle se trouve un vieil homme à la barbe blanche, soignée.\nVoila ce que vous trouvez en bas."
                "\nVous voici au huitième étage du Coliseum , une arène digne de ce nom pour un affrontement avec son créateur."
            )
        elif Player.numero_de_letage == 9 and not ("Marque du Sacrifice" in Player.liste_dartefacts_optionels):
            print(
                "Derrière, vous voyez un long couloir.\nUne vieille porte rouillée a votre gauche vous intrigue,"
                " mais pas plus que ca."
            )
            Affichage.EntreePourContinuer()
            print(
                "Sur le chemin menant a la fin du couloir, vous voyez un petit trou dans les murs."
                "\nA l'interieur, vous apercevez le mot coliseum reposant sur une sorte d'épée,\navec un genre de scintillement au dessus du i."
                "\nEn dessous, le mot O B S E R V A T O R I U M est gravé au couteau, et un nombre en dessous de chaques lettre."
                "\nCa fait un nombre sacrément long !"
            )
            Affichage.EntreePourContinuer()
            commentaire = (
                "Mais vos pensées sont interrompues par le chant des oiseaux que vous entendez a quelques metres."
                "\nVous courrez en direction de la sortie, et retrouvez l'herbe verte, les batiments au loin, et le grillage"
                " caractéristique entourant le Coliseum.\nVous êtes sorti vivant !"
            )
        elif Player.numero_de_letage == 9:
            print("Vous arrivez au couloir de la sortie, mais vos yeux sont fixé sur l'étrange porte rouillée a votre gauche.")
            Affichage.EntreePourContinuer()
            print("La marque sur votre épaule chauffe un peu, et la porte s'ouvre en grand.")
            Affichage.EntreePourContinuer()
            print("Vous descendez les escaliers derrière la porte.")
            Affichage.EntreePourContinuer()
            commentaire = (
                "Vous laissez derrière vous la sortie et les promesses de vie facile à la poursuite de la véritée."
                "\nUn étage étrange, ou la fabrique de la réalitée semble venir mourir a vos pied."
                "\nVous pouvez retrouver un élément de chaque étages sur le sol froid de l'arène, et quand ce n'est pas leur couleur, c'est leur proportion qui varie."
                "\nCertaines banderolles sont encastrés dans le mur, des carrés de sables sortent ca et la de nulle part, "
                "\net vous êtes a peu pres sur que la géométrie des lieux est non euclidienne vu que vous pouvez traverser la salle en un pas si vous passez au bon endroit."
                "\nVous voici au neuvième étage du Coliseum , une poubelle ou viennent reposer les concepts oubliés."
            )
        elif Player.numero_de_letage == 10:
            if Player.nom_de_letage == "Limbes Flétrissants" and Player.numero_boss_alt == 1:
                commentaire = (
                    "Vous passez la porte, qui se referme derriere vous."
                    "\nDevant vous s'étend un vide noir pourpre qui semble ne jamais finir, et en vous retournant vous ne voyez plus la porte."
                    "\nA la place, vous voyez une batisse de bois décrépite, comme une ferme, entourés par des champs labourés stériles, le tout sur une ile qui semble flotter dans le vide."
                    "\nUne entité vous attend devant la porte de la ferme, la même qui vous a attiré ici vous en êtes sûr."
                    "\nVous voici Là ou les Fleurs viennent Fâner, quelque part dans le Coliseum."
                )
            elif Player.nom_de_letage == "Limbes Flétrissants" and Player.numero_boss_alt != 1:
                commentaire = (
                    "Vous avancez à tâton dans le noir, et finissez par trouver un rayon de lumière qui semble percer l'obscurité."
                    "\nVous vous en approchez, et tendez le bras pour toucher la lumière..."
                    "\n...mais a la place votre main pousse une porte de vieux bois, et vous vous retrouvez devant la ferme en ruine et les champs de poussière."
                )
            else:
                commentaire = (
                    "Vous laissez derrière vous l'étage instable et sentez la température baisser."
                    "\nArrivé en bas de l'escalier, vous trouvez un étage d'apparence similaire au premier, mais plus propre ; presque neuf."
                    "\nLa pierre qui constitue les murs est solide, complète, et le sable du sol de l'arène est fin, sans aucune impuretée."
                    "\nCepandant, le son de vos pas semble se perdre dans le néant, alors qu'un écho quasi constant accompagné de courants d'air remplit l'étage."
                    "\nVous regardez à travers l'une des ouvertures de l'arène, et votre regard disparait dans des couloirs qui semblent ne jamais finir, déservant tout autant de salles."
                    "\nVous voici dans la dernière idée de la Pierre de Désir : l'étage aux 100 salles."
                )
        elif Player.numero_de_letage == 11:
            commentaire = (
                "Vous laissez enfin les marches de l'étage interminable et avancez vers la fin de votre voyage."
                "\nUne salle blanche vous attend en bas. Tout est blanc, et vous n'arrivez pas a définir les limites de la salle. Il n'y a que le nécessaire."
                "\nVous voici au onzième étage du Coliseum , la pénultième vision."
            )
        elif Player.numero_de_letage == 12:
            commentaire = (
                "Derrière, vous retrouvez le chant des oiseaux, l'herbe verte, et le grillage"
                " caractéristique entourant le Coliseum.\nVous êtes sorti vivant, riche, et puissant !"
            )
        print(commentaire)
        Affichage.EntreePourContinuer()
        Sove.RajouteEntreeAuLivreCigogneBlancheSiOnAPas("Les Etages", Player.nom_de_letage)
        if Player.numero_de_letage == 1 and Player.mode_de_jeu != "Ascension":
            DonneSouvenirsDeTechniqueEtSorts()
        if Player.benediction == "Polyvalent"and Player.mode_de_jeu != "Ascension":
            print("D'anciennes prières arrivent jusqu'à vous, et font apparaitre une petite boite de bois noir, que vous vous empressez d'ouvrir !")
            Affichage.EntreePourContinuer()
            FloorMaker.GiveRandomArtefact()
        if Player.benediction == "Extraordinaire"and Player.mode_de_jeu != "Ascension":
            print("D'anciennes prières arrivent jusqu'à vous, et enchantent une de vos actions !")
            Affichage.EntreePourContinuer()
            EnchantementAleatoire()
        if Player.numero_de_letage == 4 and "Mage" in Player.liste_dartefacts_optionels:
            print("*Je... je sens quelque chose.*")
            Affichage.EntreePourContinuer()
            print("Vous stoppez votre descente au moment ou vos pieds touchent le sol de l'étage, et vous tournez vers la Mage qui vous accompagne.")
            Affichage.EntreePourContinuer()
            print("*C'est la que nos chemins se séparent.*")
            Affichage.EntreePourContinuer()
            print("Vous lui lancez un regard sévère, inquisiteur.")
            Affichage.EntreePourContinuer()
            print("*Quand je fais quelque chose, je le fais en suivant mon instinct. Et c'est toujours la bonne chose a faire.*")
            Affichage.EntreePourContinuer()
            print("*Et la, j'ai très envie de toucher ce bouton.*")
            Affichage.EntreePourContinuer()
            print("Vous regardez le bouton en question, que vous n'aviez jamais vu auparavant, ainsi que la pancarte *LIVRAISON* juste au dessus")
            Affichage.EntreePourContinuer()
            print("*Je ne sais pas ce qui va se passer, mais sache une chose : si on doit se retrouver, on se retrouvera. Et maintenant...*")
            Affichage.EntreePourContinuer()
            print("La mage s'approche du bouton, et l'enfonce.")
            Affichage.EntreePourContinuer()
            print("Plusieurs secondes s'écoulent...")
            Affichage.EntreePourContinuer()
            print("Le bruit des plateaux volants remplit la salle...")
            Affichage.EntreePourContinuer()
            print("...")
            Affichage.EntreePourContinuer()
            print("*Oh. Fausse alerte alors ! Je m'attendais a quelque chose d'au-")
            time.sleep(3)
            ClearConsole()
            print("Un piano a queue tombe sur la Mage.")
            PlaySound("death")
            Affichage.EntreePourContinuer()
            print("Vous n'osez pas regarder la scène, alors qu'un des plateau vous donne un bout de papier sur lequel il est écrit :")
            Affichage.EntreePourContinuer()
            print("*LIVRAISON TERMINEE. BONNE JOURNEE !*")
            Affichage.EntreePourContinuer()
            print("Vous détournez le regard, et avancez au centre de l'arène.")
            Affichage.EntreePourContinuer()
            Player.liste_dartefacts_optionels.remove("Mage")
            Sove.ModifieTagsDansSove("Ajout", "Mage Hollistique")


class PlayerCaracteristics:

    def __init__(self):
        self.musique_etage_10 = "etage_10"
        self.musique_combat_10 = "battle_theme_10"
        self.mode_de_jeu = "Normal"
        self.gemme_de_vie = False
        self.gemme_de_mana = False
        self.possede_une_fee = False
        self.mode_jukebox = False
        self.nom_du_personnage = ""
        self.stigma_positif = ""
        self.stigma_negatif = ""
        self.stigma_bonus = ""
        self.techniques_possedes = []
        self.sorts_possedes = []
        self.items_possedes = DICTIONNAIREITEMINITIAL
        self.talents_possedes = ""
        self.flammes_noire = 1
        self.flammes_verte = 2
        self.flammes_bleue = 3
        self.flammes_rouge = 5
        self.poissons = 5
        self.jetons = 0
        self.points_de_vie_max = 0
        self.points_de_vie = 0
        self.points_de_mana_max = 0
        self.points_de_mana = 0
        self.points_de_force = 0
        self.points_dendurance = 0
        self.points_dintelligence = 0
        self.points_de_defence = 0
        self.taux_coup_critique = 0
        self.degat_coup_critique = 0
        self.taux_sort_critique = 0
        self.degat_sort_critique = 0
        self.taux_desquive = 0
        self.nombre_de_gold = 0
        self.nombre_de_red_coin = 0
        self.nombre_de_monstres_tues = 0 # == le nombre d'ame
        self.numero_de_letage = 1
        self.affronte_un_boss = False
        self.commence_le_combat_confus = False
        self.affronte_une_mimique = False
        self.quete = "None"
        self.quete_complete = ["None"]
        self.boss_battu = False
        self.commentaire_boss = "Affronter le Boss"
        self.nombre_dennemis_a_letage = 15
        self.red_coin_recu_par_extermination = False
        self.redcoin_bought = False
        self.library_used = False
        self.liste_daction_oubliees = []
        self.final_library_used = False
        self.quest_giver = True
        self.mercant_healed = False
        self.fountain_used = False
        self.number_of_tirage = 0
        self.invitation_received = False
        self.gold_in_well = 50
        self.chemin_musique = os.path.dirname(os.path.realpath(__file__))
        self.position_y = 0
        self.position_x = 0
        self.numero_de_la_salle = 1
        self.possede_la_cle = False
        self.liste_dartefacts_optionels = []
        self.nombre_de_sacrifices = 0
        self.affronte_obelisque = False
        self.affronte_fin_histoire = False
        self.nom_de_letage = "Aucunes Données Utilisables"
        self.etage_alternatif = False
        self.numero_boss_alt = 1
        self.player_tags = ["Jour"]
        self.death_divinity = False
        donnees_de_s0ve = Observation.GetPermanentThingsFromS0ve()
        if donnees_de_s0ve["77454135415415"] == "Divinité de la Mort":
            self.death_divinity = True
        self.battu_le_sacrifie = False
        self.vies_du_gardien = 12
        self.liste_de_materiaux =  {
            # monstre
            "Coeur Gravitaire": 0,
            "Ectoplasme Chaud": 0,
            "Poussière Animée": 0,
            "Ether Non-Newtonien": 0,
            "Eclat de Verre": 0,

            "Fluide Alien": 0,
            "Morceau de Cloche": 0,
            "Ecaille de Phénix": 0,
            "Roche Glycérine": 0,
            "Poil Gelé": 0,

            "Moustache de Chat": 0,
            "Fragment Osseux": 0,
            "Iris du Malheur": 0,
            "Velour de Cervidé": 0,
            "Composants Electroniques": 0,

            "Eclat de Crystal": 0,
            "Pilules de Roulette": 0,
            "Fragment de Jade": 0,
            "Poussière Dorée Animée": 0,
            "Gemme Bleue": 0,

            # personnage
            "Essence de Vitalitée": 0,
            "Essence de Magie": 0,
            "Essence de Fortitude": 0,
            "Essence de Sagesse": 0,
            "Essence de Résistance": 0,

            "Essence Dorée": 0,
            "Essence Astrale": 0,
            "Essence Carmine": 0,

            # artefact
            "Fragment Mélioratif": 0,
            "Fragment Sophiste": 0,
            "Fragment de Fatalité": 0,
            "Fragment Insatiable": 0,
        }
        self.dictionnaire_duppgrade_qui_necessitent_plus_de_code_pour_fonctionner = {
            "Tisane de Racine" : 0,
            "Tisane d'Ecorce" : 0,
            "Charge de Feu" : 0,
            "Charge de Glace" : 0,
            "Charge de Foudre" : 0,
            "Charge de Terre" : 0,
            "Charge de Chair" : 0,
            "Charge de Sang" : 0,
            "Médaillon de Leprechaun" : 0,
            "Noyau d'Aurelionite" : 0
        }
        self.benediction = RecupereBenedictionEnCours()
        self.malediction = RecupereMaledictionEnCours()
        self.charge_mauvais_tachyon = 0
        self.charge_bon_tachyon = 0
        
        # debug equilibrage
        self.debug_bonus_equilibrage_technique = 50
        self.debug_bonus_equilibrage_technique_critique = 0
        self.debug_bonus_equilibrage_technique_feu = 0
        self.debug_bonus_equilibrage_technique_terre = 0
        self.debug_bonus_equilibrage_technique_foudre = 0
        self.debug_bonus_equilibrage_technique_glace = 0
        self.debug_bonus_equilibrage_technique_physique = 0
        self.debug_bonus_equilibrage_technique_sang = 0
        self.debug_bonus_equilibrage_sort = 50
        self.debug_bonus_equilibrage_sort_critique = 0
        self.debug_bonus_equilibrage_sort_feu = 0
        self.debug_bonus_equilibrage_sort_terre = 0
        self.debug_bonus_equilibrage_sort_foudre = 0
        self.debug_bonus_equilibrage_sort_glace = 0
        self.debug_bonus_equilibrage_sort_physique = 0
        self.debug_bonus_equilibrage_sort_sang = 0
        self.debug_bonus_sang_regain_sante = 0

    def checkForStigmaPlusAhti(self):
        if self.stigma_positif == "Esprit bien rangé, esprit libéré":
            self.points_de_vie += int(self.points_de_vie_max * 0.1)
            print("Observer la salle vous fait du bien. Vous regagnez des points de vie.")
            Affichage.EntreePourContinuer()
            if self.points_de_vie > self.points_de_vie_max:
                self.points_de_vie = self.points_de_vie_max

    def AddGoldToPlayer(self, gain_gold, return_le_gain=False):
        gain_gold += round(gain_gold * (Player.dictionnaire_duppgrade_qui_necessitent_plus_de_code_pour_fonctionner["Noyau d'Aurelionite"] / 100))
        if Player.malediction == "Ascétique":
            gain_gold -= round(gain_gold * 0.5)
        if Player.benediction == "Materiel":
            gain_gold += gain_gold
        Player.nombre_de_gold += (gain_gold)
        if return_le_gain:
            return gain_gold

    def BringBackListeMateriauxToZero(self):
        self.liste_de_materiaux = {
            # monstre
            "Coeur Gravitaire": 0,
            "Ectoplasme Chaud": 0,
            "Poussière Animée": 0,
            "Ether Non-Newtonien": 0,
            "Eclat de Verre": 0,

            "Fluide Alien": 0,
            "Morceau de Cloche": 0,
            "Ecaille de Phénix": 0,
            "Roche Glycérine": 0,
            "Poil Gelé": 0,

            "Moustache de Chat": 0,
            "Fragment Osseux": 0,
            "Iris du Malheur": 0,
            "Velour de Cervidé": 0,
            "Composants Electroniques": 0,

            "Eclat de Crystal": 0,
            "Pilules de Roulette": 0,
            "Fragment de Jade": 0,
            "Poussière Dorée Animée": 0,
            "Gemme Bleue": 0,

            # personnage
            "Essence de Vitalitée": 0,
            "Essence de Magie": 0,
            "Essence de Fortitude": 0,
            "Essence de Sagesse": 0,
            "Essence de Résistance": 0,

            "Essence Dorée": 0,
            "Essence Astrale": 0,
            "Essence Carmine": 0,

            # artefact
            "Fragment Mélioratif": 0,
            "Fragment Sophiste": 0,
            "Fragment de Fatalité": 0,
            "Fragment Insatiable": 0,
        }


    def UseCharacterForInitCaracteristics(self, caracteristiques):
        self.nom_du_personnage = caracteristiques[0]
        self.stigma_positif = caracteristiques[2]
        self.stigma_negatif = caracteristiques[3]
        self.stigma_bonus = caracteristiques[4]
        self.techniques_possedes = caracteristiques[5]
        self.sorts_possedes = caracteristiques[6]
        liste_item_a_mettre_a_jour = caracteristiques[7]
        for item in liste_item_a_mettre_a_jour:
            self.items_possedes[item] = liste_item_a_mettre_a_jour[item]
        self.talents_possedes = caracteristiques[8]
        self.points_de_vie_max = caracteristiques[9]
        self.points_de_vie = caracteristiques[9]
        self.points_de_mana_max = caracteristiques[10]
        self.points_de_mana = caracteristiques[10]
        self.points_de_force = caracteristiques[11]
        self.points_dintelligence = caracteristiques[12]
        self.points_de_defence = caracteristiques[13]
        self.taux_coup_critique = caracteristiques[14]
        self.degat_coup_critique = caracteristiques[15]
        self.taux_sort_critique = caracteristiques[16]
        self.degat_sort_critique = caracteristiques[17]
        self.taux_desquive = caracteristiques[18]
        self.nombre_de_gold = caracteristiques[19]
        self.liste_dartefacts_optionels = caracteristiques[20]
        self.points_dendurance = 20

    def PutMateriauxInList(self):
        liste_materiaux = []

        for materiaux in Player.liste_de_materiaux:
            if Player.liste_de_materiaux[materiaux] != 0:
                liste_materiaux.append(f"{materiaux} : {Player.liste_de_materiaux[materiaux]}")

        return liste_materiaux

    def ShowcaseCaracteristics(self):
        liste_artefacts = self.PutArtefactInList()
        liste_materiaux = self.PutMateriauxInList()
        print(f"          -={{ {Player.nom_du_personnage} }}=-")

        print(
            f"\nPoints de vie : {Player.points_de_vie}/{Player.points_de_vie_max}"
            f"\nPoints de mana : {Player.points_de_mana}/{Player.points_de_mana_max}"
            f"\nEndurance maximale : {Player.points_dendurance}"
            f"\nPoints de force : {Player.points_de_force} | Points d'intelligence : {Player.points_dintelligence}"
            f"\nPoints de defence : {Player.points_de_defence}"
            f"\nChance de coup critique : {Player.taux_coup_critique}% | Degats de coup critique : {Player.degat_coup_critique}"
            f"\nChance de sort critique : {Player.taux_sort_critique}% | Degats de sort critique : {Player.degat_sort_critique}"
            f"\nChance d'esquive : {Player.taux_desquive}%"
            f"\nNombre de Golds : {Player.nombre_de_gold} | Nombre de Redcoins : {Player.nombre_de_red_coin}"
            f"\nNombre d'âmes absorbées : {Player.nombre_de_monstres_tues}"
            f"\nQuête en cours : {Player.quete}"
            f"\nQuêtes réalisées : {Player.quete_complete}"
            f"\nTechniques apprises : {Player.techniques_possedes}"
            f"\nSorts appris : {Player.sorts_possedes}"
            f"\nTalents possédés : {Player.talents_possedes}"
            f"\nArtefacts : {liste_artefacts}"
            f"\nStigmas + : {Player.stigma_positif} | Stigmas - : {Player.stigma_negatif} | Stigmas * : {Player.stigma_bonus}"
        )
        if len(liste_materiaux) != 0:
            print(f"Matériaux : {liste_materiaux}")

        if "Griffes du Démon" in Player.techniques_possedes:
            print(f"S4CR1F1CES R1TU3LS P0UR L'1NN0M4BLE : {Player.nombre_de_sacrifices}")

        if Player.malediction == "Chronophage":
            print(f"Charge du tachyon instable : {Player.charge_mauvais_tachyon}")
        if Player.benediction == "Accumulateur de Tachyon":
            print(f"Charge de l'extracteur de Tachyon : {Player.charge_bon_tachyon}")
        if Player.jetons != 0 :
            print(f"Jetons Fidélité : {Player.jetons}")
        if Sove.ModifieTagsDansSove("Checke", "Symbole Vu") :
            level_de_la_cle =  Sove.ModifieLivraisonDansSove("Nombre", "Clé")
            level_de_la_carte =  Sove.ModifieLivraisonDansSove("Nombre", "Carte")
            print(f"\nClé jusqu'à l'étage [{level_de_la_cle + 3}]")
            print(f"Carte jusqu'à l'étage [{level_de_la_carte + 3}]")
        print(" \n          -={{ Items }}=-"
              "\n1 - Retour"
        )
        numero_de_laffichage = Player.AffichageItem()
        numero_de_laffichage = Player.AffichageSortSoin(numero_de_laffichage)
        return numero_de_laffichage, int(
            input("\nChoisissez une action avec les nombres : ")
        )

    def AffichageItem(self):
        self.liste_ditem_a_afficher = []
        for item in Player.items_possedes:
            if Player.items_possedes[item] == 0:
                continue
            self.liste_ditem_a_afficher.append(item)
        numero_de_laffichage = 2
        for item in self.liste_ditem_a_afficher:
            print(f"{numero_de_laffichage} - {item} : {Player.items_possedes[item]}")
            numero_de_laffichage += 1
        return numero_de_laffichage

    def AffichageSortSoin(self, numero_de_laffichage):
        numero_a_afficher = numero_de_laffichage
        for sort in Player.sorts_possedes:
            if sort in ANNUAIRESORTSSOIN:
                if numero_a_afficher == numero_de_laffichage:
                    print("\n     -={{ Sorts de Soin }}=-\n")
                print(f"{numero_a_afficher} - {sort} [{ANNUAIRESORTSSOIN[sort]}pm]")
                numero_a_afficher += 1
        return numero_a_afficher

    def PutArtefactInList(self):
        liste_artefact = []
        if Player.gemme_de_vie:
            liste_artefact.append("Gemme de Vie")
        if Player.gemme_de_mana:
            liste_artefact.append("Gemme d'Esprit")
        if Player.possede_une_fee:
            liste_artefact.append("Fée dans un Bocal")
        if Player.possede_la_cle:
            liste_artefact.append("Clé Incrustée")
        for artefact in Player.liste_dartefacts_optionels:
            liste_artefact.append(artefact)
        if len(liste_artefact) == 0:
            liste_artefact.append("Aucun")
        return liste_artefact
    
    def ShowGarbage(self):

        try:
            print("Vous regardez dans votre sacoche et trouvez :\n")
            liste_de_materiaux =  Sove.ModifieDechetsDansSove("Donne", None, None)
            for dechet in liste_de_materiaux:
                nombre =  Sove.ModifieDechetsDansSove("Nombre", dechet, None)
                if nombre != 0 :
                    print(f"{dechet} : {nombre}")
            print("")
            
            liste_de_uppgrade_a_afficher = {}
            for uppgrade in UPPGRADESPOSSIBLES:
                level_de_luppgrade =  Sove.ModifieLivraisonDansSove("Nombre", uppgrade)
                if level_de_luppgrade != 0:
                    liste_de_uppgrade_a_afficher[uppgrade] = level_de_luppgrade

            if len(liste_de_uppgrade_a_afficher) != 0:
                print("Vous avez aussi des bons de commande sur lesquels sont écrit :\n")
                for uppgrade in liste_de_uppgrade_a_afficher:
                    if uppgrade == "Clé":
                        print(f"{uppgrade} allant jusqu'a l'étage {liste_de_uppgrade_a_afficher[uppgrade] + 3}")
                    elif uppgrade == "Carte":
                        print(f"{uppgrade} allant jusqu'a l'étage {liste_de_uppgrade_a_afficher[uppgrade] + 4}")
                    else:
                        print(f"{uppgrade} de niveau {liste_de_uppgrade_a_afficher[uppgrade]}")
                print("")

            Affichage.EntreePourContinuer()

        except Exception as error:
            WriteErrorInErrorLog(error)

        

    def ShowPlayerCaracteristicsAndItems(self):
        ClearConsole()
        dans_le_menu = True
        while dans_le_menu:
            while True:
                try:
                    limite_de_choix, choix = Player.ShowcaseCaracteristics()
                    ClearConsole()
                    if choix in range(1, (limite_de_choix)):
                        break
                except ValueError:
                    ClearConsole()
            if choix == 1:
                ClearConsole()
                dans_le_menu = False
            else:
                if choix in range(2, (len(self.liste_ditem_a_afficher) + 2)):
                    item_a_utiliser = self.liste_ditem_a_afficher[choix - 2]
                    Player.UseItem(item_a_utiliser)
                else:
                    position_du_sort = choix - ((len(self.liste_ditem_a_afficher) + 1))
                    Player.UseHealingMagic(position_du_sort)

    def UseHealingMagic(self, position_du_sort):
        # prendre le sort en question
        liste_de_sorts_de_soin = []
        for sort in Player.sorts_possedes:
            if sort in ANNUAIRESORTSSOIN:
                liste_de_sorts_de_soin.append(sort)
        sort_de_soin_a_utiliser = liste_de_sorts_de_soin[(position_du_sort - 1)]
        # voir si on peux utiliser le sort
        cout_du_sort = ANNUAIRESORTSSOIN[sort_de_soin_a_utiliser]
        if Player.points_de_mana >= cout_du_sort:
            # utilisation du sort
            Player.points_de_mana -= cout_du_sort
            print(
                f"Vous prenez le temps de vous concentrer pour lancer le sort [{sort_de_soin_a_utiliser}], ce qui réduit son cout en mana et augmente son efficacité."
            )
            print(ANNUAIREDESCRIPTIONSORTSSOIN[sort_de_soin_a_utiliser])
            soin = round(
                (
                    (
                        (POURCENTAGESORTSOIN[sort_de_soin_a_utiliser])
                        + (self.points_dintelligence // 4)
                    )
                    / 100
                )
                * self.points_de_vie_max
            )
            if soin < SOINMINIMUMSORTSOIN[sort_de_soin_a_utiliser]:
                soin = SOINMINIMUMSORTSOIN[sort_de_soin_a_utiliser]
            soin += self.points_dintelligence
            self.points_de_vie += soin
            if self.points_de_vie > self.points_de_vie_max:
                self.points_de_vie = self.points_de_vie_max
            print(f"Vous reprenez {soin} points de vie !")
        else:
            # pas assez de mana
            print(
                "Vous condensez le mana pour invoquer le sort...mais pas assez ne se réunit pour terminer l'invoquation."
            )
        Affichage.EntreePourContinuer()
        ClearConsole()

    def UseItem(self, item):
        if item in ["Feuille Jindagee", "Fruit Jindagee"]:
            Player.items_possedes[item] -= 1
            if item == "Feuille Jindagee":
                soin = 5 + round(Player.points_de_vie_max * 0.05)
                if soin < 8:
                    soin = 8
            elif item == "Fruit Jindagee":
                soin = 10 + round(Player.points_de_vie_max * 0.1)
                if soin < 13:
                    soin = 13
            bonus_soin = 0
            if self.stigma_positif == "Pharmacodynamisme":
                bonus_soin += 1
            if "Carte du Gout" in Player.talents_possedes:
                bonus_soin += 0.5
            soin += round(bonus_soin * soin)
            soin += Player.dictionnaire_duppgrade_qui_necessitent_plus_de_code_pour_fonctionner["Tisane d'Ecorce"]
            nombre_tour = 3
            if "Larme d'Yggdrasil" in Player.liste_dartefacts_optionels:
                nombre_tour += 3
            soin_final = soin * nombre_tour
            self.points_de_vie += soin_final
            if Player.points_de_vie > Player.points_de_vie_max:
                Player.points_de_vie = Player.points_de_vie_max
            print(
                f"Vous utilisez l'item [{item}], et regagnez {soin_final} points de vie en peu de temps !"
            )
        elif item in ["Feuille Aatma", "Fruit Aatma"]:
            Player.items_possedes[item] -= 1
            if item == "Feuille Aatma":
                soin = 5 + round(Player.points_de_mana_max * 0.05)
                if soin < 8:
                    soin = 8
            elif item == "Fruit Aatma":
                soin = 10 + round(Player.points_de_mana_max * 0.1)
                if soin < 13:
                    soin = 13
            bonus_soin = 0
            if self.stigma_positif == "Pharmacodynamisme":
                bonus_soin += 1
            if "Carte du Gout" in Player.talents_possedes:
                bonus_soin += 0.5
            soin += round(bonus_soin * soin)
            soin += Player.dictionnaire_duppgrade_qui_necessitent_plus_de_code_pour_fonctionner["Tisane de Racine"]
            nombre_tour = 3
            if "Larme d'Yggdrasil" in Player.liste_dartefacts_optionels:
                nombre_tour += 3
            soin_final = soin * nombre_tour
            self.points_de_mana += soin_final
            if Player.points_de_mana > Player.points_de_mana_max:
                Player.points_de_mana = Player.points_de_mana_max
            print(
                f"Vous utilisez l'item [{item}], et regagnez {soin_final} points de mana en peu de temps !"
            )
        elif item in ["Remède", "Remède Superieur", "Remède Divin"]:
            Player.items_possedes[item] -= 1
            if item == "Remède":
                soin = round(Player.points_de_vie_max * 0.1)
                if soin < 17:
                    soin = 17
            elif item == "Remède Superieur":
                soin = round(Player.points_de_vie_max * 0.2)
                if soin < 27:
                    soin = 27
            elif item == "Remède Divin":
                soin = round(Player.points_de_vie_max * 0.3)
                if soin < 39:
                    soin = 39
            soin += Player.dictionnaire_duppgrade_qui_necessitent_plus_de_code_pour_fonctionner["Tisane d'Ecorce"]
            bonus_soin = 0
            if self.stigma_positif == "Pharmacodynamisme":
                bonus_soin += 1
            if "Carte du Gout" in Player.talents_possedes:
                bonus_soin += 0.5
            soin += round(bonus_soin * soin)
            Player.points_de_vie += soin
            if Player.points_de_vie > Player.points_de_vie_max:
                Player.points_de_vie = Player.points_de_vie_max
            print(
                f"Vous appliquez le remède sur vos blessures et regagnez {soin} points de vie !"
            )
        elif item in ["Pillule", "Pillule Superieure", "Pillule Divine"]:
            Player.items_possedes[item] -= 1
            if item == "Pillule":
                soin = round(Player.points_de_mana_max * 0.1)
                if soin < 17:
                    soin = 17
            elif item == "Pillule Superieure":
                soin = round(Player.points_de_mana_max * 0.2)
                if soin < 27:
                    soin = 27
            elif item == "Pillule Divine":
                soin = round(Player.points_de_mana_max * 0.3)
                if soin < 39:
                    soin = 39
            soin += Player.dictionnaire_duppgrade_qui_necessitent_plus_de_code_pour_fonctionner["Tisane de Racine"]
            bonus_soin = 0
            if self.stigma_positif == "Pharmacodynamisme":
                bonus_soin += 1
            if "Carte du Gout" in Player.talents_possedes:
                bonus_soin += 0.5
            soin += round(bonus_soin * soin)
            Player.points_de_mana += soin
            if Player.points_de_mana > Player.points_de_mana_max:
                Player.points_de_mana = Player.points_de_mana_max
            print(f"Vous avalez la pillule et regagnez {soin} points de mana !")
        else:
            print(f"Vous preferez garder l'item [{item}] pour les combats.")
        Affichage.EntreePourContinuer()


class DrawInTurtle:

    def __init__(self):
        self.can_draw = False
        if  Sove.ModifieLivraisonDansSove("Limite", "Carte", Player.numero_de_letage - 4) and  Sove.ModifieTagsDansSove("Checke","Livraison Terminée"):
            self.can_draw = True


    def peche(self):
        if self.can_draw:
            up()
            left(90)
            forward(2)
            right(90)
            forward(6)
            right(135)
            down()
            forward(9)
            #
            left(90)
            forward(7)
            left(180)
            circle(7, 90)
            left(180)
            forward(7)
            left(90)
            #
            forward(9)
            right(90)
            forward(9)
            right(90)
            forward(9)
            left(45)
            #
            up()



    def monstre(self):
        if self.can_draw:
            down()
            right(45)
            forward(10)
            backward(20)
            forward(10)
            left(90)
            forward(10)
            backward(20)
            forward(10)
            right(45)
            right(90)
            up()
            forward(7)
            left(90)
            down()
            circle(7)
            up()
            left(90)
            forward(7)
            right(90)

    def bete(self):
        if self.can_draw:
            up()
            backward(5)
            right(90)
            forward(10)
            left(90)
            down()
            circle(10,180)
            up()
            backward(10)
            down()
            circle(10,180)
            up()
            left(90)
            forward(10)
            right(90)
            forward(5)

    def gold(self):
        if self.can_draw:
            forward(7)
            left(90)
            down()
            circle(7)
            up()
            left(90)
            forward(7)
            right(180)

    def puit(self):
        if self.can_draw:
            forward(12)
            left(90)
            down()
            circle(12)
            up()
            left(90)
            forward(12)
            right(180)

    def piege(self):
        if self.can_draw:
            down()
            right(45)
            forward(10)
            backward(20)
            forward(10)
            left(90)
            forward(10)
            backward(20)
            forward(10)
            right(45)
            up()

    def docs(self):
        if self.can_draw:
            down()
            up()
            forward(7)
            left(90)
            down()
            circle(7)
            up()
            left(90)
            forward(7)
            right(90)
            right(90)
            up()

    def salle(self):
        if self.can_draw:
            up()
            forward(12.5)
            left(90)
            down()
            forward(12.5)
            left(90)
            forward(25)
            left(90)
            forward(25)
            left(90)
            forward(25)
            left(90)
            forward(12.5)
            right(90)
            up()

    def workshop(self):
        if self.can_draw:
            up()
            forward(1)
            left(90)
            forward(1.5)
            right(90)
            right(33)
            down()
            forward(7.5)
            right(90)
            forward(4)
            left(90)
            circle(2, 180)
            left(90)
            forward(4)
            right(90)
            forward(15)
            right(30)
            forward(4)
            right(120)
            forward(4)
            right(120)
            forward(4)
            backward(4)
            left(90)
            forward(7.5)
            up()
            right(90)
            forward(1.5)
            left(123)
            backward(1)



    def lotterie(self):
        if self.can_draw:
            up()
            backward(8)
            left(90)
            forward(10)
            right(120)
            down()
            forward(20)
            right(120)
            forward(20)
            right(120)
            forward(20)
            right(120)
            forward(10)
            right(60)
            forward(10)
            right(120)
            forward(10)
            right(120)
            forward(10)
            right(30)
            up()

    def entree(self):
        if self.can_draw:
        
            if Player.numero_de_letage == -1:
                up()
                forward(12.5)
                left(90)
                backward(37.5)
                right(90)
                down()
                circle(25, 90)
                forward(25)
                circle(25, 90)
                forward(25)
                circle(25, 90)
                forward(25)
                circle(25, 90)
                forward(25)
                up()
            else:
                up()
                left(90)
                forward(37.5)
                right(90)
                forward(12.5)
                down()
                for _ in range(1, 5):
                    hypothenuse = math.sqrt(22656.25)
                    #hypothenuse2 = math.sqrt(2031.35) hypothénuse pour des pics moins grands, au cas ou
                    angle = 131.65
                    #angle2 = 124.62 angle pour des pics moins grands, au cas ou
                    remise_a_zero_de_langle = angle - 90
                    right(90)
                    forward(12.5)
                    left(angle)
                    forward(hypothenuse)
                    up()
                    ColiseumGoto(0, 0)
                    right(remise_a_zero_de_langle)
                    forward(37.5)
                    left(90)
                    down()
                    forward(12.5)
                    left(90)
                    forward(12.5)
                    right(angle)
                    forward(hypothenuse)
                    up()
                    ColiseumGoto(0, 0)
                    left(remise_a_zero_de_langle)
                    right(90)
                    forward(37.5)
                    right(90)
                    down()
                    forward(12.5)

            up()
            backward(12.5)
            right(90)
            forward(37.5)
            left(180)

    def key(self):
        if self.can_draw:
            down()
            forward(6)
            left(90)
            forward(2)
            right(90)
            forward(4)
            right(90)
            forward(4)
            right(90)
            forward(4)
            right(90)
            forward(2)
            left(90)
            forward(6)
            right(180)
            forward(3)
            left(90)
            forward(1)
            backward(1)
            left(90)
            forward(3)
            right(90)
            forward(2)
            backward(2)
            right(90)
            up()

    def item(self):
        if self.can_draw:
            up()
            left(90)
            forward(8)
            left(90)
            forward(10)
            right(180)
            down()
            forward(20)
            right(90)
            forward(16)
            right(90)
            forward(20)
            right(90)
            forward(16)
            up()
            right(90)
            forward(10)
            right(90)
            forward(8)
            left(90)

    def boss(self):
        if self.can_draw:
            up()
            left(90)
            forward(8)
            left(90)
            forward(10)
            right(180)
            down()
            forward(20)
            right(90)
            forward(16)
            right(90)
            forward(20)
            right(90)
            forward(16)
            up()
            right(90)
            forward(10)
            right(90)
            forward(8)
            left(90)
            right(90)
            forward(5)
            left(90)
            down()
            circle(5)
            up()
            left(90)
            forward(5)
            right(90)
            down()
            forward(10)
            backward(20)
            forward(10)
            up()

    def liane(self):
        self.item()
        self.piege()

    def broken(self):
        if self.can_draw:
            down()
            left(90)
            forward(8)
            backward(16)
            forward(8)
            right(45)
            forward(6)
            backward(12)
            forward(6)
            right(45)
            forward(8)
            backward(16)
            forward(8)
            right(45)
            forward(6)
            backward(12)
            forward(6)
            left(45)
            up()

    def E(self):
        up()
        backward(25)
        down()
        right(90)
        forward(5)
        backward(5)
        right(90)
        forward(4)
        left(90)
        forward(3)
        backward(3)
        right(90)
        forward(4)
        left(90)
        forward(6)
        up()

    def sequence(self):
        if self.can_draw:
            up()
            right(90)
            forward(6.125)
            left(90)
            forward(8)
            left(90)
            forward(10.5)
            right(90)
            down()
            right(90)
            forward(8)
            backward(8)
            right(90)
            forward(8)
            left(90)
            forward(6)
            backward(6)
            right(90)
            forward(7)
            left(90)
            forward(9)
            up()
            left(90)

    def T(self):
        forward(4)
        left(90)
        down()
        forward(7)
        backward(2)
        right(90)
        forward(3)
        backward(3)
        left(90)
        backward(5)
        right(90)
        up()

    def A(self):
        forward(7)
        left(90)
        down()
        forward(4)
        right(45)
        forward(0.5)
        right(45)
        forward(4)
        right(45)
        forward(0.5)
        left(135)
        forward(1.5)
        backward(1.5)
        backward(4.5)
        forward(0.5)
        left(90)
        left(45)
        forward(0.8)
        right(45)
        forward(4.5)
        up()
        right(180)
        forward(5)
        left(90)
        forward(0.5)
        right(90)

    def coeur(self):
        if self.can_draw:
            down()
            forward(10)
            backward(5)
            left(90)
            forward(4)
            backward(8)
            forward(4)
            left(90)
            forward(7)
            right(120) #
            forward(7)
            left(150)
            forward(12)
            backward(12)
            right(150)
            backward(7)
            left(120)
            left(120) #
            forward(7)
            right(150)
            forward(12)
            backward(12)
            left(150)
            backward(7)
            right(120)
            right(180)
            up()

    def brazier(self):
        if self.can_draw:
            up()
            left(90)
            forward(8)
            right(90)
            forward(2)
            right(180)
            down()
            circle(8,180)
            right(180)
            up()
            forward(2)
            right(90)
            forward(8)
            right(90)
            backward(5)
            forward(5)
            right(150)
            down()
            forward(10)
            right(120)
            forward(10)
            right(120)
            forward(10)
            left(30)
            up()

    def machine(self):
        if self.can_draw:
            forward(2)
            down()
            left(90)
            forward(3)
            backward(6)
            forward(3)
            right(90)
            forward(5)
            left(90)
            forward(10)
            left(90)
            forward(15)
            left(90)
            forward(10)
            left(90)
            forward(3)
            left(90)
            forward(3)
            backward(6)
            forward(3)
            right(90)
            backward(5)
            right(90)
            forward(10)
            left(90)
            forward(15)
            left(90)
            forward(10)
            up()
            setheading(90)

    def e(self):
        if self.can_draw:
            forward(5)
            down()
            forward(4)
            backward(4)
            left(90)
            forward(5)
            right(90)
            forward(5)
            right(90)
            forward(3)
            right(90)
            forward(5)
            left(90)
            forward(2)
            left(90)
            forward(5)
            up()

    def un(self):
        forward(10)
        down()
        forward(5)
        backward(2.5)
        left(90)
        forward(6)
        left(90)
        left(35)
        forward(4)
        right(35)
        right(90)
        up()

    def deux(self):
        forward(10)
        down()
        forward(5)
        backward(5)
        left(45)
        forward(4)
        left(45)
        forward(2)
        left(90)
        forward(3)
        left(45)
        forward(2)
        right(45)
        right(90)
        up()

    def trois(self):
        forward(10)
        down()
        forward(5)
        left(90)
        forward(3)
        left(90)
        forward(3)
        backward(3)
        right(90)
        forward(3)
        left(90)
        forward(5)
        right(90)
        up()

    def quatre(self):
        forward(10)
        forward(2.5)
        left(90)
        forward(2)
        down()
        backward(2)
        forward(8)
        left(90)
        left(55)
        forward(6)
        left(35)
        left(90)
        forward(6)
        left(90)
        up()

    def cinq(self):
        forward(10)
        down()
        forward(5)
        left(90)
        forward(2.5)
        left(90)
        forward(5)
        right(90)
        forward(2.5)
        right(90)
        forward(5)
        left(90)
        up()

    def six(self):
        forward(10)
        down()
        left(90)
        forward(2.5)
        backward(2.5)
        right(90)
        forward(5)
        left(90)
        forward(2.5)
        left(90)
        forward(5)
        right(90)
        forward(2.5)
        right(90)
        forward(5)
        left(90)
        up()

    def neuf(self):
        forward(10)
        down()
        forward(5)
        left(90)
        forward(5)
        forward(3)
        left(90)
        forward(5)
        left(90)
        forward(3)
        left(90)
        forward(5)
        left(90)
        up()

    def sept(self):
        right(45)
        backward(6.25)
        down()
        forward(12.5)
        left(135)
        forward(5)
        up()
        setheading(90)

    def obelisque(self, posx, posy):
        if self.can_draw:
            self.sept()
            ColiseumGoto(posx, posy)
            right(45)
            self.sept()
            ColiseumGoto(posx, posy)
            right(90)
            self.sept()
            ColiseumGoto(posx, posy)
            right(135)
            self.sept()
            ColiseumGoto(posx, posy)
            right(180)
            self.sept()
            ColiseumGoto(posx, posy)
            left(45)
            self.sept()
            ColiseumGoto(posx, posy)
            left(90)
            self.sept()
            ColiseumGoto(posx, posy)
            left(135)
            self.sept()
            ColiseumGoto(posx, posy)
            left(180)
            self.sept()
            ColiseumGoto(posx, posy)

    def ddr(self):
        if self.can_draw:
            backward(6)
            down()
            circle(4)
            forward(15)
            right(90)
            forward(7)
            right(90)
            forward(5)
            right(90)
            forward(7)
            right(90)
            up()
            backward(4)

    def Af(self):
        forward(4)
        left(90)
        down()
        forward(4)
        right(45)
        forward(0.5)
        right(45)
        forward(4)
        right(45)
        forward(0.5)
        left(135)
        forward(1.5)
        backward(1.5)
        backward(4.5)
        forward(0.5)
        left(90)
        left(45)
        forward(0.8)
        right(45)
        forward(4.5)
        up(self)
        right(180)
        forward(5)
        left(90)
        forward(0.5)
        right(90)

    def spot(self):
        if self.can_draw:
            up()
            left(90)
            forward(2)
            right(45)
            down()
            forward(7)
            right(90)
            forward(4)
            right(90)
            forward(7)
            left(90)
            forward(7)
            right(90)
            forward(4)
            right(90)
            forward(7)
            left(90)
            forward(7)
            right(90)
            forward(4)
            right(90)
            forward(7)
            left(90)
            forward(7)
            right(90)
            forward(4)
            right(90)
            forward(7)
            up()
            forward(2)
            left(90)
            right(45)

    def mimique(self):
        if self.can_draw:
            longueur = 12.25 / 2
            largeur = 6.125 / 2
            up()
            forward(largeur)
            left(90)
            forward(largeur)
            down()
            forward(longueur)
            right(90)
            forward(largeur)
            right(90)
            forward(longueur)
            right(90)
            forward(largeur)
            left(90)
            up()
            forward(longueur)
            down()
            forward(longueur)
            left(90)
            forward(largeur)
            left(90)
            forward(longueur)
            left(90)
            forward(largeur)
            right(90)
            up()
            forward(largeur)
            right(90)
            backward(largeur)
            left(140)
            down()
            forward(3)
            up()
            backward(3)
            left(80)
            down()
            forward(3)
            up()
            backward(3)
            left(140)
            self.item()

    def rituel(self):
        if self.can_draw:
            down()
            up()
            left(90)
            forward(5)
            right(90)
            down()
            forward(3)
            backward(6)
            forward(3)
            right(90)
            forward(10)
            left(90)
            forward(3)
            backward(6)
            forward(3)
            left(90)
            forward(5)
            left(90)
            forward(10)
            right(90)
            forward(3)
            backward(6)
            forward(3)
            right(90)
            forward(10)
            up()

    def ley(self):
        if self.can_draw:
            down()
            left(90)
            forward(2)
            right(90)
            forward(12.5)
            backward(12.5)
            right(90)
            forward(4)
            right(90)
            forward(12.5)
            backward(12.5)
            right(90)
            forward(2)
            right(90)
            up()
    
    def eclair(self):
        if self.can_draw:
            self.ley()
            left(90)
            forward(6)
            right(90)
            self.ley()
            right(90)
            forward(12)
            left(90)
            self.ley()
            left(90)
            forward(6)
            right(90)

    def affixeur_technique(self):
        if self.can_draw:
            left(90)
            self.secret("quart")
            left(90)
            self.secret("moitie")
            left(90)
            self.secret("autre_quart")
            right(180)
            up()
            backward(1)
            right(90)
            forward(2)
            down()
            left(30)
            forward(5)
            right(60)
            forward(5)
            right(120)
            forward(5)
            right(60)
            forward(5)
            right(60)
            up()
            setheading(90)

    def affixeur_sort(self):
        if self.can_draw:
            left(90)
            self.secret("quart")
            left(90)
            self.secret("moitie")
            left(90)
            self.secret("autre_quart")
            right(180)
            up()
            backward(1)
            right(90)
            forward(6)
            right(90)
            forward(3)
            left(90)
            down()
            circle(3)
            up()
            setheading(90)

            

    

    def secret(self, type="plein"):
        if self.can_draw:
            down()
            if type == "autre_quart":
                right(35)
                forward(10)
                left(125)
                forward(5.73)
                left(90)
                forward(9)
                right(180)
                up()
            else:
                left(35)
                forward(10)
                right(125)
                if type == "quart":
                    forward(5.73)
                    right(90)
                    forward(9)
                    left(180)
                    up()
                else:
                    forward(11.47)
                    right(125)
                    if type == "moitie":
                        forward(10)
                        left(215)
                        up()
                    else:
                        forward(20)
                        left(125)
                        forward(11.47)
                        left(125)
                        forward(10)
                        right(35)
                        up()


class Floor:

    def __init__(self):
        self.FloorBlueprint = {}
        self.DictionnaireAjout = {
            # direction : [ajout x, ajout y]
            "Haut": [0, 1],
            "Bas": [0, -1],
            "Gauche": [-1, 0],
            "Droite": [1, 0],
        }
        self.liste_sequence = []
        self.liste_des_salles_observées = []
        self.carte_ouverte = False
        self.ListeDePositionsInconstruisibles = [
            # position x position y
            [-2, -2],
            [-2, -1],
            [-2, 0],
            [-2, 1],
            [-2, 2],
            [-1, -2],
            [-1, -1],
            [-1, 0],
            [-1, 1],
            [-1, 2],
            [0, -2],
            [0, -1],
            [0, 0],
            [0, 1],
            [0, 2],
            [1, -2],
            [1, -1],
            [1, 0],
            [1, 1],
            [1, 2],
            [2, -2],
            [2, -1],
            [2, 0],
            [2, 1],
            [2, 2],
            [3, 2],
            [2, 3],
            [3, 3],
            [3, 4],
            [4, 3],
            [4, 4],
            [4, 5],
            [5, 4],
            [5, 5],
            [-3, -2],
            [-2, -3],
            [-3, -3],
            [-3, -4],
            [-4, -3],
            [-4, -4],
            [-4, -5],
            [-5, -4],
            [-5, -5],
            [-3, 2],
            [-2, 3],
            [-3, 3],
            [-3, 4],
            [-4, 3],
            [-4, 4],
            [-4, 5],
            [-5, 4],
            [-5, 5],
            [3, -2],
            [2, -3],
            [3, -3],
            [3, -4],
            [4, -3],
            [4, -4],
            [4, -5],
            [5, -4],
            [5, -5],
        ]

    def DoPeche(self, type_de_prise):
        if type_de_prise == "Monstre":
            attente_avant_catch = random.randint(35, 45)
            nombre_de_mini_jeu = 6
        elif type_de_prise == "Item":
            attente_avant_catch = random.randint(35, 55)
            nombre_de_mini_jeu = 7
        elif type_de_prise == "Poisson":
            attente_avant_catch = random.randint(45, 65)
            nombre_de_mini_jeu = 9
        elif type_de_prise == "Gros Poisson":
            attente_avant_catch = random.randint(55, 75)
            nombre_de_mini_jeu = 12
        elif type_de_prise == "Redcoin":
            attente_avant_catch = random.randint(55, 85)
            nombre_de_mini_jeu = 15
        elif type_de_prise == "Artefact":
            attente_avant_catch = random.randint(65, 100)
            nombre_de_mini_jeu = 20
        else:
            attente_avant_catch = random.randint(65, 100)
            nombre_de_mini_jeu = 0
        

        attente_avant_catch = random.randint(5, 25)
        #premiere étape : le catch. attendre le bon moment et retirer la ligne.
        PlayMusic("waves")
        etat_du_poisson = self.MechanismeAttentePourPeche(attente_avant_catch)
        ClearConsole()
        if etat_du_poisson == "Nothing":
            print("Vous n'avez pas assez attendu, et rien n'est au bout de l'hameçon !")
            Affichage.EntreePourContinuer()
            return "Pas assez attendu"

        elif etat_du_poisson == "Away":
            print("Vous avez trop attendu, et le poisson s'est en allé !")
            Affichage.EntreePourContinuer()
            return "Trop attendu"

        elif etat_du_poisson == "Catch":
            PlaySound("catch")
            print("Un poisson mort a l'hameçon !")
            time.sleep(2)
            Affichage.EntreePourContinuer()
            if nombre_de_mini_jeu == 0:
                print("Nan, je rigole.\nYa rien à pecher, vous vous souvenez ?")
                Affichage.EntreePourContinuer()
                return "Pas assez attendu"
            else:
                PlayMusic("fishing")
                self.limite_chronometre = 5
                self.debut_chronometre = time.time()
                for _ in range(0, (nombre_de_mini_jeu + 1)):
                    #faire 3 mini jeu different : mouvements opposé, attendre, spam 
                    numero_aleatoire = random.randint(1, 3)
                    if numero_aleatoire == 1:
                        resultat = self.DoOppose()
                    elif numero_aleatoire == 2:
                        resultat = self.DoWait()
                    elif numero_aleatoire == 3:
                        resultat = self.DoSpam()
                    if resultat == "Loupé":
                        PlaySound("escape")
                        print("Vous avez fait quelque chose de mal, et le poisson à laché l'hameçon !")
                        Affichage.EntreePourContinuer()
                        return resultat
                    elif resultat == "Trop de temps":
                        PlaySound("escape")
                        print("Vous avez mit trop de temps a ramener le poisson, et il a laché l'hameçon !")
                        Affichage.EntreePourContinuer()
                        return resultat
                PlaySound("battle_win")
                print("Attrapé !")
                temps_restant = self.CheckChronometre("temps")
                print(temps_restant)
                Affichage.EntreePourContinuer()
                return type_de_prise
            
    def CheckChronometre(self, parametre="None"):
        chronometre_actuel = time.time()
        temps_depuis_debut = chronometre_actuel - self.debut_chronometre
        if parametre == "temps":
            return (self.limite_chronometre - temps_depuis_debut)
        if temps_depuis_debut < self.limite_chronometre:
            return True
        return False
            
    def DoSpam(self):
        nombre_de_tir = random.randint(8, 15)
        self.limite_chronometre += (nombre_de_tir * 1.1)
        for tir in range(0, nombre_de_tir + 1):
            if tir < 8:
                print("Le poisson fait des petits mouvements !")
            elif tir < 4:
                print("Le poisson se fatigue !")
            else:
                print("Le poisson ne bouge presque plus !")
            if tir == nombre_de_tir:
                dummy = input("\n\nAppuyez sur entrée pour donner un grand coup sur la ligne ")
            else:
                dummy = input("\n\nAppuyez sur entrée pour tirer sur la ligne ")
            ClearConsole()
        if self.CheckChronometre() == False:
            return "Trop de temps"
        else:
            return "Continue"

            
    def DoOppose(self):
        nombre_aleatoire = random.randint(1, 3)
        for _ in range(1, (nombre_aleatoire + 1)):
            self.limite_chronometre += 2
            #type de mouvement du poisson
            numero_aleatoire = random.randint(1,2)
            if numero_aleatoire == 1 :
                type_de_mouvement = "fortement"
            elif numero_aleatoire == 2 :
                type_de_mouvement = "légèrement"

            #mouvement du poisson
            numero_aleatoire = random.randint(1,3)
            if numero_aleatoire == 1 :
                direction_du_mouvement = "la Gauche"
            elif numero_aleatoire == 2 :
                direction_du_mouvement = "la Droite"
            elif numero_aleatoire == 3 :
                direction_du_mouvement = "l'Arrière"

            #mouvement_a_effectuer
            if direction_du_mouvement == "la Gauche" and type_de_mouvement == "légèrement":
                mouvement_a_effectuer = "la Droite"
            elif direction_du_mouvement == "la Droite" and type_de_mouvement == "légèrement":
                mouvement_a_effectuer = "la Gauche"
            elif direction_du_mouvement == "l'Arrière" and type_de_mouvement == "légèrement":
                mouvement_a_effectuer = "l'Avant"
            else:
                mouvement_a_effectuer = direction_du_mouvement

            #liste de mouvements disponibles
            liste_mouvements_disponibles = ["la Gauche", "la Droite", "l'Arrière", "l'Avant"]
            random.shuffle(liste_mouvements_disponibles)

            #affichage
            while True:
                try :
                    print(f"Le poisson tire {type_de_mouvement} vers {direction_du_mouvement} !\n")
                    numero = 1
                    for action in liste_mouvements_disponibles:
                        print(f"{numero} - Tirer vers {action}")
                        numero += 1
                    choix = int(input("\nChoisir avec les nombres, vite ! : "))
                    ClearConsole()
                    if choix in range(1, 5):
                        break
                except ValueError:
                    ClearConsole()

            #verification
            mouvement_effectue = liste_mouvements_disponibles[choix - 1]
            if mouvement_a_effectuer != mouvement_effectue :
                return "Loupé"
            if self.CheckChronometre() == False:
                return "Trop de temps"
        return "Continue"
                
    def DoWait(self):
        attente = random.randint(3,6)
        self.limite_chronometre += attente + 1.25
        prise = self.MechanismeDoWait(attente)
        if prise == "Away":
            return "Trop de temps"
        else:
            return "Continue"

    def MechanismeDoWait(self, attente):
        self.poisson_se_calme = False
        self.ArretePecheAttente = threading.Event()

        # Démarre un thread qui attend le moment où le poisson mord
        self.PecheAttente = threading.Thread(target=self.AttentePourDoWait, args=(attente,))
        self.PecheAttente.start()


        # Attend que l'utilisateur appuie sur "Entrée"
        input("")

        # Arrête le thread d'attente
        self.ArretePecheAttente.set()
        self.PecheAttente.join()

        # Vérifie le résultat
        ClearConsole()
        if self.poisson_se_calme:
            if self.CheckChronometre() == False:
                return "Away"
            else:
                return "Catch"
        
    def AttentePourDoWait(self, attente):
        temps_attendu = 0
        print("Le poisson se débat comme un petit diable !\n\nAppuyer sur entrée pour remonter la ligne.")
        while not self.ArretePecheAttente.isSet():
            time.sleep(0.1)
            temps_attendu += 0.1
            if temps_attendu >= attente:
                ClearConsole()
                print("Le poisson commence à se calmer.\n\nAppuyer sur entrée pour remonter la ligne.")
                self.poisson_se_calme = True
                break

            ####################################################################################################

    def MechanismeAttentePourPeche(self, attente=2.5):
        self.poisson_a_hameçon = False
        self.ArretePecheAttente = threading.Event()

        # Démarre un thread qui attend le moment où le poisson mord
        self.PecheAttente = threading.Thread(target=self.AttentePourPeche, args=(attente,))
        self.PecheAttente.start()

        # Capture l'heure de début
        temps_de_debut_de_peche = time.time()

        # Attend que l'utilisateur appuie sur "Entrée"
        input("")

        # Enregistre l'heure de fin
        temps_de_fin_de_peche = time.time()
        temps_de_peche = temps_de_fin_de_peche - temps_de_debut_de_peche

        # Arrête le thread d'attente
        self.ArretePecheAttente.set()
        self.PecheAttente.join()

        # Vérifie le résultat
        if self.poisson_a_hameçon:
            if attente <= temps_de_peche <= (attente + 0.75):
                return "Catch"
            else:
                return "Away"
        else:
            return "Nothing"

    def AttentePourPeche(self, attente):
        temps_attendu = 0
        print("\n\n\n\nAppuyer sur entrée pour remonter la ligne.")
        while not self.ArretePecheAttente.isSet():
            time.sleep(0.1)
            temps_attendu += 0.1
            if temps_attendu >= attente:
                ClearConsole()
                print("         MAINTENANT\n\n\nAppuyer sur entrée pour remonter la ligne.")
                self.poisson_a_hameçon = True
                break

                



    def ReposDansJacuzzi(self):
        self.ArreteJacuzzi = threading.Event()
        self.Jacuzzi = threading.Thread(target=self.GainDansJacuzzi)
        self.Jacuzzi.start()
        input("")
        self.ArreteJacuzzi.set()
        time.sleep(2)
        ClearConsole()

    def GainDansJacuzzi(self):
        numero = 0
        temps_dattente = 30
        commentaire = ""
        while not self.ArreteJacuzzi.isSet():
            print("            -= Vous vous la coulez douce... =-")
            print(f"              Vos points de vie max : {Player.points_de_vie_max}")
            print(f"              Vos points de mana max : {Player.points_de_mana_max}")
            print("   Taux de conversion : +1 point de mana/vie max par 30 secondes.")
            print(commentaire)
            print("          Appuyez sur entree pour sortir du jacuzzi")
            time.sleep(temps_dattente)
            ClearConsole()
            numero += 1
            if numero > 4:
                commentaire = "\n*Vous devriez en profiter pour faire une pause, parler a votre famille, toucher de l'herbe, aller boire de l'eau...*\n"
            elif numero > 15:
                commentaire = "\n*Elle est bien la musique, hein ?*\n"
            if numero > 30:
                commentaire = "\n*Avec vos doigts completements fripés et vos lèvres violettes, vous n'êtes plus sûr de gagner quoi que ce soit en restant dans le jacuzzi...*\n"
            elif numero%2 == 1 :
                Player.points_de_vie_max += 1
            elif numero%2 == 0:
                Player.points_de_mana_max += 1
            

    def MakeFloorBlueprint(self, nombre_de_salles):
        self.FloorBlueprint = {}
        # faire le dictionnaire de salles, vide
        for numero_de_salle in range(1, (nombre_de_salles + 1)):
            self.FloorBlueprint[numero_de_salle] = {
                "position_x": 0,
                "position_y": 0,
                "marqué sur la carte": False,
                "terminé par joueur": False,
                "type": "None",
            }
        # remplir le dictionnaire avec les salles de base (arene + couloirs sur les cotés)
        if "Schmilblick" in Player.liste_dartefacts_optionels:
            marquage_sur_la_carte = True
        else:
            marquage_sur_la_carte = False
        if (Player.numero_de_letage == 0 and "Combattant le Gardien" not in Player.player_tags) or Player.nom_de_letage == "Limbes Flétrissants":
            fait_par_le_joueur = True
        else:
            fait_par_le_joueur = False
        self.FloorBlueprint[1] = {
            "position_x": 0,
            "position_y": 0,
            "marqué sur la carte": marquage_sur_la_carte,
            "terminé par joueur": False,
            "type": "ENTREE",
        }
        self.FloorBlueprint[2] = {
            "position_x": 2,
            "position_y": 0,
            "marqué sur la carte": marquage_sur_la_carte,
            "terminé par joueur": fait_par_le_joueur,
            "type": "None",
        }
        self.FloorBlueprint[3] = {
            "position_x": -2,
            "position_y": 0,
            "marqué sur la carte": marquage_sur_la_carte,
            "terminé par joueur": fait_par_le_joueur,
            "type": "None",
        }
        self.FloorBlueprint[4] = {
            "position_x": 0,
            "position_y": 2,
            "marqué sur la carte": marquage_sur_la_carte,
            "terminé par joueur": fait_par_le_joueur,
            "type": "None",
        }
        self.FloorBlueprint[5] = {
            "position_x": 0,
            "position_y": -2,
            "marqué sur la carte": marquage_sur_la_carte,
            "terminé par joueur": fait_par_le_joueur,
            "type": "None",
        }
        self.FloorBlueprint[6] = {
            "position_x": 3,
            "position_y": 0,
            "marqué sur la carte": marquage_sur_la_carte,
            "terminé par joueur": fait_par_le_joueur,
            "type": "None",
        }
        self.FloorBlueprint[7] = {
            "position_x": -3,
            "position_y": 0,
            "marqué sur la carte": marquage_sur_la_carte,
            "terminé par joueur": fait_par_le_joueur,
            "type": "None",
        }
        self.FloorBlueprint[8] = {
            "position_x": 0,
            "position_y": 3,
            "marqué sur la carte": marquage_sur_la_carte,
            "terminé par joueur": fait_par_le_joueur,
            "type": "None",
        }
        self.FloorBlueprint[9] = {
            "position_x": 0,
            "position_y": -3,
            "marqué sur la carte": marquage_sur_la_carte,
            "terminé par joueur": fait_par_le_joueur,
            "type": "None",
        }
        # genere aléatoirement une salle autour d'une salle déja posée
        for numero_de_salle in range(1, nombre_de_salles + 1):
            # skippe les salles 1 a 9 deja initialisées
            if numero_de_salle in range(1, 10):
                continue
            # selection de la salle origine, autour de laquelle va se rajouter une salle
            salle_ajoutee = False
            # print(numero_de_salle)
            # time.sleep(1)
            while not salle_ajoutee:
                # choisi une salle au hasard dans le blueprint
                salle_origine = random.randint(6, (numero_de_salle - 1))
                # regarde si il est possible de rajouter une salle autour de cette salle d'origine
                caracteristique_de_la_salle = self.FloorBlueprint[salle_origine]
                position_x_origine = caracteristique_de_la_salle["position_x"]
                position_y_origine = caracteristique_de_la_salle["position_y"]
                # print(position_x_origine)
                # print(position_y_origine)
                liste_de_directions_vide = []
                # test des directions ne possédant pas de salle, depuis l'origine
                for direction in self.DictionnaireAjout:
                    construction_possible = True
                    couple_dajout_sur_les_positions = self.DictionnaireAjout[direction]
                    position_x_potentielle_nouvelle_salle = (
                        position_x_origine + couple_dajout_sur_les_positions[0]
                    )
                    position_y_potentielle_nouvelle_salle = (
                        position_y_origine + couple_dajout_sur_les_positions[1]
                    )

                    # regarde si la position a déja été attribuée a une autre salle
                    for numero_de_salle_a_tester_si_elle_existe_a_la_position_potentielle in (
                        range(1, numero_de_salle)
                    ):
                        salle_a_tester = self.FloorBlueprint[
                            numero_de_salle_a_tester_si_elle_existe_a_la_position_potentielle
                        ]
                        if (
                            position_x_potentielle_nouvelle_salle
                            == salle_a_tester["position_x"]
                            and position_y_potentielle_nouvelle_salle
                            == salle_a_tester["position_y"]
                        ):
                            construction_possible = False
                            break

                    # regarde si la position se trouve dans la zone inconstruisible
                    for position in self.ListeDePositionsInconstruisibles:
                        # print(f"teste {position_x_potentielle_nouvelle_salle}:{position_y_potentielle_nouvelle_salle} | impossible  {position[0]}:{position[1]} ")
                        if (
                            position_x_potentielle_nouvelle_salle == position[0]
                            and position_y_potentielle_nouvelle_salle == position[1]
                        ):
                            construction_possible = False
                            break

                    # si la salle n'est pas sur une salle déja construite ou dans la limite inconstructible,
                    # on rajoute sa direction dans le dictionnaire
                    if construction_possible:
                        liste_de_directions_vide.append(direction)
                        break
                # liste_de_direction_vide contient toute les directions dans lesquelles
                #   on peut mettre une salle a partir de la salle origine sélectionnée.
                # on choisit donc parmis ces directions celle que l'on veut prendre, et on y crée une salle.
                if len(liste_de_directions_vide) != 0:
                    # selection de la direction prise
                    numero_de_la_direction_prise = random.randint(
                        0, (len(liste_de_directions_vide) - 1)
                    )
                    direction_prise = liste_de_directions_vide[
                        numero_de_la_direction_prise
                    ]
                    # selection des positions grace a la direction.
                    couple_dajout_sur_les_positions = self.DictionnaireAjout[direction_prise]
                    position_x_nouvelle_salle = (
                        position_x_origine + couple_dajout_sur_les_positions[0]
                    )
                    position_y_nouvelle_salle = (
                        position_y_origine + couple_dajout_sur_les_positions[1]
                    )
                    # construction salle (ajout au blueprint des position selectionnées)
                    salle_a_construire = self.FloorBlueprint[numero_de_salle]
                    salle_a_construire["position_x"] = position_x_nouvelle_salle
                    salle_a_construire["position_y"] = position_y_nouvelle_salle
                    if "Schmilblick" in Player.liste_dartefacts_optionels:
                        salle_a_construire["marqué sur la carte"] = True
                    if Player.nom_de_letage == "Limbes Flétrissants" or (Player.numero_de_letage == 0 and "Combattant le Gardien" not in Player.player_tags) :
                        salle_a_construire["terminé par joueur"] = True
                    salle_ajoutee = True

    def SetupFloorBlueprint(self):
        # prendre les numeros des salles vides (normalement, de 2 a nombre_salle)
        liste_de_salle_vide = []
        for numero_de_salle in range(2, len(self.FloorBlueprint)):
            # ajouter ces numéros dans une liste
            liste_de_salle_vide.append(numero_de_salle)
        while True:
            if len(liste_de_salle_vide) == 0:
                break
            # sortir un numéro de la liste (de maniere aléatoire, en utilisant les indexs)
            index_aleatoire = random.randint(0, (len(liste_de_salle_vide) - 1))
            salle_choisie = liste_de_salle_vide.pop(index_aleatoire)
            # attribuer une fonction a la salle affectée a ce numéro
            self.AttributingRoleToRoom(salle_choisie)
            # recommencer jusqu'a ce qu'il n'y aie plus de numéros dans la liste
        # pour une raison inconnue, la derniere salle n'est pas attribuée a une fonction
        self.AttributingRoleToRoom(len(self.FloorBlueprint))

    def PrintFloorBlueprint(self):
        self.nombre_de_bols = 1
        nombre_de_salle = len(self.FloorBlueprint)
        setup(width=800, height=800)
        setworldcoordinates(-200, -200, 200, 200)
        ColiseumGoto(0, 0)
        speed(0)
        for salle in range(1, (nombre_de_salle + 1)):
            # initialise les coordonnées de la salle
            caracteristique_de_la_salle = self.FloorBlueprint[salle]
            position_x = caracteristique_de_la_salle["position_x"] * 25
            position_y = caracteristique_de_la_salle["position_y"] * 25
            ColiseumGoto(position_x, position_y)

            # dessine la salle
            if caracteristique_de_la_salle["type"] == "ENTREE":
                Draw.entree()
            else:
                Draw.salle()

            # dessine le dessin de la salle, si il y a a le faire
            if caracteristique_de_la_salle["marqué sur la carte"]:
                ColiseumGoto(position_x, position_y)
                if caracteristique_de_la_salle["type"] == "MONSTRE":
                    Draw.monstre()
                elif caracteristique_de_la_salle["type"] == "GOLD":
                    Draw.gold()
                elif caracteristique_de_la_salle["type"] == "ITEM":
                    Draw.item()
                elif caracteristique_de_la_salle["type"] == "KEY":
                    Draw.key()
                elif caracteristique_de_la_salle["type"] == "LEY":
                    Draw.ley()
                elif caracteristique_de_la_salle["type"] == "MIMIQUE":
                    Draw.mimique()
                elif caracteristique_de_la_salle["type"] == "PIEGE":
                    Draw.piege()
                elif caracteristique_de_la_salle["type"] == "SECRET":
                    Draw.secret()
                elif caracteristique_de_la_salle["type"] == "LIANE":
                    Draw.liane()
                elif caracteristique_de_la_salle["type"] == "ECLAIR":
                    Draw.eclair()
                elif caracteristique_de_la_salle["type"] == "BETE":
                    Draw.bete()
                elif caracteristique_de_la_salle["type"] == "HOLLISTIQUE":
                    Draw.bete()
                elif caracteristique_de_la_salle["type"] == "MONSTRE_SUPERIEUR":
                    Draw.monstre()
                elif caracteristique_de_la_salle["type"] == "AFFIXEUR_TECHNIQUE":
                    Draw.affixeur_technique()
                elif caracteristique_de_la_salle["type"] == "AFFIXEUR_SORT":
                    Draw.affixeur_sort()
                elif caracteristique_de_la_salle["type"] == "BOSS":
                    Draw.boss()
                elif caracteristique_de_la_salle["type"] == "BROKEN":
                    Draw.broken()
                elif (caracteristique_de_la_salle["type"] == "FAUX SPOT" or
                      caracteristique_de_la_salle["type"] == "SPOT"):
                    Draw.spot()
                elif caracteristique_de_la_salle["type"] == "SEQUENCE":
                    Draw.sequence()
                elif caracteristique_de_la_salle["type"] == "DDR":
                    Draw.ddr()
                elif caracteristique_de_la_salle["type"] == "PUIT":
                    Draw.puit()
                elif caracteristique_de_la_salle["type"] == "COEUR":
                    Draw.coeur()
                elif caracteristique_de_la_salle["type"] in ["ARBRE", "CHENIL", "CHARGEUR","JACCUZI", "DISTRIBUTEUR",  "BUFFET", "SPAWNER", "LEVIER", "BOL", "PLAQUE PRESSION"]:
                    Draw.machine()
                elif caracteristique_de_la_salle["type"] == "RITUEL":
                    Draw.rituel()
                elif caracteristique_de_la_salle["type"] == "PECHE":
                    Draw.peche()
                elif caracteristique_de_la_salle["type"] == "LOTTERIE":
                    Draw.lotterie()
                elif caracteristique_de_la_salle["type"] == "WORKSHOP":
                    Draw.workshop()
                elif caracteristique_de_la_salle["type"] == "BRAZIER_ROUGE":
                    Draw.brazier()
                elif caracteristique_de_la_salle["type"] == "BRAZIER_VERT":
                    Draw.brazier()
                elif caracteristique_de_la_salle["type"] == "BRAZIER_BLEU":
                    Draw.brazier()
                elif caracteristique_de_la_salle["type"] == "BRAZIER_NOIR":
                    Draw.brazier()
                elif caracteristique_de_la_salle["type"] == "OBELISQUE":
                    Draw.obelisque(position_x, position_y)
        if "Combattant le Gardien" in Player.player_tags:
            self.UpdatePlayerPosition()
        else:
            ColiseumGoto(0, 0)
        setheading(90)

    def StopAllVillageChannels(self):
        try:
            if self.channel_rien:
                self.channel_rien.stop()
            if self.channel_rien2:
                self.channel_rien2.stop()
            if self.channel_retailer:
                self.channel_retailer.stop()
            if self.channel_hawker:
                self.channel_hawker.stop()
            if self.channel_banker:
                self.channel_banker.stop()
            if self.channel_witch:
                self.channel_witch.stop()
            if self.channel_blacksmith:
                self.channel_blacksmith.stop()
        except :
            ClearConsole()

    def InitialisationOfTownVariations(self):
        dir_path = Player.chemin_musique

        chemin_musique_rien = dir_path + f"\\nothing.mp3"
        chemin_musique_rien2 = dir_path + f"\\nothing.mp3"
        chemin_musique_retailer = dir_path + f"\\retailer_variation.mp3"
        chemin_musique_hawker = dir_path + f"\\hawker_variation.mp3"
        chemin_musique_banker = dir_path + f"\\banker_variation.mp3"
        chemin_musique_witch = dir_path + f"\\witch_variation.mp3"
        chemin_musique_blacksmith = dir_path + f"\\blacksmith_variation.mp3"

        music_rien = mixer.Sound(chemin_musique_rien)
        music_rien2 = mixer.Sound(chemin_musique_rien2)
        music_retailer = mixer.Sound(chemin_musique_retailer)
        music_hawker = mixer.Sound(chemin_musique_hawker)
        music_banker = mixer.Sound(chemin_musique_banker)
        music_witch = mixer.Sound(chemin_musique_witch)
        music_blacksmith = mixer.Sound(chemin_musique_blacksmith)

        music_rien.set_volume(1)
        music_rien2.set_volume(1)
        music_retailer.set_volume(1)
        music_hawker.set_volume(1)
        music_banker.set_volume(1)
        music_witch.set_volume(1)
        music_blacksmith.set_volume(1)

        self.channel_rien = music_rien.play(loops=-1)
        self.channel_rien2 = music_rien.play(loops=-1)
        self.channel_retailer = music_retailer.play(loops=-1)
        self.channel_hawker = music_hawker.play(loops=-1)
        self.channel_banker = music_banker.play(loops=-1)
        self.channel_witch = music_witch.play(loops=-1)
        self.channel_blacksmith = music_blacksmith.play(loops=-1)

        self.channel_rien.set_volume(0)
        self.channel_rien2.set_volume(0)
        self.channel_retailer.set_volume(0)
        self.channel_hawker.set_volume(0)
        self.channel_banker.set_volume(0)
        self.channel_witch.set_volume(0)
        self.channel_blacksmith.set_volume(0)


    def DoTransition(self, entree_ou_sortie, nom_du_trader):

        if nom_du_trader == "SORCIERE":
            channel_choisi = self.channel_witch
        elif nom_du_trader == "HERBORISTE":
            channel_choisi = self.channel_hawker
        elif nom_du_trader == "MAITRE_ARTEFACT":
            channel_choisi = self.channel_retailer
        elif nom_du_trader == "ARMURIER":
            channel_choisi = self.channel_blacksmith
        elif nom_du_trader == "BANQUIER":
            channel_choisi = self.channel_banker

        if entree_ou_sortie == "In":
            transition_time = 0.5  # Temps de transition en secondes
            steps = 100
            for i in range(steps + 1):
                volume_a = 1 - (i / steps)  # Réduire le volume de A
                volume_b = i / steps  # Augmenter le volume de B
                
                channel_choisi.set_volume(volume_b)
                CHANNELMUSIQUEDEBASE.set_volume(volume_a)

                time.sleep(transition_time / steps)

        elif entree_ou_sortie == "Out":
            transition_time = 0.5  # Temps de transition en secondes
            steps = 100
            for i in range(steps + 1):
                volume_a = 1 - (i / steps)  # Réduire le volume de A
                volume_b = i / steps  # Augmenter le volume de B
                CHANNELMUSIQUEDEBASE.set_volume(volume_b)
                channel_choisi.set_volume(volume_a)
                time.sleep(transition_time / steps)

    def WalkInFloor(self):
        while True:
            while True:
                try:
                    print(
                        f"             -=[ Observation de l'Etage {Player.numero_de_letage} ]=-"
                    )
                    print("")
                    print("4 - Aller à Gauche")
                    print("6 - Aller à Droite")
                    print("8 - Aller en Haut")
                    print("2 - Aller en Bas")
                    
                    if Player.numero_de_letage == -1:
                        print("5 - Observer l'endroit")
                        print("0 - Liste de Matériaux et autre")
                    else:
                        print("5 - Observer la Salle")
                        print("0 - Fiche de Personnage")
                    print("")
                    choix = int(input("Choisissez une action avec les nombres : "))
                    ClearConsole()
                    if choix in [4, 6, 8, 5, 2, 123, 0]:
                        break
                except ValueError:
                    ClearConsole()
            if choix == 4:
                self.WalkLeft()
            elif choix == 123:
                print(self.FloorBlueprint)
                Affichage.EntreePourContinuer()
            elif choix == 6:
                self.WalkRight()
            elif choix == 8:
                self.WalkUp()
            elif choix == 2:
                self.WalkDown()
            elif choix == 0 and Player.numero_de_letage != -1:
                if "Combattant le Gardien" in Player.player_tags:
                    print("Vous sortez votre sacoche, mais vous n'arrivez pas a vous souvenir comment utiliser vos objets ou vos sorts avec votre esprit confus, alors vous la raccrochez à sa place.")
                    Affichage.EntreePourContinuer()
                else:
                    Player.ShowPlayerCaracteristicsAndItems()
            elif choix == 0 and Player.numero_de_letage == -1:
                Player.ShowGarbage()
            elif choix == 5:
                try:
                    self.RevealRoom()
                except Exception as error:
                    WriteErrorInErrorLog(error)
                if not "Fantome" in Player.player_tags:
                    if Player.numero_de_la_salle == 1:
                        if "Sort du Combat contre le Gardien" in Player.player_tags:
                            Player.player_tags.remove("Sort du Combat contre le Gardien")
                        break
            if not "Fantome" in Player.player_tags:
                self.UpdatePlayerPosition()
                if "Passer La Porte Redcoin" in Player.player_tags:
                    Player.player_tags.remove("Passer La Porte Redcoin")
                    break
                elif "Sort du Combat contre le Gardien" in Player.player_tags:
                    Player.player_tags.remove("Sort du Combat contre le Gardien")
                    break
            else:
                break

    def UseMonocleDeVerite(self):
        if "Monocle de Vérité" in Player.liste_dartefacts_optionels:
            gain_gold = 5
            Player.AddGoldToPlayer(gain_gold)

    def TraderIncAnimationOpen(self):
        print("                       ||")
        time.sleep(0.05)
        print("                      ||||")
        time.sleep(0.05)
        print("                     ||  ||")
        time.sleep(0.05)
        print("                    ||||||||")
        time.sleep(0.05)
        print("                   |||    |||")
        time.sleep(0.05)
        print("                  || ||  || ||")
        time.sleep(0.05)
        print("                 ||   ||||   ||")
        time.sleep(0.05)
        print("                ||     ||     ||")
        time.sleep(0.05)
        print("               ||||||||||||||||||")
        time.sleep(0.05)
        print("")
        time.sleep(0.05)
        print("")
        time.sleep(0.05)
        print("              Traders Incorporated")
        time.sleep(0.05)
        print("                Fidelity Service")
        time.sleep(0.05)
        print("\n")
        time.sleep(0.05)
        print(f"Bonjour Trader, nous avons détecté {Player.jetons} jeton en votre possession.")
        time.sleep(0.05)
        print("\n")
        time.sleep(0.05)
        print("\n1 - Gagnez 5 items aléatoires pour seulement 1 Jeton !")
        time.sleep(0.05)
        print("2 - Achetez 1 Redcoin pour un prix misérable de 2 Jetons !")
        time.sleep(0.05)
        print("3 - Dépensez 3 Jetons et repartez chez vous avec un artefact !")
        time.sleep(0.05)
        print("4 - 4 Jetons, c'est le prix de la tranquilité avec notre service d'augmentation de la chair !")
        time.sleep(0.05)
        print("5 - Devenez un membre Platinium de notre service de Trading pour 5 Jetons !")
        time.sleep(0.05)
        print("\n6 - Eteindre le système.")
        time.sleep(0.05)
        print("\nFaites votre choix en touchant les nombres : ")
        time.sleep(0.05)
        ClearConsole()

    def TraderIncAnimationClose(self):
        print("                       ||")
        print("                      ||||")
        print("                     ||  ||")
        print("                    ||||||||")
        print("                   |||    |||")
        print("                  || ||  || ||")
        print("                 ||   ||||   ||")
        print("                ||     ||     ||")
        print("               ||||||||||||||||||")
        print("")
        print("")
        print("              Traders Incorporated")
        print("                Fidelity Service")
        print("\n")
        print(f"Bonjour Trader, nous avons détecté {Player.jetons} jeton en votre possession.")
        print("\n")
        print("\n1 - Gagnez 5 items aléatoires pour seulement 1 Jeton !")
        print("2 - Achetez 1 Redcoin pour un prix misérable de 2 Jetons !")
        print("3 - Dépensez 3 Jetons et repartez chez vous avec un artefact !")
        print("4 - 4 Jetons, c'est le prix de la tranquilité avec notre service d'augmentation de la chair !")
        print("5 - Devenez un membre Platinium de notre service de Trading pour 5 Jetons !")
        print("\n6 - Eteindre le système.")
        time.sleep(0.05)
        ClearConsole()
        print("                       ||")
        print("                      ||||")
        print("                     ||  ||")
        print("                    ||||||||")
        print("                   |||    |||")
        print("                  || ||  || ||")
        print("                 ||   ||||   ||")
        print("                ||     ||     ||")
        print("               ||||||||||||||||||")
        print("")
        print("")
        print("              Traders Incorporated")
        print("                Fidelity Service")
        print("\n")
        print(f"Bonjour Trader, nous avons détecté {Player.jetons} jeton en votre possession.")
        print("\n")
        print("\n1 - Gagnez 5 items aléatoires pour seulement 1 Jeton !")
        print("2 - Achetez 1 Redcoin pour un prix misérable de 2 Jetons !")
        print("3 - Dépensez 3 Jetons et repartez chez vous avec un artefact !")
        print("4 - 4 Jetons, c'est le prix de la tranquilité avec notre service d'augmentation de la chair !")
        print("5 - Devenez un membre Platinium de notre service de Trading pour 5 Jetons !")
        time.sleep(0.05)
        ClearConsole()
        print("                       ||")
        print("                      ||||")
        print("                     ||  ||")
        print("                    ||||||||")
        print("                   |||    |||")
        print("                  || ||  || ||")
        print("                 ||   ||||   ||")
        print("                ||     ||     ||")
        print("               ||||||||||||||||||")
        print("")
        print("")
        print("              Traders Incorporated")
        print("                Fidelity Service")
        print("\n")
        print(f"Bonjour Trader, nous avons détecté {Player.jetons} jeton en votre possession.")
        print("\n")
        print("\n1 - Gagnez 5 items aléatoires pour seulement 1 Jeton !")
        print("2 - Achetez 1 Redcoin pour un prix misérable de 2 Jetons !")
        print("3 - Dépensez 3 Jetons et repartez chez vous avec un artefact !")
        time.sleep(0.05)
        ClearConsole()
        print("                       ||")
        print("                      ||||")
        print("                     ||  ||")
        print("                    ||||||||")
        print("                   |||    |||")
        print("                  || ||  || ||")
        print("                 ||   ||||   ||")
        print("                ||     ||     ||")
        print("               ||||||||||||||||||")
        print("")
        print("")
        print("              Traders Incorporated")
        print("                Fidelity Service")
        print("\n")
        print(f"Bonjour Trader, nous avons détecté {Player.jetons} jeton en votre possession.")
        print("\n")
        print("\n1 - Gagnez 5 items aléatoires pour seulement 1 Jeton !")
        print("2 - Achetez 1 Redcoin pour un prix misérable de 2 Jetons !")
        time.sleep(0.05)
        ClearConsole()
        print("                       ||")
        print("                      ||||")
        print("                     ||  ||")
        print("                    ||||||||")
        print("                   |||    |||")
        print("                  || ||  || ||")
        print("                 ||   ||||   ||")
        print("                ||     ||     ||")
        print("               ||||||||||||||||||")
        print("")
        print("")
        print("              Traders Incorporated")
        print("                Fidelity Service")
        print("\n")
        print(f"Bonjour Trader, nous avons détecté {Player.jetons} jeton en votre possession.")
        print("\n")
        print("\n1 - Gagnez 5 items aléatoires pour seulement 1 Jeton !")
        time.sleep(0.05)
        ClearConsole()
        print("                       ||")
        print("                      ||||")
        print("                     ||  ||")
        print("                    ||||||||")
        print("                   |||    |||")
        print("                  || ||  || ||")
        print("                 ||   ||||   ||")
        print("                ||     ||     ||")
        print("               ||||||||||||||||||")
        print("")
        print("")
        print("              Traders Incorporated")
        print("                Fidelity Service")
        print("\n")
        print(f"Bonjour Trader, nous avons détecté {Player.jetons} jeton en votre possession.")
        print("\n")
        time.sleep(0.05)
        ClearConsole()
        print("                       ||")
        print("                      ||||")
        print("                     ||  ||")
        print("                    ||||||||")
        print("                   |||    |||")
        print("                  || ||  || ||")
        print("                 ||   ||||   ||")
        print("                ||     ||     ||")
        print("               ||||||||||||||||||")
        print("")
        print("")
        print("              Traders Incorporated")
        print("                Fidelity Service")
        time.sleep(0.05)
        ClearConsole()
        print("                       ||")
        print("                      ||||")
        print("                     ||  ||")
        print("                    ||||||||")
        print("                   |||    |||")
        print("                  || ||  || ||")
        print("                 ||   ||||   ||")
        print("                ||     ||     ||")
        print("               ||||||||||||||||||")
        print("")
        print("")
        print("              Traders Incorporated")
        time.sleep(0.05)
        ClearConsole()
        print("                       ||")
        print("                      ||||")
        print("                     ||  ||")
        print("                    ||||||||")
        print("                   |||    |||")
        print("                  || ||  || ||")
        print("                 ||   ||||   ||")
        print("                ||     ||     ||")
        print("               ||||||||||||||||||")
        print("")
        print("")
        time.sleep(0.05)
        ClearConsole()
        print("                       ||")
        print("                      ||||")
        print("                     ||  ||")
        print("                    ||||||||")
        print("                   |||    |||")
        print("                  || ||  || ||")
        print("                 ||   ||||   ||")
        print("                ||     ||     ||")
        print("               ||||||||||||||||||")
        print("")
        time.sleep(0.05)
        ClearConsole()
        print("                       ||")
        print("                      ||||")
        print("                     ||  ||")
        print("                    ||||||||")
        print("                   |||    |||")
        print("                  || ||  || ||")
        print("                 ||   ||||   ||")
        print("                ||     ||     ||")
        print("               ||||||||||||||||||")
        time.sleep(0.05)
        ClearConsole()
        print("                       ||")
        print("                      ||||")
        print("                     ||  ||")
        print("                    ||||||||")
        print("                   |||    |||")
        print("                  || ||  || ||")
        print("                 ||   ||||   ||")
        print("                ||     ||     ||")
        time.sleep(0.05)
        ClearConsole()
        print("                       ||")
        print("                      ||||")
        print("                     ||  ||")
        print("                    ||||||||")
        print("                   |||    |||")
        print("                  || ||  || ||")
        print("                 ||   ||||   ||")
        time.sleep(0.05)
        ClearConsole()
        print("                       ||")
        print("                      ||||")
        print("                     ||  ||")
        print("                    ||||||||")
        print("                   |||    |||")
        print("                  || ||  || ||")
        time.sleep(0.05)
        ClearConsole()
        print("                       ||")
        print("                      ||||")
        print("                     ||  ||")
        print("                    ||||||||")
        print("                   |||    |||")
        time.sleep(0.05)
        ClearConsole()
        print("                       ||")
        print("                      ||||")
        print("                     ||  ||")
        print("                    ||||||||")
        time.sleep(0.05)
        ClearConsole()
        print("                       ||")
        print("                      ||||")
        print("                     ||  ||")
        time.sleep(0.05)
        ClearConsole()
        print("                       ||")
        print("                      ||||")
        time.sleep(0.05)
        ClearConsole()
        print("                       ||")
        time.sleep(0.05)
        ClearConsole()
        print("")
        time.sleep(0.05)
        ClearConsole()

    def RevealRoom(self):
        caracteristique_de_la_salle = self.FloorBlueprint[Player.numero_de_la_salle]
        if caracteristique_de_la_salle["terminé par joueur"] == True:
            print("La salle est sans interêt.")
            Affichage.EntreePourContinuer()
        else:
            if caracteristique_de_la_salle["type"] == "ENTREE":  # DONE
                if Player.numero_de_letage == -1:
                    print("Vous retournez sur la Stèle du Renouveau, au centre du village.")
                else:
                    print("Vous retournez dans l'Arène au centre de l'étage.")
                ColiseumGoto(0, -12.5)
                Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "MONSTRE":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.monstre()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                # lance le combat
                print("Vous entendez un bruit derrière vous, et découvrez un monstre !")
                Affichage.EntreePourContinuer()
                control = controleur.Control(Player, Trader, FloorMaker, Sove)
                # lance la bataille
                try:
                    CHANNELMUSIQUEDEBASE.set_volume(0)
                    time.sleep(0.01)
                    CHANNELMUSIQUEDEBASE.stop()
                    control.Battle()
                    StopAllMusic()
                except Exception as error:
                    WriteErrorInErrorLog(error)
                CheckForKIA()
                PlayMusicDeLetage()

                # fait que l'event soit finit et ne peut ps etre relancé
                caracteristique_de_la_salle["terminé par joueur"] = True
            elif caracteristique_de_la_salle["type"] == "MONSTRE_SUPERIEUR":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.monstre()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                # lance le combat
                print("Vous entendez un bruit derrière vous, et découvrez un monstre...?")
                Affichage.EntreePourContinuer()
                print("Ce dernier est recouvert d'aiguilles en tout genre, et possède un regard vraiment féroce.")
                Affichage.EntreePourContinuer()
                print("C'est un monstre dopé de niveau superieur !")
                Affichage.EntreePourContinuer()
                Player.player_tags.append("Monstre Dopé")
                control = controleur.Control(Player, Trader, FloorMaker, Sove)
                # lance la bataille
                try:
                    CHANNELMUSIQUEDEBASE.set_volume(0)
                    time.sleep(0.01)
                    CHANNELMUSIQUEDEBASE.stop()
                    control.Battle()
                    StopAllMusic()
                except Exception as error:
                    WriteErrorInErrorLog(error)
                Player.player_tags.remove("Monstre Dopé")
                PlayMusicDeLetage()
                
                # fait que l'event soit finit et ne peut ps etre relancé
                caracteristique_de_la_salle["terminé par joueur"] = True
            elif caracteristique_de_la_salle["type"] == "GOLD":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.gold()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True
                print("Vous trouvez un sac de gold caché sous une table.")
                gain_gold = 50 * Player.numero_de_letage
                gain_gold = Player.AddGoldToPlayer(gain_gold, True)
                print(f"Vous gagnez {gain_gold} golds !")
                Affichage.EntreePourContinuer()
                # fait que l'event soit finit et ne peut ps etre relancé
                caracteristique_de_la_salle["terminé par joueur"] = True
            elif caracteristique_de_la_salle["type"] == "RIEN":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Rien que des autels en ruine et des casiers à documents remplis de poussière.")
                Affichage.EntreePourContinuer()

                # fait que l'event soit finit et ne peut ps etre relancé
                caracteristique_de_la_salle["terminé par joueur"] = True
            elif caracteristique_de_la_salle["type"] == "GRAND GARDIEN":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.broken()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                DoBossZero()
            elif caracteristique_de_la_salle["type"] == "PETIT GARDIEN":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.monstre()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                # lance le combat
                print("Vous entendez un bruit derrière vous, et découvrez un monstre !")
                Affichage.EntreePourContinuer()
                control = controleur.Control(Player, Trader, FloorMaker, Sove)
                # lance la bataille
                try:
                    CHANNELMUSIQUEDEBASE.set_volume(0)
                    time.sleep(0.01)
                    CHANNELMUSIQUEDEBASE.stop()
                    control.Battle()
                    StopAllMusic()
                except Exception as error:
                    WriteErrorInErrorLog(error)
                PlayMusicDeLetage()

                # fait que l'event soit finit et ne peut ps etre relancé
                caracteristique_de_la_salle["terminé par joueur"] = True
            elif caracteristique_de_la_salle["type"] == "ITEM":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.item()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous trouvez une vieille caisse de provision.")
                print(
                    "La plupart des objets sont irrécupérables, a peine des amas de rouille et de pourriture."
                )
                print(
                    "Seul un sac de plastique vert fermé hermétiquement attire votre attention."
                )
                Affichage.EntreePourContinuer()
                nom_de_litem = GetRandomItemFromList(LISTEITEM)
                print(f"A l'interieur se trouve l'objet : {nom_de_litem} !")
                Affichage.EntreePourContinuer()
                Player.items_possedes[nom_de_litem] += 1
                # fait que l'event soit finit et ne peut ps etre relancé
                caracteristique_de_la_salle["terminé par joueur"] = True
            elif caracteristique_de_la_salle["type"] == "KEY":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.key()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print(
                    "Vous trouvez une salle vide, sauf pour une étrange substance flottant dans les airs."
                )
                print(
                    "Alors que vous approchez votre main de la substance, cette dernière fonce d'un coup sur votre paume ouverte et y imprime un tatouage particulier."
                )
                Affichage.EntreePourContinuer()
                print("Vous obtenez la Clé Incrustée !")
                Affichage.EntreePourContinuer()
                Player.possede_la_cle = True

                if Player.nom_de_letage == "Limbes Flétrissants" :
                    Ending.PrintEtEntreePourContinuer("..?")
                    Ending.PrintEtEntreePourContinuer("Vous entendez une voix résonner autour de vous :")
                    if Player.numero_boss_alt == 1:
                        Ending.PrintEtEntreePourContinuer("*Bienvenue enfant maudit.*")
                        Ending.PrintEtEntreePourContinuer("*Je ne peux pas vraiment te parler librement, alors je vais être brève.*\n*Laisse moi te parler du contexte et de ta situation.*")
                        Ending.PrintEtEntreePourContinuer("*Premièrement, j'espère que tu maitrise le combat, car ce que tu va vivre va tester tes compétences dans tout les domaines du combat.*")
                        Ending.PrintEtEntreePourContinuer("*Tu te trouve dans un endroit oublié, là ou on enferme ce que l'on ne peut pas controller, pour affronter 10 terribles existances.* ")
                        Ending.PrintEtEntreePourContinuer("*Dernièrement,*")
                        Ending.PrintEtEntreePourContinuer("*Celui que tu vas affronter ici se nomme Cauchemard.*\n*C'est le résidu de ce qui s'est introduit dans l'esprit du roi pour le rendre fou.*")
                        Ending.PrintEtEntreePourContinuer("*Prend ton mal en patience et attend.*\n*Cette chose est intuable tant que l'on ne chante pas les mélodies qui appaisent l'esprit jeune.*")
                        Ending.PrintEtEntreePourContinuer("*Et crois moi, celui qui l'a jeté dans ce cachot de poussière s'est assuré que ces mélodies soient chantées a un moment ou un autre.*")
                        Ending.PrintEtEntreePourContinuer("*IL ne peut pas se permettre de voir Cauchemard s'échapper, encore.*")
                        Ending.PrintEtEntreePourContinuer("*Fais attention a son influence, il peut altérer ton état d'un claquement de doigts, et ce pendant longtemps.*")
                          #  voix dit que c'est elle qui a appelé, parle de Cauchemard
                    elif Player.numero_boss_alt == 2:
                        Ending.PrintEtEntreePourContinuer("*Bien. Tu as conquis un des nombreux obstacles qui t'attendent.*")
                        Ending.PrintEtEntreePourContinuer("*Premièrement, laisse moi te parler un peu de moi.*")
                        Ending.PrintEtEntreePourContinuer("*Je suis une ombre, un souffle, une présence.*")
                        Ending.PrintEtEntreePourContinuer("*Je suis ton futur, tout comme tu es mon passé.*")
                        Ending.PrintEtEntreePourContinuer("*Je suis le réceptacle de la Mort, après qu'elle ait été laissée tombée par le Dieu de la Mort il y a bien longtemps de cela, dans une guerre sanglante.*")
                        Ending.PrintEtEntreePourContinuer("*Dernièrement,*")
                        Ending.PrintEtEntreePourContinuer("*Celui que tu vas affronter est un enfant royal, venu des sables chauds.*\n*Mais aux yeux de celui qui l'a mutilé, C'etait un matériau.*")
                        Ending.PrintEtEntreePourContinuer("*Une partie de lui vit avec son père, le reste a été condamné a une existance terrible, vivre sans être vivant.*")
                        Ending.PrintEtEntreePourContinuer("*Cepandant, a force de perseverance, il s'est réparé avec l'aide de la science et de la magie.*")
                        Ending.PrintEtEntreePourContinuer("*C'est maintenant un adversaire redoutable, aidé par 2 gardiens de chair et d'âme.*")
                        Ending.PrintEtEntreePourContinuer("*Fais bien attention a ta liste de sorts, de nouvelles actions pourraient t'aider à le vaincre.*")
                        pass  #  voix dit comment arrivé là, parle de astonre
                    elif Player.numero_boss_alt == 3:
                        Ending.PrintEtEntreePourContinuer("*Hey, encore là ? C'est bien.*")
                        Ending.PrintEtEntreePourContinuer("*Premièrement, je pense que je peux t'en dire un peu plus sur l'endroit ou tu te trouve.*")
                        Ending.PrintEtEntreePourContinuer("*Le Coliseum à produit de nombreux guerriers et guerrières au fur et a mesure des années, mais aucuns n'arrivent a la cheville de ceux qui ont un lien avec sa création.*")
                        Ending.PrintEtEntreePourContinuer("*Ces âmes là sont puissantes. Très puissantes. Trop puissantes.*")
                        Ending.PrintEtEntreePourContinuer("*En clair, la Pierre de Désir les a rangés dans un coin inacessible, destiné a être oublié par le temps dans un coin du grand livre de l'Histoire.*")
                        Ending.PrintEtEntreePourContinuer("*Destinés a pourrir dans le plus pur des or.*")
                        Ending.PrintEtEntreePourContinuer("*Dernièrement,*")
                        Ending.PrintEtEntreePourContinuer("*Il n'y a ici que des épitomes de puissance, pas seulement des guerriers et monarques.*")
                        Ending.PrintEtEntreePourContinuer("*Tu affrontera ainsi Ahmed, le cuisinier du Roi Fou.*")
                        Ending.PrintEtEntreePourContinuer("*Il doit y avoir quelque part un livre de recette pour t'expliquer comment fonctionne la cuisine via Mots de Pouvoir.*")
                        Ending.PrintEtEntreePourContinuer("*Pourquoi lire un livre de recette ?*")
                        Ending.PrintEtEntreePourContinuer("*Car ce combat te demandera de jongler entre combat normal et cuisine.*")
                        Ending.PrintEtEntreePourContinuer("*Assure toi de suivre ses demandes de plats à la lettre, ou tu pourrais bien perdre ta vie.*")
                        Ending.PrintEtEntreePourContinuer("*Car Ahmed est un maitre de la magie de visualisation, et après des années a servir dans la plus grande anxiétée un capricieux petit tyrant, il se peut que les règles avec lesquelles tu devras jouer pendant ce combat soient... tordues.*")
                        pass  #  voix dit que font les autres ici, parle de Ahmed
                    elif Player.numero_boss_alt == 4:
                        Ending.PrintEtEntreePourContinuer("*Tu te débrouille bien, enfant maudit. Je suis fier de toi.*")
                        Ending.PrintEtEntreePourContinuer("*Premièrement, parlons de ce que je fait ici.*")
                        Ending.PrintEtEntreePourContinuer("*J'ai été attirée ici par la présence d'âmes puissantes, en attente de passer a la Vie d'Après.*")
                        Ending.PrintEtEntreePourContinuer("*Et je suis tombée prisonnière de cet endroit, appelant avec ferveur quelqu'un comme toi.*")
                        Ending.PrintEtEntreePourContinuer("*Exactement comme toi.*")
                        Ending.PrintEtEntreePourContinuer("*Tu dois donc te demander ce qui se passe en dehors si la Grande Faucheuse est coincée ici ?*")
                        Ending.PrintEtEntreePourContinuer("*Et bien... rien du tout.*\n*Et c'est bien ca le problème.*")
                        Ending.PrintEtEntreePourContinuer("*Pour résumer assez rapidement, dis toi que je ne suis pas la pour briser le lien qui relie les corps et les esprit.*")
                        Ending.PrintEtEntreePourContinuer("*Donc toutes les personnes décédées depuis un bon millénaire sont encore là, coincées dans leurs corps, incapable de bouger ou de s'exprimer, mais ressentant tout.*")
                        Ending.PrintEtEntreePourContinuer("*L'enfer n'est rien à coté d'un millénaire déprivé de sensations et de mouvements.*")
                        Ending.PrintEtEntreePourContinuer("*Dernièrement,*")
                        Ending.PrintEtEntreePourContinuer("*L'adversaire que tu vas affronter ici est... délicat.*")
                        Ending.PrintEtEntreePourContinuer("*Quand je suis arrivée là, c'était un monstre terrible a l'apparence trompeuse, maitrisant une armée incroyable.*")
                        Ending.PrintEtEntreePourContinuer("*Mais aujourd'hui, je ne suis pas sûre.*")
                        Ending.PrintEtEntreePourContinuer("*Fais juste attention a sa technique ancestrale, que seul lui peut reproduire malgrès les efforts constants de sa race.*")
                        Ending.PrintEtEntreePourContinuer("*Lorsqu'il...*")
                        Ending.PrintEtEntreePourContinuer("*...se remue comme un flanc.*")
                        Ending.PrintEtEntreePourContinuer("*De plus, c'était a l'époque un berserker, doté d'une capacité inouie a maitriser sa rage.*")
                        Ending.PrintEtEntreePourContinuer("*En clair, plus le temps passe, plus sa rage augmente, et plus il fait de dégâts.*")
                        Ending.PrintEtEntreePourContinuer("*Note bien : je n'ai pas parlé de tours, mais bien de temps passé, secondes minutes et companie.*\n*Je sais que le temps passe différemment pour toi, mais dans ce combat vous êtes au même niveau.*")
                        pass  #  voix dit enfermé par pierre, parle de roi gluant
                    elif Player.numero_boss_alt == 5:
                        Ending.PrintEtEntreePourContinuer("*Bon, je vois que tu es qualifié, il est maintenant temps de parler de mon plan.*")
                        Ending.PrintEtEntreePourContinuer("*Premièrement, pour rentrer ici, il faut 50 redcoins.*\n*Mais sais tu ce que sont les redcoins ?*")
                        Ending.PrintEtEntreePourContinuer("*C'est une accumulation de l'énergie des anciens dieux sous forme liquide.*\n*A donner aux mortels pour leur courage, ou a avaler en cas de pépin pour retrouver toute sa force divine.*")
                        Ending.PrintEtEntreePourContinuer("*C'est une extention du pouvoir divin, une sorte de batterie rechargeable pour les Dieux.*")
                        Ending.PrintEtEntreePourContinuer("*Et au vu de leur disparition, il n'en existe PAS, cinquantes en circulation.*")
                        Ending.PrintEtEntreePourContinuer("*C'est pour ca que cette porte existe, car dans le système créé par la Pierre de Désir, il faut une condition pour tout, afin d'avoir un système équilibré et juste.*")
                        Ending.PrintEtEntreePourContinuer("*En clair, on satisfait les conditions du système en te permettant de passer la porte, mais on empeche tout le monde de la passer en mettant des conditions impossibles a remplir.*")
                        Ending.PrintEtEntreePourContinuer("*On obtient alors une porte infranchissable derriere laquelle enfermer ceux que l'on ne peut pas controller, entièrement.*")
                        Ending.PrintEtEntreePourContinuer("*Sauf que tu as franchit cette porte.*")
                        Ending.PrintEtEntreePourContinuer("*Parlons en au prochain étage.*")
                        Ending.PrintEtEntreePourContinuer("*Dernièrement,*")
                        Ending.PrintEtEntreePourContinuer("*Tu va affronter une personne bien singulière, en aucun cas lié au Coliseum.*")
                        Ending.PrintEtEntreePourContinuer("*Sa présence est due a un problème impossible :*")
                        Ending.PrintEtEntreePourContinuer("*Quelqu'un est rentré dans ce monde, en venant d'ailleurs.*")
                        Ending.PrintEtEntreePourContinuer("*Je ne parle pas de Jean, mais d'un certain Pyrobarbare en quete d'aventure.*")
                        Ending.PrintEtEntreePourContinuer("*Et comme le système est juste et equilibré, il faut une existence pour contrer sa présence.*")
                        Ending.PrintEtEntreePourContinuer("*Voici comment est née Obo la Cryobarbare.*")
                        Ending.PrintEtEntreePourContinuer("*C'est une création artificielle, je n'ai donc pas beaucoup d'informations sur elle.*")
                        Ending.PrintEtEntreePourContinuer("*Je sais juste que la Pierre du Désir a eue beaucoup de mal a la mettre ici-bas, non pas a cause de sa force...*")
                        Ending.PrintEtEntreePourContinuer("*...mais parce qu'elle est vraiment, mais alors VRAIMENT, énervante a combattre.*")
                        pass  #  voix dit redcoin dupe, parle de Obo
                    elif Player.numero_boss_alt == 6:
                        Ending.PrintEtEntreePourContinuer("*Toujours là ?*\n*Toujours motivé ?*")
                        Ending.PrintEtEntreePourContinuer("*Continuons.*")
                        Ending.PrintEtEntreePourContinuer("*J'ai vu la manière dont tu as passé la porte.*")
                        Ending.PrintEtEntreePourContinuer("*Tu t'es avancé , et il y avait déja quelques redcoins enfoncés dedans.*")
                        Ending.PrintEtEntreePourContinuer("*Et parmis ces redcoins, il y en avait des identiques.*")
                        Ending.PrintEtEntreePourContinuer("*Comment la porte que personne n'a jamais approché pouvait contenir des redcoins avec la même énergie ?*")
                        Ending.PrintEtEntreePourContinuer("*Tu as, d'une certiane manière, dupliqué des redcoins.*")
                        Ending.PrintEtEntreePourContinuer("*Je dirais même plus :*")
                        Ending.PrintEtEntreePourContinuer("*Tu les as posé, avant.*")
                        Ending.PrintEtEntreePourContinuer("*Il y a quelque chose en toi qui te pousse dans une direction inconnue, mais qui pourtant est toujours la bonne.*")
                        Ending.PrintEtEntreePourContinuer("*Je me suis battue contre la Pierre de Désir, et ma divinité me permet de comprendre certaines choses qui sont...compliquées.*\n*C'est pour cette raison que je suis au courant pour le système ainsi que son administrateur.*")
                        Ending.PrintEtEntreePourContinuer("*Mais il y a quelqu'un qui fait des choses incroyables, et qui utilise le sytème a son avantage pour tenter de battre celui qui l'a construit.*")
                        Ending.PrintEtEntreePourContinuer("*Et ce quelqu'un...*")
                        Ending.PrintEtEntreePourContinuer("*...peut garder certaines choses entre chaque tentatives ratées.*")
                        Ending.PrintEtEntreePourContinuer("*C'est littéralement impossible, inconcevable, se dire qu'après une remise a zéro complète du Coliseum, certaines choses restent.*")
                        Ending.PrintEtEntreePourContinuer("*Mais c'est la seule explication possible.*")
                        Ending.PrintEtEntreePourContinuer("*En quoi ca m'aide ? Parlons en tout a l'heure.*")
                        Ending.PrintEtEntreePourContinuer("*Dernièrement,*")
                        Ending.PrintEtEntreePourContinuer("*J'ai déja utilisé tout mon temps de parole ici.*")
                        Ending.PrintEtEntreePourContinuer("*Cette personne est un camarade mort avant la création du Coliseum, et je ne sais pas ce qu'il fait ici.*")
                        Ending.PrintEtEntreePourContinuer("*Un camarade a qui ?*")
                        Ending.PrintEtEntreePourContinuer("*Au Chevalier que l'on ne veut pas rencontrer.*")
                        pass  #  voix dit objectif avec divinité, parle de Mercenaire
                    elif Player.numero_boss_alt == 7:
                        Ending.PrintEtEntreePourContinuer("*...*")
                        Ending.PrintEtEntreePourContinuer("*...*")
                        Ending.PrintEtEntreePourContinuer("*...*")
                        Ending.PrintEtEntreePourContinuer("*bon.*")
                        Ending.PrintEtEntreePourContinuer("*Parlons d'autres choses.*")
                        Ending.PrintEtEntreePourContinuer("*Premièrement, j'espère que tu es familier avec l'histoire de la Guerre de l'Interdit*")
                        Ending.PrintEtEntreePourContinuer("*Si tu ne l'es pas, un petit récapitulatif :*")
                        Ending.PrintEtEntreePourContinuer("*Les Dieux fabriquent des machines qui utilisent leur divinité, pour voir jusqu'ou ils peuvent aller.*")
                        Ending.PrintEtEntreePourContinuer("*Ils construisent une machine pour travers les dimensions, arrivent dans un monde et rentrent en guerre avec lui.*")
                        Ending.PrintEtEntreePourContinuer("*Grosse bataille, ils recrutent un héros humain et 4 héros de quatres races différentes pour garder la porte vers ce nouveau monde, jusqu'a trouver un moyen de l'arreter ou de gagner la guerre.*")
                        Ending.PrintEtEntreePourContinuer("*Re-Grosse bataille, ils envoient la machine et leurs gardiens dans une autre dimension, mais voila : le frere jaloux du leader s'accroche au groupe pendant son transfert.*")
                        Ending.PrintEtEntreePourContinuer("*Et...on en sait pas plus.*")
                        Ending.PrintEtEntreePourContinuer("*Par contre, ca fait sortir toutes les troupes de l'autre monde, Re-Re-Grosse bataille, et tout les dieux meurent, mais ils referment la porte.*")
                        Ending.PrintEtEntreePourContinuer("*Cet endroit la, c'est un peu la soeur de la ou se trouve la machine.*")
                        Ending.PrintEtEntreePourContinuer("*Il a juste prit cette apparence parce que c'est le domaine de la Mort, et il reflete toujours l'endroit ou y il a eu le plus de massacres.*")
                        Ending.PrintEtEntreePourContinuer("*Si tu veut, on se trouve dans l'ancienne maison du Dieu de la Mort.*")
                        Ending.PrintEtEntreePourContinuer("*Sacré endroit pour emprisonner le réceptacle de la Divinité de la Mort, hein ?*")
                        Ending.PrintEtEntreePourContinuer("*Dernièrement,*")
                        Ending.PrintEtEntreePourContinuer("*Le héros des humains, gardien de la porte interdite, est mort.*")
                        Ending.PrintEtEntreePourContinuer("*Mais sa volontée a persistée.*")
                        Ending.PrintEtEntreePourContinuer("*L'essence même de son sens du devoir, cristalisé dans un être plutot faible, mais qui n'abandonne jamais.*")
                        Ending.PrintEtEntreePourContinuer("*Fais attention, a chaque fois qu'il revient a la vie, tu subira un effet élémentaire très fort !*")
                        pass  #  voix dit histoire de l'endroit avec portail et tt, parle de Volontée Immortelle
                    elif Player.numero_boss_alt == 8:
                        Ending.PrintEtEntreePourContinuer("*Oui, revenons en au plan maintenant.*")
                        Ending.PrintEtEntreePourContinuer("*Lorsque j'ai été capturé, on m'a enlevé ma divinité de la Mort, et on l'a placée quelque part ici.*")
                        Ending.PrintEtEntreePourContinuer("*A la fin des Limbes.*")
                        Ending.PrintEtEntreePourContinuer("*C'est plutot malin de la part de la Pierre de Désir, mettre un pouvoir absolu derriere une congrégation de 10 être extremement puissants, derriere une porte impossible a ouvrir.*")
                        Ending.PrintEtEntreePourContinuer("*En plus, vu que l'on est dans un endroit qui représente une dimension dont laquelle rien ne devait sortir, même si quelqu'un récupère la divinité, il restera coincé ici a jamais.*")
                        Ending.PrintEtEntreePourContinuer("*Ou jusqu'a ce que la Pierre de Désir vienne jeter un coup d'oeil et récupère le pauvre individu pour en faire un autre de ses boss.*")
                        Ending.PrintEtEntreePourContinuer("*Sauf que tu n'es pas un individu normal.*")
                        Ending.PrintEtEntreePourContinuer("*Tu peut prendre des objets appartenant aux dieux et faire comme si tu les avait toujours possédés.*")
                        Ending.PrintEtEntreePourContinuer("*Et une fois que tu recommence la descente du Coliseum...*")
                        Ending.PrintEtEntreePourContinuer("*...notre monde sera affecté de telle sorte que tu aura eu, d'aussi loin qu'on puisse se souvenir, la divinité en ta possession.*")
                        Ending.PrintEtEntreePourContinuer("*On peut faire sortir la Mort de cette cage pour que les gens puissent recommencer a mourir proprement !*")
                        Ending.PrintEtEntreePourContinuer("*Et vu que lorsque tu commence ton aventure, tu descend les marches du Coliseum...*")
                        Ending.PrintEtEntreePourContinuer("*...alors tant que tu ne la commence pas, tu est en dehors du Coliseum !*")
                        Ending.PrintEtEntreePourContinuer("*Tu ne comprend pas ?*\n*La mort reprend son cours tant que tu ne lance pas le système , car la mort ne sera plus piégée dans le Coliseum, mais en dehors !*")
                        Ending.PrintEtEntreePourContinuer("*Je te dirait plus au prochain étage.*")
                        Ending.PrintEtEntreePourContinuer("*Dernièrement,*")
                        Ending.PrintEtEntreePourContinuer("*La combattante a cet étage s'appelle Eris.*")
                        Ending.PrintEtEntreePourContinuer("*C'est la forme corporelle de la Déesse du chaos.*")
                        Ending.PrintEtEntreePourContinuer("*Mais vu que la Déesse du Chaos est déjà morte il y a longtemps, je ne comprend pas ce que son corps divin fait là...*")
                        Ending.PrintEtEntreePourContinuer("*...*")
                        Ending.PrintEtEntreePourContinuer("*...*")
                        Ending.PrintEtEntreePourContinuer("*Je comprend pas.*")
                        Ending.PrintEtEntreePourContinuer("*Si elle est morte pendant la Guerre de l'Interdit, alors il ne devrait plus y avoir aucune trace d'elle, sauf pour sa divinité qui aurait rejoint un réceptacle adapté.*")
                        Ending.PrintEtEntreePourContinuer("*Ca voudrait dire que...*")
                        Ending.PrintEtEntreePourContinuer("*...*")
                        Ending.PrintEtEntreePourContinuer("*Non.*")
                        Ending.PrintEtEntreePourContinuer("*On arrête là.*")
                        pass  #  voix dit Eris ? bizarre !, parle de Eris
                    elif Player.numero_boss_alt == 9:
                        Ending.PrintEtEntreePourContinuer("*...*")
                        Ending.PrintEtEntreePourContinuer("*Voila ta tache.*")
                        Ending.PrintEtEntreePourContinuer("*Bat les deux derniers combattants, récupère la divinité de la Mort, puis remet a zéro cette... ligne temporelle ?*\n*Ce monde ?*\n*Je ne sais pas.*")
                        Ending.PrintEtEntreePourContinuer("*J'imagine que tu voudrais quand même une récompense pour cette quête ?*")
                        Ending.PrintEtEntreePourContinuer("*Sache que posséder la divinité de la Mort sur toi te permettrait deux choses.*")
                        Ending.PrintEtEntreePourContinuer("*Déja, tu vois les méchanismes anciens ?*")
                        Ending.PrintEtEntreePourContinuer("*Ce sont en fait des méchanismes divin, créés par les Dieux pour tester les limites de leur pouvoir.*\n*En ayant la même aura que les dieux, tu possèdera la capacité de les utiliser a leurs plein potentiel.*")
                        Ending.PrintEtEntreePourContinuer("*Un exemple parmis tant d'autres, tu as déja remarqué le double fond dans les coffres a artefacts ?*\n*Non ?*")
                        Ending.PrintEtEntreePourContinuer("*C'est normal. Tu n'es pas un dieu. Car les dieux savent que les meilleurs artefacts sont dans le double fond de la boite a artefact.")
                        Ending.PrintEtEntreePourContinuer("*Enfin, tu pourras aussi utiliser l'élément Ame.*\n*J'imagine que tu a déja vu le sigil des éléments, non ?*")
                        Ending.PrintEtEntreePourContinuer("*Ca ne t'a jamais fait bizarre de pouvoir utiliser des talents pour tout les éléments, sauf pour l'élément Ame ?*")
                        Ending.PrintEtEntreePourContinuer("*Et puis, en vrai, vu que toi, Terah, tu est le réceptacle de cette Divinité, je suis sur que tu pourrais débloquer un joli stigma si tu le possédait.*")
                        Ending.PrintEtEntreePourContinuer("*...*")
                        Ending.PrintEtEntreePourContinuer("*Ca ne suffit pas ?*")
                        Ending.PrintEtEntreePourContinuer("*Alors je te le demande formellement.*")
                        Ending.PrintEtEntreePourContinuer("*S'il te plait, Oh entité supérieure qui guide les pas des gens tombés dans le piège du Coliseum...*")
                        Ending.PrintEtEntreePourContinuer("*Ramène la mort parmis ce monde.*")
                        Ending.PrintEtEntreePourContinuer("*...*")
                        Ending.PrintEtEntreePourContinuer("*S'il te plait.*")
                        Ending.PrintEtEntreePourContinuer("*...*")
                        Ending.PrintEtEntreePourContinuer("*Dernièrement,*")
                        Ending.PrintEtEntreePourContinuer("*Tu a ici un amalgame de la souffrance des âmes retenues prisonnières dans le Coliseum.*")
                        Ending.PrintEtEntreePourContinuer("*C'est la que la Pierre de Désir vient jeter les souffrances psychiques et émotionnelles de celles et ceux qui sont piégés.*")
                        Ending.PrintEtEntreePourContinuer("*C'est un véritable spectre en quête de libertée.*")
                        Ending.PrintEtEntreePourContinuer("*Il possède toutes les techniques et sorts que l'on peut gagner dans le Coliseum.*")
                        Ending.PrintEtEntreePourContinuer("*Bonne chance.*")
                        pass  #  voix dit histoire de l'endroit, pour elle, parle de Spectre
                    elif Player.numero_boss_alt == 10:
                        Ending.PrintEtEntreePourContinuer("...")
                        Ending.PrintEtEntreePourContinuer("...")
                        Ending.PrintEtEntreePourContinuer("...")
                        Ending.PrintEtEntreePourContinuer("Je n'ai pas le choix.")
                        pass  #  voix dit rien, parle pas
                    Ending.PrintEtEntreePourContinuer("*C'est tout pour maintenant.*\n*Que la divinité de la mort emplisse ton coeur de sa puissance, enfant maudit.*")
                    Ending.PrintEtEntreePourContinuer("Vous sentez l'énergie du vide tout autour s'infiltrer par vos pores, et gagnez 10 points de vie max ainsi que 10 points de mana max !")
                    Player.points_de_mana_max += 5
                    Player.points_de_mana += 5
                    Player.points_de_vie_max += 10
                    Player.points_de_vie += 10
                # fait que l'event soit finit et ne peut ps etre relancé
                caracteristique_de_la_salle["terminé par joueur"] = True
            elif caracteristique_de_la_salle["type"] == "LEY":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.ley()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print(
                    "Alors que vous fouillez la pièce, vous ressentez une immense puissance dans le sol."
                )
                print(
                    "Vous avez trouvé un ley !\nC'est un chemin que l'énergie de la nature parcourt."
                )
                Affichage.EntreePourContinuer()
                while True:
                    try:
                        print(
                            "Vous pouvez cultiver votre corps ou votre esprit sur un ley, et il deviendra bien plus puissant !"
                        )
                        print("\n1 - Cultiver votre corps")
                        print("2 - Cultiver votre esprit")
                        choix = int(
                            input("\nChoisissez votre action avec les nombres : ")
                        )
                        ClearConsole()
                        if choix in [1, 2]:
                            break
                    except ValueError:
                        ClearConsole()
                if choix == 1:
                    print(
                        "Vous tentez par tout les moyens de vous épuiser, mais l'énergie du ley vous revigore a chaque fois."
                    )
                    Affichage.EntreePourContinuer()
                    print(
                        "Au bout de plusieurs heures de sport intensif, votre corps gagne en puissance alors que votre vitalité est au max."
                    )
                    Affichage.EntreePourContinuer()
                    print("Vous gagnez 4 points de vie max !")
                    print("Vous reprenez tout vos points de vie !")
                    print("Vous gagnez 1 point d'endurance ! ")
                    Player.points_de_vie_max += 4
                    Player.points_de_vie = Player.points_de_vie_max
                    Player.points_dendurance += 1
                    Affichage.EntreePourContinuer()
                else:
                    print(
                        "Vous faites la position du lotus au dessus du ley, et meditez."
                    )
                    print(
                        "Votre esprit se faire remplir de sons, couleurs, et souvenirs que vous n'aviez jamais experiencé auparavant."
                    )
                    Affichage.EntreePourContinuer()
                    print(
                        "Au bout de lusieurs heures, vous arrivez a dompter la mémoire de la Terre, et votre réservoir de mana s'en trouve aggrandit."
                    )
                    Affichage.EntreePourContinuer()
                    print("Vous gagnez 5 points de mana max !")
                    print("Vous reprenez tout vos points de mana !")
                    Player.points_de_mana_max += 5
                    Player.points_de_mana = Player.points_de_mana_max
                    Affichage.EntreePourContinuer()
                print("Le ley s'assèche, et disparait.")
                print("L'énergie a du trouver un autre endroit pour passer.")
                Affichage.EntreePourContinuer()

                # fait que l'event soit finit et ne peut ps etre relancé
                caracteristique_de_la_salle["terminé par joueur"] = True
            elif caracteristique_de_la_salle["type"] == "MIMIQUE":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.mimique()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous trouvez un magnifique coffre doré !")
                print(
                    "Ses reliures de cuivres, ses gravures de bois noble, ses contours en or fin vous attirent"
                    " et remplissent votre coeur de cupidité !"
                )
                Affichage.EntreePourContinuer()
                print(
                    "Seul bémol : une respiration sourde, saccadée, qui résonne dans toute la salle et dont les échos masquent l'origine."
                )
                print("Le trésor est peut-être gardé, après tout.")
                Affichage.EntreePourContinuer()
                while True:
                    try:
                        print("Que faire ?")
                        print("\n1 - Approcher le coffre")
                        print("2 - Partir")
                        choix = int(
                            input("\nChoisissez votre action avec les nombres : ")
                        )
                        ClearConsole()
                        if choix in [1, 2]:
                            break
                    except ValueError:
                        ClearConsole()
                if choix == 1:
                    # lance le combat
                    print(
                        "Vous vous approchez du coffre, et il prend soudainement vie !"
                    )
                    Affichage.EntreePourContinuer()
                    Player.affronte_une_mimique = True
                    control = controleur.Control(Player, Trader, FloorMaker, Sove)
                    # lance la bataille
                    try:
                        CHANNELMUSIQUEDEBASE.set_volume(0)
                        time.sleep(0.01)
                        CHANNELMUSIQUEDEBASE.stop()
                        control.Battle()
                        StopAllMusic()
                    except Exception as error:
                        WriteErrorInErrorLog(error)
                    Player.affronte_une_mimique = False
                    PlayMusicDeLetage()
                    
                    # fait que l'event soit finit et ne peut ps etre relancé
                    caracteristique_de_la_salle["terminé par joueur"] = True
                else:
                    print("Vous reculez prudemment.")
                    Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "PIEGE":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.piege()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print(
                    "Vous fouillez la salle...et déclenchez un piège en déplacant un meuble."
                )
                print(
                    "Aussitot, des arbalètes sournoises, cachées dans les murs, vous criblent de flèches !"
                )
                Affichage.EntreePourContinuer()
                if not ("Sabre du Roi de Glace" in Player.liste_dartefacts_optionels):
                    degat = round(Player.points_de_vie_max * 0.33)
                    Player.points_de_vie -= degat
                    print(f"Vous perdez {degat} points de vie.")
                    Affichage.EntreePourContinuer()
                    if Player.points_de_vie <= 0:
                        StopAllMusic()
                        PlaySound("death")
                        print("Vous échouez a stopper le saignement, et perdez la vie.")
                        Affichage.EntreePourContinuer()
                        Player.player_tags.append("KIA")
                        CheckForKIA()
                    else:
                        print(
                            "Le piège se ré-enclenche.\nEvitez de fouiller cette salle dans le futur !"
                        )
                        Affichage.EntreePourContinuer()
                else:
                    print("Cepandant, des éclats de glace se forment aux endroits ou les flèches auraient du se planter.")
                    print("De plus, avant que les arbalettes ne puissent battre en retraite dans les murs de la salle, un froid glacial les éclate par gélifraction.")
                    Affichage.EntreePourContinuer()
                    print("Vous n'aurez plus a vous soucier de cette salle désormais !")
                    Affichage.EntreePourContinuer()
                    # fait que l'event soit finit et ne peut ps etre relancé
                    caracteristique_de_la_salle["terminé par joueur"] = True
            elif caracteristique_de_la_salle["type"] == "SECRET":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.secret()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                Observation.SeeSomething()
            elif caracteristique_de_la_salle["type"] == "COEUR":
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.coeur()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                if Player.numero_de_letage == 2 :
                    print("Vous arrivez dans une clairière artificielle, au centre de laquelle se tient une lame magnifique encastrée dans un rocher.")
                    print("Loin au dessus du rocher, vous apercevez une ouverture cerclée de vieille pierre.")
                    Affichage.EntreePourContinuer()
                    print("Les racines des arbres environnant semblent converger au niveau du rocher.")
                    Affichage.EntreePourContinuer()
                    while True:
                        try:
                            print("Que faire ?")
                            print("\n1 - S'éloigner\n2 - Retirer la lame")
                            choix = int(
                                input("\nChoisissez votre action avec les nombres : ")
                            )
                            ClearConsole()
                            if choix in [1, 2]:
                                break
                        except ValueError:
                            ClearConsole()
                    if choix == 1:
                        print("Vous vous éloignez de la clairière.")
                        Affichage.EntreePourContinuer()
                    else:
                        print("Vous vous approchez de la roche, et posez vos main sur le paumeau de l'épée.")
                        if Player.nom_de_letage == "Jungle Cruelle":
                            print("Aussitot, les sons de la forêt se taisent.")
                            Affichage.EntreePourContinuer()
                            print("Vous sentez les arbres pale étendre les racines sous la surface du sol, comme pour tenter de vous attraper, ou de vous arreter.")
                            Affichage.EntreePourContinuer()
                            print("Des cris a glacer le sang émanent de tout les cotés, et vous remarquez enfin la grosse tache de sang tout autour du rocher, a moitié absorbée.")
                            Affichage.EntreePourContinuer()
                            print("Votre poul s'accélère, et vous tirez de toutes vos forces sur la lame...")
                            Affichage.EntreePourContinuer()
                            print("..qui finit enfin par sortir de son fourreau de pierre, révélant en dessous un coeur de bois se vidant d'une sève couleur cendre.")
                            Affichage.EntreePourContinuer()
                            print("Les cris se taisent, et la forêt meurt.")
                            Affichage.EntreePourContinuer()
                            print("Alors que vous prenez enfin toute la gravité de vos actions, vous observez la lame, qui luit doucement dans votre main.")
                            print("Son apparence trompeuse a laissé place a un artefact rongé par la rouille, mais qui semble attirer le mana.")
                            Affichage.EntreePourContinuer()
                            print("Vous obtenez l'artefact [Lame Spectrale] !")
                            print("Lorsqu'un ennemi brise son réservoir de mana, vous retrouvez jusqu'à 30% de vos points de mana maximum !")
                            caracteristique_de_la_salle["terminé par joueur"] = True
                            FloorMaker.GiveRandomArtefact("Lame Spectrale","Don")
                            Affichage.EntreePourContinuer()
                            print("Vous vous éloignez de la clairière.")
                            Affichage.EntreePourContinuer()
                        else:
                            print("Aussitot, les sons de la forêt se taisent.")
                            Affichage.EntreePourContinuer()
                            print("Un vent violent se lève, alors que vous soulevez la lame de son piédestal.")
                            Affichage.EntreePourContinuer()
                            print("Vous finissez par sortir entièrement l'épée de son rocher, et découvrez en dessous un coeur de bois désséché dans lequel le métal était planté.")
                            Affichage.EntreePourContinuer()
                            print("Et alors que vous observez votre nouvelle arme...")
                            Affichage.EntreePourContinuer()
                            print("...Zeroual grandit...")
                            Affichage.EntreePourContinuer()
                            print("...enveloppe l'arme...")
                            Affichage.EntreePourContinuer()
                            print("...et l'avale d'un coup.")
                            Affichage.EntreePourContinuer()
                            print("La ou se tenait auparavant un artefact splendide arraché a un lieu magique, il y a maintenant une marque ésotérique gravée sur la peaume de votre main.")
                            Affichage.EntreePourContinuer()
                            print("Vous obtenez l'artefact [Marque du Tyrant] !")
                            print("Lorsque vous finissez un combat avec toute votre vie, vous gagnez un point de vie max supplémentaire !")
                            print("De plus, le nombre de monstre que vous avez tué augmente de 5, pour une raison quelquonque !")
                            caracteristique_de_la_salle["terminé par joueur"] = True
                            FloorMaker.GiveRandomArtefact("Marque du Tyrant","Don")
                            Player.nombre_de_monstres_tues += 5
                            Affichage.EntreePourContinuer()
                            print("Vous vous éloignez de la clairière.")
                            Affichage.EntreePourContinuer()
                elif Player.numero_de_letage == 7:
                    print("Vous arrivez dans une salle circulaire, contenant en son centre un piedestal griffoné de centaines de messages sans queue ni tête.")
                    print("Loin au dessus du piedestal, vous apercevez une ouverture cerclée de vieille pierre.")
                    Affichage.EntreePourContinuer()
                    print("Une roche est posée sur le piedestal.")
                    if Player.nom_de_letage != "Douves du Pénitent":
                        print("Elle est enflammée, des dizaines de spectres de feu virevoltant autour d'elle dans une cacophonie de lamentations et d'accusations.")
                    else:
                        print("Elle est en dessous d'une cascade émanant de l'ouverture de pierre plus haut qui répand ses eaux sur la totalité de l'étage, et se pare d'une couleur sombre comme le charbon.")
                    Affichage.EntreePourContinuer()
                    while True:
                        try:
                            print("Que faire ?")
                            print("\n1 - S'éloigner\n2 - Prendre la pierre")
                            choix = int(
                                input("\nChoisissez votre action avec les nombres : ")
                            )
                            ClearConsole()
                            if choix in [1, 2]:
                                break
                        except ValueError:
                            ClearConsole()
                    if choix == 1:
                        print("Vous vous éloignez de la salle.")
                        Affichage.EntreePourContinuer()
                    else:
                        print("Vous vous approchez de la pierre, et posez votre main dessus.")
                        Affichage.EntreePourContinuer()
                        if Player.nom_de_letage == "Douves du Pénitent":
                            print("Alors que vous la sortez de l'eau, sa couleur disparait comme si elle n'était qu'un simple rêve.")
                            Affichage.EntreePourContinuer()
                            print("Vous observez la simple pierre, qui se révèle être un jade intrigant contenant une plus petite roche dorée.")
                            Affichage.EntreePourContinuer()
                            print("Alors que vous la tenez dans votre main, vous jureriez entendre des sanglots autour de vous.")
                            Affichage.EntreePourContinuer()
                            print("Vous obtenez l'artefact [Jade Impardonnable] !")
                            print("La cristallisation de centaines d'années de culpabilité.\nLorsque vous passez votre tour avec tout vos points de mana, vous entrez dans un état de folie pendant 1 tour !")
                            caracteristique_de_la_salle["terminé par joueur"] = True
                            FloorMaker.GiveRandomArtefact("Jade Impardonnable","Don")
                            Affichage.EntreePourContinuer()
                            print("Vous vous éloignez de la salle.")
                            Affichage.EntreePourContinuer()
                        else:
                            print("Alors que vous commencez a grimacer sous l'effet du feu qui enveloppe la pierre....")
                            Affichage.EntreePourContinuer()
                            print("...vous vous rendez compte qu'il ne vous brule pas.")
                            Affichage.EntreePourContinuer()
                            print("Au contraire, il semble apaiser quelque chose de singulier, de primitif, enfoui a l'interieur de votre ADN.")
                            Affichage.EntreePourContinuer()
                            print("Vous sentez en vous un plaisir coupable, ressentit seulement après la réalisation d'une vengence.")
                            Affichage.EntreePourContinuer()
                            print("Un plaisir couplé a une colère grandissante, comme un besoin de prouver une quelquonque supériorité?")
                            Affichage.EntreePourContinuer()
                            print("Vous vous indulgez dans le confort de fortes émotions, et commencez un rire maniaque alors que les spectres de feu dansent autour de vous !")
                            Affichage.EntreePourContinuer()
                            print("...")
                            Affichage.EntreePourContinuer()
                            print("Quand vous reprenez vos esprits, vous êtes a terre, sans vêtements, des marques de brulures scarifiants les murs de la salle comme de la peau sur laquelle on défoulerait ses émotions.")
                            Affichage.EntreePourContinuer()
                            print("Dans votre main gauche, Zeroual avec 10 âmes aborbées d'on ne sait ou.")
                            Affichage.EntreePourContinuer()
                            print("Dans votre main droite, la pierre calcinée du piedestal.")
                            Affichage.EntreePourContinuer()
                            print("Plus aucun feu ne brule dans la salle.")
                            print("Plus aucun spectre ne répandent leur colère.")
                            Affichage.EntreePourContinuer()
                            print("La salle est vide.")
                            Affichage.EntreePourContinuer()
                            print("Vous obtenez l'artefact [Basalte Immonde] !")
                            print("Une roche impure, ayant absorbée les joies d'une colère sans limite pendant des centaines d'années.\nLorsque vous passez votre tour avec tout vos points de mana, vous entrez dans un état de furie pendant 1 tour !")
                            print("De plus, le nombre de monstre que vous avez tué augmente de 10, pour une raison quelquonque !")
                            caracteristique_de_la_salle["terminé par joueur"] = True
                            FloorMaker.GiveRandomArtefact("Basalte Immonde","Don")
                            Player.nombre_de_monstres_tues += 10
                            Affichage.EntreePourContinuer()
                            print("Vous vous rhabillez, et vous éloignez de la salle.")
                            Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "PUIT":
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.puit()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous apercevez un puit singulier, fait de vieille pierre.")
                Affichage.EntreePourContinuer()
                if Player.numero_de_letage == 1:
                    print("Au fond de celui-ci, vous apercevez les contours d'un rocher entouré d'un tapis de verdure")
                    Affichage.EntreePourContinuer()
                    print("Dans le seau porté au dessus du précipice par une corde solide se trouve un liquide carmin, visqueux.")
                    Affichage.EntreePourContinuer()
                    while True:
                        try:
                            print("Que faire ?")
                            print("\n1 - S'éloigner du puit\n2 - Boire le contenu du seau\n3 - Vider le seau dans le puit")
                            choix = int(
                                input("\nChoisissez votre action avec les nombres : ")
                            )
                            ClearConsole()
                            if choix in [1, 2, 3]:
                                break
                        except ValueError:
                            ClearConsole()
                    if choix == 1:
                        print("Vous vous éloignez du puit.")
                        Affichage.EntreePourContinuer()
                    elif choix == 2:
                        print("Vous approchez le seau de vos lèvres, et vos narines sont assaillies par une puissante odeur métallique.")
                        Affichage.EntreePourContinuer()
                        print("Vous persévérez, et bientôt le liquide froid coule dans votre gorge...")
                        Affichage.EntreePourContinuer()
                        print("...et c'était très nutritif !\nVous gagnez 5 points de vie max !")
                        caracteristique_de_la_salle["terminé par joueur"] = True
                        Player.points_de_vie += 5
                        Player.points_de_vie_max += 5
                        Affichage.EntreePourContinuer()
                        print("Vous vous éloignez du puit.")
                        Affichage.EntreePourContinuer()
                    elif choix == 3:
                        print("Vous prenez le seau a deux mains, et déversez son contenu dans le puit.")
                        Affichage.EntreePourContinuer()
                        print("Tout au fond, vous apercevez le tapis de verdure se teindre de rouge.")
                        Affichage.EntreePourContinuer()
                        print("Tout a coup, de grandes secousses et un cri a glacer le sang se fait entendre, alors que des racines jaillissent des murs du puit pour en obstruer la vue !")
                        Affichage.EntreePourContinuer()
                        print("Vous avez le terrible sentiment que quelque chose de végétal, en dessous, vient de se réveiller.")
                        Affichage.EntreePourContinuer()
                        print("L E  P R O C H A I N  E T A G E  C H A N G E  D E  P R O P R I E T A I R E\n")
                        caracteristique_de_la_salle["terminé par joueur"] = True
                        Player.etage_alternatif = True
                        Affichage.EntreePourContinuer()
                        print("Vous vous éloignez du puit.")
                        Affichage.EntreePourContinuer()
                elif Player.numero_de_letage == 6:
                    print("Au fond de celui-ci, vous apercevez les contours d'un feu entouré de petites flamelettes qui virevoltent, et entendez des murmures colériques remontant le long des parois du puit.")
                    Affichage.EntreePourContinuer()
                    while True:
                        while True:
                            try:
                                print("Que faire ?")
                                print("\n1 - S'éloigner du puit\n2 - Verser quelque chose dans le puit")
                                choix = int(
                                    input("\nChoisissez votre action avec les nombres : ")
                                )
                                ClearConsole()
                                if choix in [1, 2]:
                                    break
                            except ValueError:
                                ClearConsole()
                        if choix == 1:
                            print("Vous vous éloignez du puit.")
                            Affichage.EntreePourContinuer()
                            break
                        elif choix == 2 and "Larmes de Vénus" in Player.liste_dartefacts_optionels:
                            print("Vous prenez la petite fiole d'eau dans votre main, et la regardez briller doucement.")
                            Affichage.EntreePourContinuer()
                            print("Une fiole de Larme de Vénus permet *d'apaiser les feux de la colère et ne laisse derrière que les ombres de la culpabilité*, hein ?")
                            print("La description n'a pas beaucoup de sens, mais juste le fait de la tenir apaise votre esprit combatif.")
                            Affichage.EntreePourContinuer()
                            print("Vous devissez le joli bouchon de cristal, et versez le contenu de la fiole dans le puit, en essayant de viser le feu tout en bas.")
                            Player.liste_dartefacts_optionels.remove("Larmes de Vénus")
                            Affichage.EntreePourContinuer()
                            print("Vous voyez le feu s'éteindre, les flamelettes disparaitre, et un terrible cri de douleur émaner de tout en bas.")
                            print("Alors que vous vous bouchez les oreille, le bruit se mue en de douloureux sanglots.")
                            print("En même temps, d'épais barreaux de fer sortent des parois du puit, interdisant la descente.")
                            Affichage.EntreePourContinuer()
                            print("Vous avez le sentiment d'avoir changé quelque chose d'immuable, en dessous.")
                            Affichage.EntreePourContinuer()
                            print("L E  P R O C H A I N  E T A G E  C H A N G E  D E  P R O P R I E T A I R E\n")
                            caracteristique_de_la_salle["terminé par joueur"] = True
                            Player.etage_alternatif = True
                            Affichage.EntreePourContinuer()
                            print("Vous vous éloignez du puit.")
                            Affichage.EntreePourContinuer()
                            break
                        else:
                            print("Vous regardez votre inventaire, mais n'avez rien a vider dans le puit.")
                            Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "LIANE":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.liane()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print(
                    "Parmis les herbes hautes et les racines d'arbres, vous trouvez un petit coffre de bois noir."
                )
                print("Celui-ci est enserré de lianes épaisses.")
                Affichage.EntreePourContinuer()
                # si on a la machette rouillee, on peut liberer le coffre
                if "Machette Rouillée" in Player.liste_dartefacts_optionels:
                    Player.liste_dartefacts_optionels.remove("Machette Rouillée")
                    print(
                        "Vous utilisez une Machette Rouillée sur les lianes, et réussissez"
                        " a en trancher assez pour liberer le coffre, juste avant que la machette ne se brise!"
                    )
                    Affichage.EntreePourContinuer()
                    print("Vous ouvrez le coffre...")
                    Affichage.EntreePourContinuer()
                    # fait que l'event soit finit et ne peut ps etre relancé
                    caracteristique_de_la_salle["terminé par joueur"] = True
                    self.GiveRandomArtefact()
                else:
                    print(
                        "Vous tirez de toutes vos forces sur les lianes, mais elles restent accrochées au coffre."
                    )
                    print("Vous laissez tomber.")
                    Affichage.EntreePourContinuer()
            elif (caracteristique_de_la_salle["type"] == "FAUX SPOT" or  #DONE
                  caracteristique_de_la_salle["type"] == "SPOT"):  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.spot()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print(
                    "Vous pouvez apercevoir, dans le sable, une croix rouge."
                    "\nElle ressemble à ce que l'on peut trouver sur une carte aux trésors !"
                )
                Affichage.EntreePourContinuer()
                # si on a la Vieille Pelle, on peut liberer le coffre
                if "Vieille Pelle" in Player.liste_dartefacts_optionels:
                    Player.liste_dartefacts_optionels.remove("Vieille Pelle")
                    # fait que l'event soit finit et ne peut ps etre relancé
                    caracteristique_de_la_salle["terminé par joueur"] = True
                    Save.SaveTheGameSansAffichage()
                    print(
                        "Vous utilisez une Vieille Pelle pour creuser au centre de la croix, et..."
                    )
                    Affichage.EntreePourContinuer()
                    if caracteristique_de_la_salle["type"] == "SPOT":
                        print("...la brisez sur un petit coffre de bois noir, que vous ouvrez immédiatement !")
                        Affichage.EntreePourContinuer()
                        self.GiveRandomArtefact()
                    else:
                        print("...la brisez sur un morceau de roche dure.")
                        print("Il n'y avait donc rien à trouver ici.")
                        Affichage.EntreePourContinuer()
                else:
                    print(
                        "Vous commencez a creuser avec vos mains, "
                        "mais la chaleur du sable et la difficultée de la tache vous vous convainc d'arrêter."
                    )
                    print("Vous laissez tomber.")
                    Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "SEQUENCE":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.sequence()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                # determine une sequence aléatoire si yen a pas deja une
                if len(self.liste_sequence) == 0:
                    for _ in range (1, 5):
                        numero_de_salle_aleatoire = random.randint(5, len(self.FloorBlueprint))
                        self.liste_sequence.append(numero_de_salle_aleatoire)
                #print(self.liste_sequence)
                #Affichage.EntreePourContinuer()

                #compare la sequence aux dernieres salles observées par le joueur
                sequence_realisee = False
                if len(self.liste_des_salles_observées) == 4:
                    sequence_realisee = True
                    for numero_de_salle in range(0, 4):
                        if self.liste_des_salles_observées[numero_de_salle] == self.liste_sequence[numero_de_salle]:
                            continue
                        sequence_realisee = False
                
                print("Vous trouvez un des plateaux volants gisant sur le sol, son métal devenu noir comme du charbon.")
                Affichage.EntreePourContinuer()    
                if sequence_realisee:
                    #la main passe a travers les mots du parchemin et retire un artefact 
                    print("Dessus, un parchemin montrant une allée de bibliothèque aux rangées droites, et dans"
                          " laquelle se trouve un garde qui se prosterne.")
                    print("Vous pouvez apercevoir un petit coffre de bois noir devant lui.")
                    Affichage.EntreePourContinuer()
                    print("Vous tendez la main pour touchez le papier, et vos doigts passent a travers l'image.")
                    Affichage.EntreePourContinuer()
                    print("Vous retirez un coffre du parchemin, et ce dernier s'enflamme !")
                    Affichage.EntreePourContinuer()
                    print("Vous lachez brusquement le parchemin qui disparait alors dans l'air, et ouvrez le coffre...")
                    Affichage.EntreePourContinuer()
                    caracteristique_de_la_salle["terminé par joueur"] = True
                    self.GiveRandomArtefact()
                else:
                    # montre le parchemin avec la séquence
                    print("Dessus, un parchemin dépictant une allée de bibliothèque aux rangées droites, et dans"
                          " laquelle se trouve un garde dont le visage ferme et les bras croisés évoque la rigueur.")
                    print("Vous pouvez apercevoir un petit coffre de bois noir entre ses jambes.")
                    Affichage.EntreePourContinuer()
                    print("En bas du parchemin, il est écrit un poême :")
                    Affichage.EntreePourContinuer()
                    print("*L'Empereur se promène dans son pavillon.*")

                    #position de la premiere salle de la sequence
                    position_x = self.FloorBlueprint[self.liste_sequence[0]]["position_x"]
                    if position_x < 0:
                        commentaire_x = f"moins de {abs(position_x)}"
                    elif position_x == 0:
                        commentaire_x = "son manque de"
                    else:
                        commentaire_x = position_x
                    position_y = self.FloorBlueprint[self.liste_sequence[0]]["position_y"]
                    if position_y < 0:
                        commentaire_y = f"moins de {abs(position_y)}"
                    elif position_y == 0:
                        commentaire_y = "son manque de"
                    else:
                        commentaire_y = position_y
                    print(f"*Il va observer {commentaire_x} carpes et {commentaire_y} roseaux de son étang.*")

                    #position de la deuxieme salle de la sequence
                    position_x = self.FloorBlueprint[self.liste_sequence[1]]["position_x"]
                    if position_x < 0:
                        commentaire_x = f"moins de {abs(position_x)}"
                    elif position_x == 0:
                        commentaire_x = "son manque de"
                    else:
                        commentaire_x = position_x
                    position_y = self.FloorBlueprint[self.liste_sequence[1]]["position_y"]
                    if position_y < 0:
                        commentaire_y = f"moins de {abs(position_y)}"
                    elif position_y == 0:
                        commentaire_y = "son manque de"
                    else:
                        commentaire_y = position_y
                    print(f"*Il va regarder travailler {commentaire_x} cuisiniers et {commentaire_y} servantes dans sa cuisine.*")

                    #position de la troisieme salle de la sequence
                    position_x = self.FloorBlueprint[self.liste_sequence[2]]["position_x"]
                    if position_x < 0:
                        commentaire_x = f"moins de {abs(position_x)}"
                    elif position_x == 0:
                        commentaire_x = "son manque de"
                    else:
                        commentaire_x = position_x
                    position_y = self.FloorBlueprint[self.liste_sequence[2]]["position_y"]
                    if position_y < 0:
                        commentaire_y = f"moins de {abs(position_y)} "
                    elif position_y == 0:
                        commentaire_y = "son manque d'"
                    else:
                        commentaire_y = f"{position_y} "
                    print(f"*Il va admirer {commentaire_x} fleurs et {commentaire_y}arbres dans son jardin.*")

                    #position de la derniere salle de la sequence
                    position_x = self.FloorBlueprint[self.liste_sequence[3]]["position_x"]
                    if position_x < 0:
                        commentaire_x = f"moins de {abs(position_x)}"
                    elif position_x == 0:
                        commentaire_x = "son manque de"
                    else:
                        commentaire_x = position_x
                    position_y = self.FloorBlueprint[self.liste_sequence[3]]["position_y"]
                    if position_y < 0:
                        commentaire_y = f"moins de {abs(position_y)}"
                    elif position_y == 0:
                        commentaire_y = "son manque de"
                    else:
                        commentaire_y = position_y
                    print(f"*Il va lire {commentaire_x} livres et {commentaire_y} comptes-rendus dans sa bibliothèque.*")

                    print("*Puis il vient saluer son garde, qui le reconnait et lui offre une preuve de sa fidélité.*")
                    Affichage.EntreePourContinuer()
                    print("Vous reposez le parchemin sur le plateau et repartez.")
                    Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "DDR":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.ddr()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("La salle est remplie de jeux d'arcades aux thêmes divers et variés, mais les carcasses de métal et de peinture sont presque toutes inopérables.")
                print("Seule une machine affiche fièrement ses couleurs et son nom en lettres de néon :")
                Affichage.EntreePourContinuer()
                print("""Dance Dance Revolution MAXIMUM OUTPUT!!!""")
                Affichage.EntreePourContinuer()
                print("Sur l'écran, vous pouvez voir plusieurs images de boites de nuits à l'ambiance endiablée "
                          "dans lesquelles sont modélisés des personnages banals aux visages radieux.")
                print("Seul un jeune homme en costume à paillette et pattes d'éléphant se déhanche furieusement sur le dancefloor, un regard vide plaqué sur le visage.")
                Affichage.EntreePourContinuer()
                print("Les scores des différents joueurs se mettent alors a défiler, et a la fin, un message indiquant que celui qui bat le score du joueur en tête sera récompensé.")
                Affichage.EntreePourContinuer()
                print("L'image de profil du joueur n°1 ressemble trait pour trait a celui de l'homme aux pattes d'éléphants.")
                Affichage.EntreePourContinuer()
                while True:
                    try:
                        print("Jouer ? (75 Golds)")
                        print("\n1 - Oui")
                        print("2 - Non")
                        choix = int(
                            input("\nChoisissez votre action avec les nombres : ")
                        )
                        ClearConsole()
                        if choix in [1, 2]:
                            break
                    except ValueError:
                        ClearConsole()
                if choix == 1:
                    if Player.nombre_de_gold >= 75:
                        game_done = self.DanceDanceRevolutionIntroduction()
                        if game_done:
                            StopAllMusic()
                            print("La machine explose !")
                            Affichage.EntreePourContinuer()
                            print("Vous faites attention aux morceaux de verre brisés et aux étincelles, et regardez derriere l'écran.")
                            Affichage.EntreePourContinuer()
                            print("Vous trouvez un squelette habillé avec un costume a pailette et des pattes d'éléphants.")
                            Affichage.EntreePourContinuer()
                            print("Entre ses doigts squelettiques, il tient un petit coffre de bois noir.")
                            Affichage.EntreePourContinuer()
                            print("Vous arrachez le coffre du sac d'os et vous empressez de l'ouvrir.")
                            Affichage.EntreePourContinuer()
                            caracteristique_de_la_salle["terminé par joueur"] = True
                            self.GiveRandomArtefact()
                        else:
                            print("Vous vous éloignez de la machine et reprenez votre souffle.")
                            Affichage.EntreePourContinuer()
                        PlayMusicDeLetage()
                    else:
                        print("Vous videz vos poches, mais ne trouvez pas assez d'argent pour jouer.")
                        Affichage.EntreePourContinuer()
                        print("Rapelez vous : L'addiction aux jeux d'argents, c'est une maladie reconnue par l'Association américaine de psychiatrie !")
                        Affichage.EntreePourContinuer()
                        print("Gardez toujours un oeil sur ce qui est véritablement important :")
                        Affichage.EntreePourContinuer()
                        print("L'hydratation.")
                        Affichage.EntreePourContinuer()
                        print("Vous avez bu un verre d'eau ces dernières dix minutes ?")
                        Affichage.EntreePourContinuer()
                        print("Exactement.")
                        Affichage.EntreePourContinuer()
                        print("Allez boire de l'eau.")
                        Affichage.EntreePourContinuer()
                        print(f"Pendant ce temps, {Player.nom_du_personnage} sort de la salle pour éviter les tentations.")
                        Affichage.EntreePourContinuer()
                else:
                    print("Vous regardez les images défiler, et continuez votre chemin.")
                    Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "BROKEN":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.broken()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous trouvez une... bien étrange machine.")
                Affichage.EntreePourContinuer()
                print("D'un côté, une jolie horloge de parquet annotée de nombres et références.")
                print("De l'autre, un morceau de taule plié de manière artistique, qui représente un nombre différent selon le point de vue.")
                print("Et au milieu, une sépraration nette, comme si on avait coupé en deux "
                      "les deux machines et qu'on avait recollé ensemble deux bouts de machines différentes.")
                Affichage.EntreePourContinuer()
                print("...?")
                Affichage.EntreePourContinuer()
                print("Ah non.")
                Affichage.EntreePourContinuer()
                print("Pas *collé*.")
                Affichage.EntreePourContinuer()
                print("Juste posé l'un contre l'autre.")
                Affichage.EntreePourContinuer()
                print("Vous poussez le morceau de taule sur le coté, et rentrez votre main dans la cavité derriere le cadran de l'horloge.")
                print("Vous en ressortez un petit coffre de bois noir !")
                Affichage.EntreePourContinuer()
                print("Vous remerciez le manque d'inspiration du développeur, et ouvrez votre coffre gratuit.")
                Affichage.EntreePourContinuer()
                self.GiveRandomArtefact()

                # fait que l'event soit finit et ne peut ps etre relancé
                caracteristique_de_la_salle["terminé par joueur"] = True
            elif caracteristique_de_la_salle["type"] == "PLAQUE PRESSION":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.machine()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous trouvez un méchanisme ancien !")
                Affichage.EntreePourContinuer()
                print("C'est...")
                Affichage.EntreePourContinuer()
                print("...une plaque de pression.")
                Affichage.EntreePourContinuer()
                print("Vous jettez un regard désespéré à votre pied enfoncé de quelques centimètres dans le sol, et croisez les doigts.")
                Affichage.EntreePourContinuer()
                print(
                    "Aussitot, des arbalètes sournoises, cachées dans les murs, vous criblent de flèches !"
                )
                Affichage.EntreePourContinuer()
                if not ("Sabre du Roi de Glace" in Player.liste_dartefacts_optionels):
                    degat = round(Player.points_de_vie_max * 0.33)
                    Player.points_de_vie -= degat
                    print(f"Vous perdez {degat} points de vie.")
                    Affichage.EntreePourContinuer()
                    if Player.points_de_vie <= 0:
                        StopAllMusic()
                        PlaySound("death")
                        print("Vous échouez a stopper le saignement, et perdez la vie.")
                        Affichage.EntreePourContinuer()
                        Player.player_tags.append("KIA")
                        CheckForKIA()
                else:
                    print("Cepandant, des éclats de glace se forment aux endroits ou les flèches auraient du se planter.")
                    Affichage.EntreePourContinuer()
                if not "Fantome" in Player.player_tags:
                    print("Avant que vous n'ayez le temps de comprendre ce qu'il vient de se passer, un gaz violet remplit la salle, vous rendant confus !")
                    Affichage.EntreePourContinuer()
                    print("Enfin, un monstre tombe du plafond.")
                    Affichage.EntreePourContinuer()
                    Player.commence_le_combat_confus = True
                    control = controleur.Control(Player, Trader, FloorMaker, Sove)
                    # lance la bataille
                    try:
                        CHANNELMUSIQUEDEBASE.set_volume(0)
                        time.sleep(0.01)
                        CHANNELMUSIQUEDEBASE.stop()
                        control.Battle()
                        StopAllMusic()
                    except Exception as error:
                        WriteErrorInErrorLog(error)
                    Player.commence_le_combat_confus = False
                    CheckForKIA()
                    PlayMusicDeLetage()
                    print("Vous entendez un crissement irrégulier, et la plaque de pression se retrouve bloquée dans sa position.")
                    print("Vous n'aurez pas a vous soucier de cette salle davantage.")
                    Affichage.EntreePourContinuer()

                # fait que l'event soit finit et ne peut ps etre relancé
                caracteristique_de_la_salle["terminé par joueur"] = True
            elif caracteristique_de_la_salle["type"] == "ARBRE":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.machine()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous trouvez un méchanisme ancien !")
                Affichage.EntreePourContinuer()
                print("C'est...")
                Affichage.EntreePourContinuer()
                print("...un grand arbre de métal !")
                Affichage.EntreePourContinuer()
                while True:
                    try:
                        print("Vous pouvez voir des choses pousser au niveau de la canopée.")
                        print("\n1 - Donner un grand coup de pied dans l'arbre")
                        print("2 - Partir")
                        choix = int(input("\nFaites votre choix avec les nombres : "))
                        ClearConsole()
                        if choix in [1, 2]:
                            break
                    except ValueError:
                        ClearConsole()
                if choix == 1:
                    print("Vous donnez votre plus grand coup de pied dans l'arbre, et plusieurs choses tombent a terre.")
                    Affichage.EntreePourContinuer()
                    liste_de_choses = ["Feuille Jindagee", "Fruit Jindagee", "Feuille Aatma", "Fruit Aatma"]
                    liste_de_choses_tombee = []
                    for _ in range (1, 4):
                        nombre_aleatoire = random.randint(0,100)
                        if nombre_aleatoire <= 5 and "Char Leclerc 3ème Génération à Dispositif GALIX, Canon Principal 120mm et Armement Secondaire à Mitrailleuse 12,7 mm Coaxiale et Mitrailleuse de 7,62 mm en Superstructure" not in liste_de_choses_tombee:
                            liste_de_choses_tombee.append("Char Leclerc 3ème Génération à Dispositif GALIX, Canon Principal 120mm et Armement Secondaire à Mitrailleuse 12,7 mm Coaxiale et Mitrailleuse de 7,62 mm en Superstructure")
                        else:
                            chose_aleatoire = random.randint(0, 3)
                            liste_de_choses_tombee.append(liste_de_choses[chose_aleatoire])
                    print(f"Vous récuperez les objets [{liste_de_choses_tombee[0]}] [{liste_de_choses_tombee[1]}] et [{liste_de_choses_tombee[2]}] !")
                    for item in liste_de_choses_tombee:
                        if item == "Char Leclerc 3ème Génération à Dispositif GALIX, Canon Principal 120mm et Armement Secondaire à Mitrailleuse 12,7 mm Coaxiale et Mitrailleuse de 7,62 mm en Superstructure":
                            FloorMaker.GiveRandomArtefact("Char Leclerc 3ème Génération à Dispositif GALIX, Canon Principal 120mm et Armement Secondaire à Mitrailleuse 12,7 mm Coaxiale et Mitrailleuse de 7,62 mm en Superstructure","Don")
                        else:
                            Player.items_possedes[item] += 1
                    Affichage.EntreePourContinuer()
                    print("L'arbre n'a plus rien a offrir.")
                    Affichage.EntreePourContinuer()
                    # fait que l'event soit finit et ne peut ps etre relancé
                    caracteristique_de_la_salle["terminé par joueur"] = True
                elif choix == 2:
                    print("Vous laissez l'arbre tranquille et repartez dans un silence troublé seulement par le bruit du vent dans les feuilles et du bois qui se balance doucement.")
                    Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "BOL":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.machine()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                if self.nombre_de_bols == 1:
                    s_ou_pas = ""
                    des_ou_pas = "du"
                else:
                    s_ou_pas = "s"
                    des_ou_pas = "d'un des"
                print("Vous trouvez un méchanisme ancien !")
                Affichage.EntreePourContinuer()
                print("C'est...")
                Affichage.EntreePourContinuer()
                print(f"...{self.nombre_de_bols} bol{s_ou_pas}.")
                Affichage.EntreePourContinuer()
                print(f"En dessous {des_ou_pas} bol{s_ou_pas}, il y a un petit écriteau sur lequel il est marqué :")
                if self.nombre_de_bols == 1:
                    print("*Si vous lisez ceci, veuillez mettre 50 golds dans le bol.*")
                    Affichage.EntreePourContinuer()
                else:
                    print("*Merci pour vos donations !*\n*Grâce à vous, nous avons pu investir dans l'acquisition d'un autre bol !*")
                    Affichage.EntreePourContinuer()
                    print("*Maintenant, veuillez mettre 50 golds dans chacun des bols.*")
                    Affichage.EntreePourContinuer()
                if Player.nombre_de_gold < (self.nombre_de_bols * 50):
                    print(f"Mais vous n'avez même pas {(self.nombre_de_bols * 50)} golds, alors vous mettez tout vos golds dans le{s_ou_pas} bol{s_ou_pas}.")
                    Player.nombre_de_gold = 0
                else:
                    print(f"Dépité, vous mettez {(self.nombre_de_bols * 50)} golds dans le{s_ou_pas} bol{s_ou_pas}.")
                    Player.nombre_de_gold -= (self.nombre_de_bols * 50)
                self.nombre_de_bols += 1
                Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "JACCUZI":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.machine()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous trouvez un méchanisme ancien !")
                Affichage.EntreePourContinuer()
                print("C'est...")
                Affichage.EntreePourContinuer()
                print("...un jacuzzi ?")
                Affichage.EntreePourContinuer()
                print("La surface de l'eau est troublée par la présence d'un millier de bulles d'air.")
                print("Des volutes de vapeurs s'échappent du chaudron de bois....")
                print("...et des petits êtres jaunes en forme d'étoile paressent à la surface sur d'étranges ballon de baudruche en forme de donut.")
                Affichage.EntreePourContinuer()
                while True:
                    try:
                        print("L'eau chaude cristalline attire votre corps fatigué par ses blessures.")
                        print("Votre esprit, lui, est attiré par une sorte de free-form jazz reposant chanté par les êtres dorés.")

                        print("\n1 - Rentrer dans le Jacuzzi")
                        print("2 - Repartir")
                        choix = int(input("\nFaites votre choix avec les nombres : "))
                        ClearConsole()
                        if choix in [1, 2]:
                            break
                    except ValueError:
                        ClearConsole()
                if choix == 1:
                    StopAllMusic()
                    print("Vous laissez vos habits dans un petit tas à coté, et rentrez doucement dans l'eau chaude du jacuzzi.")
                    Affichage.EntreePourContinuer()
                    PlayMusic("bathhouse")
                    self.ReposDansJacuzzi()
                    PlayMusicDeLetage()
                    ClearConsole()
                    print("Vous sortez du jacuzzi, et vous rhabillez.")
                    print("Vous vous sentez plus détendu que jamais !")
                    Player.points_de_vie = Player.points_de_vie_max
                    Player.points_de_mana = Player.points_de_mana_max
                    Affichage.EntreePourContinuer()
                    print("Le jacuzzi s'éteint et une étrange substance noire recouvre sa surface...")
                    Affichage.EntreePourContinuer()
                    print("Votre corps, débarrassé de ses toxines, semble avoir pollué l'eau de l'étrange méchanisme.")
                    print("Vous ne pourrez pas revenir ici.")
                    Affichage.EntreePourContinuer()
                    # fait que l'event soit finit et ne peut ps etre relancé
                    caracteristique_de_la_salle["terminé par joueur"] = True
                else:
                    print("Vous laissez l'étrange structure et repartez d'ou vous venez.")
                    Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "CHARGEUR":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.machine()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous trouvez un méchanisme ancien !")
                Affichage.EntreePourContinuer()
                print("C'est...")
                Affichage.EntreePourContinuer()
                print("...une machine a soda ?")
                Affichage.EntreePourContinuer()
                while True:
                    try:
                        print("Vous pouvez vous servir un verre d'une des boissons proposées, sans savoir l'effet que cela aura.")
                        print("\n1 - Boire une boisson aléatoire ")
                        print("2 - Partir")
                        choix = int(input("\nFaites votre choix avec les nombres : "))
                        ClearConsole()
                        if choix in [1, 2]:
                            break
                    except ValueError:
                        ClearConsole()
                if choix == 2:
                    print("Vous laissez la machine et repartez d'ou vous venez.")
                    Affichage.EntreePourContinuer()
                elif choix == 1:
                    print("Vous prenez un gobelet de plastique rouge et le remplissez avec une des boissons proposées.")
                    Affichage.EntreePourContinuer()
                    print("Vous avalez son contenu et...")
                    Affichage.EntreePourContinuer()
                    liste_de_charge_possible = {1: {"Description" : "...ca pétille dans la bouche !\nL'élément [Foudre] à plus de chance de paralyser !", "Effet" : "Element [Foudre] Surchargé"},
                                                2: {"Description" : "...ca pique comme pas possible !\nL'élément [Feu] à plus de chance de bruler !", "Effet" : "Element [Feu] Surchargé"},
                                                3: {"Description" : "...c'est chaud et chocolaté !\nL'élément [Terre] à plus de chance d'infliger la lapidation !", "Effet" : "Element [Terre] Surchargé"},
                                                4: {"Description" : "...un gout de menthe envahit votre palais !\nL'élément [Glace] à plus de chance de geler !", "Effet" : "Element [Glace] Surchargé"},
                                                5: {"Description" : "...ca a un bon gout d'orange !\nL'élément [Sang] à plus de chance de faire un drain !", "Effet" : "Element [Sang] Surchargé"},
                                                6: {"Description" : "...la texture épaisse et le gout de banane vous dégoute un peu.\nVous reprenez 4 points d'endurance supplémentaire quand vous ne faites pas de techniques !", "Effet" : "Element [Corps] Surchargé"},
                                                7: {"Description" : "...c'était alcoolisé. Beurk !\nGagner un combat fait augmenter le compteur de monstres tués de 2 !", "Effet" : "Element [Ame] Surchargé"},}
                    nombre_de_charge_aleatoire = random.randint(1, 7)
                    charge_actuelle = liste_de_charge_possible[nombre_de_charge_aleatoire]
                    print(charge_actuelle["Description"])
                    Affichage.EntreePourContinuer()
                    FloorMaker.GiveRandomArtefact(charge_actuelle["Effet"],"Don")
                    print("La machine fait un bruit bizarre, puis un indicateur sur lequel est marqué *EN PANNE* s'allume.")
                    Affichage.EntreePourContinuer()
                    # fait que l'event soit finit et ne peut ps etre relancé
                    caracteristique_de_la_salle["terminé par joueur"] = True
            elif caracteristique_de_la_salle["type"] == "AFFIXEUR_TECHNIQUE":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.affixeur_technique()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous entrez dans la salle, et trouvez une étrange table en plein milieu.")
                Affichage.EntreePourContinuer()
                print("Elle est faite dans un materiau proche de l'obsidienne, avec un élégant tapis rouge posé par dessus, quelques diamants encastrés dans ses coins, et un emplacement pour Zeroual au milieu.")
                Affichage.EntreePourContinuer()
                print("Vous avez l'impression que des symboles inconnus sortent des taillades tapissants les murs alentours, et viennent disparaitre autour de la table.")
                Affichage.EntreePourContinuer()
                liste_techniques_affixables = []
                for technique in Player.techniques_possedes:
                    if technique in LISTETECHNIQUES or technique == "Attaque Lourde":
                        liste_techniques_affixables.append(technique)
                while True:
                    try:
                        print("Alors que vous posez Zeroual au centre de la table, des visions de vous entrain d'effectuer des techniques envahissent votre esprit.")
                        numero = 1
                        print("\n1 - Partir")
                        if Player.malediction == "Ordinaire":
                            print("*D'anciennes forces maudites interfèrent avec vos pensées. Vous ne pouvez pas enchanter.*")
                        else:
                            for technique in liste_techniques_affixables :
                                numero += 1
                                print(f"{numero} - Penser à {technique}")
                        choix = int(input("\nFaites votre choix avec les nombres : "))
                        ClearConsole()
                        if choix in range (1, (numero + 1)):
                            break
                    except ValueError:
                        ClearConsole()
                if choix == 1:
                    print("Vous retirez Zeroual et sortez de la salle.")
                    Affichage.EntreePourContinuer()
                else:
                    technique_choisie = liste_techniques_affixables[(choix - 2)]
                    liste_affix = ["~Rouge~", # +2 vie
                                   "~Carmin~", # +4 vie
                                   "~Violet~", # +2 mana
                                   "~Pourpre~", # +4 mana
                                   "~Jaune~", # +2 endurance
                                   "~Doré~", # +4 endurance
                                   "~Lolipop~", # +1 vie mana endurance
                                   "~Bubblegum~", # +2 vie mana endurance
                                   "~Escargot~", # +1% degat technique
                                   "~Limace~", # +1% degat sorts
                                   "~Citronnier~", # +0.5 degat critique technique
                                   "~Citron~", # +1 degat critique technique
                                   "~Cerisier~", # +0.5 degat critique sort
                                   "~Cerise~", # +1 degat critique sort
                                   "~Mars~", # +0.5% chance de bruler
                                   "~Neptune~", # +0.5% chance de geler
                                   "~Pluton~", # +0.25% chance de paralyser
                                   "~Lune~", # +0.5% chance de lapider
                                   "~Mercure~", # +0.5% chance de drain
                                   "~Ordre~", # peut bruler
                                   "~Aveugle~", # peut geler
                                   "~Limitation~", # peut lapider
                                   "~Transcendance~", # peut paralyser
                                   "~Eveil~", # peut drainer
                                   "~Antithèse~", # 15% chance d'arreter le gel
                                   "~Chaotique~", # 15% chance d'arreter la brulure
                                   "~Tache~", # 15% chance d'arreter la blessure
                                   "~Rature~", # 15% chance d'arreter la deconcentration
                                   "~Brouillon~", # 15% chance d'arreter la confusion
                                   "~Paragraphe~", # 6% chance d'enlever gel + brulure + blessure + deconcentration + confusion
                                   "~Magnum-Opus~", # 6% chance de donner numero_etage * 5 golds
                                   "~Agrume~", # 6% chance d'être béni
                                   "~Raisin~", # 6% chance d'être en folie
                                   "~Durian~", # 6% chance d'être en furie
                                   "~Gingembre~", # 6% chance d'être jindagee 2 tours
                                   "~Mandragore~", # 6% chance d'être aatma 2 tours
                                   "~Nigredo~", # 2% chance reprendre full vie
                                   "~Albédo~", # 2% chance reprendre full mana
                                   "~Citrinitas~", # 2% chance reprendre full endurance
                                   "~Chrysalide~", # 2% chance devenir invincible 2 tours
                                   ]
                    #enelever les effets elementaires en doublons
                    technique_choisie_transformee_en_liste = list(technique_choisie.split())
                    if "Lance" in technique_choisie_transformee_en_liste :
                        liste_affix.remove("~Limitation~")
                    elif "Bô" in technique_choisie_transformee_en_liste :
                        liste_affix.remove("~Ordre~")
                    elif "Katana" in technique_choisie_transformee_en_liste :
                        liste_affix.remove("~Aveugle~")
                    elif "Corne" in technique_choisie_transformee_en_liste :
                        liste_affix.remove("~Transcendance~")
                    elif "Dague" in technique_choisie_transformee_en_liste :
                        liste_affix.remove("~Eveil~")

                    nombre_aleatoire = random.randint(0, (len(liste_affix) - 1))
                    affix_choisi = liste_affix[nombre_aleatoire]

                    technique_choisie_a_afficher = technique_choisie
                    Player.techniques_possedes.remove(technique_choisie)
                    technique_choisie += f" {affix_choisi}"
                    Player.techniques_possedes.append(technique_choisie)
                    print("Vous approchez Zeroual du centre de la table, et celui ci se transforme en livre lévitant a quelques centimètres de celle ci.")
                    Affichage.EntreePourContinuer()
                    # fait que l'event soit finit et ne peut ps etre relancé
                    caracteristique_de_la_salle["terminé par joueur"] = True
                    Save.SaveTheGameSansAffichage()
                    print(f"Vous pensez alors a la technique {technique_choisie_a_afficher}, et les symboles inconnus tout autours convergent vers une des pages de Zeroual.")
                    Affichage.EntreePourContinuer()
                    print(f"Votre technique gagne l'enchantement [{affix_choisi}] !")
                    Affichage.EntreePourContinuer()
                    print("Les symboles disparaissent, et Zeroual reprend sa forme de base.")
                    Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "AFFIXEUR_SORT":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.affixeur_sort()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous entrez dans la salle, et trouvez une étrange table en plein milieu.")
                Affichage.EntreePourContinuer()
                print("Elle est faite dans un materiau proche de l'obsidienne, avec un élégant tapis rouge posé par dessus, quelques diamants encastrés dans ses coins, et un emplacement pour Zeroual au milieu.")
                Affichage.EntreePourContinuer()
                print("Vous avez l'impression que des symboles inconnus sortent de livres posés négligemment tout autour, et viennent disparaitre autour de la table.")
                Affichage.EntreePourContinuer()
                liste_sorts_affixables = []
                for sort in Player.sorts_possedes :
                    if sort in LISTESORTS or sort == "Missile Arcanique":
                        liste_sorts_affixables.append(sort)
                while True:
                    try:
                        print("Alors que vous posez Zeroual au centre de la table, des visions de vous entrain d'effectuer des sorts envahissent votre esprit.")
                        print("\n1 - Partir")
                        numero = 1
                        if Player.malediction == "Ordinaire":
                            print("*D'anciennes forces maudites interfèrent avec vos pensées. Vous ne pouvez pas enchanter.*")
                        else:
                            for sort in liste_sorts_affixables :
                                numero += 1
                                print(f"{numero} - Penser à {sort}")
                        choix = int(input("\nFaites votre choix avec les nombres : "))
                        ClearConsole()
                        if choix in range (1, (numero + 1)):
                            break
                    except ValueError:
                        ClearConsole()
                if choix == 1:
                    print("Vous retirez Zeroual et sortez de la salle.")
                    Affichage.EntreePourContinuer()
                else:
                    sort_choisie = liste_sorts_affixables[(choix - 2)]
                    liste_affix = ["~Rouge~", # +2 vie
                                   "~Carmin~", # +4 vie
                                   "~Violet~", # +2 mana
                                   "~Pourpre~", # +4 mana
                                   "~Jaune~", # +2 endurance
                                   "~Doré~", # +4 endurance
                                   "~Lolipop~", # +1 vie mana endurance
                                   "~Bubblegum~", # +3 vie mana endurance
                                   "~Escargot~", # +1% degat technique
                                   "~Limace~", # +1% degat sorts
                                   "~Citronnier~", # +0.5 degat critique technique
                                   "~Citron~", # +1 degat critique technique
                                   "~Cerisier~", # +0.5 degat critique sort
                                   "~Cerise~", # +1 degat critique sort
                                   "~Mars~", # +0.5% chance de bruler
                                   "~Neptune~", # +0.5% chance de geler
                                   "~Pluton~", # +0.25% chance de paralyser
                                   "~Lune~", # +0.5% chance de lapider
                                   "~Mercure~", # +0.5% chance de drain
                                   "~Ordre~", # peut bruler
                                   "~Aveugle~", # peut geler
                                   "~Limitation~", # peut lapider
                                   "~Transcendance~", # peut paralyser
                                   "~Eveil~", # peut drainer
                                   "~Antithèse~", # 15% chance d'arreter le gel
                                   "~Chaotique~", # 15% chance d'arreter la brulure
                                   "~Tache~", # 15% chance d'arreter la blessure
                                   "~Rature~", # 15% chance d'arreter la deconcentration
                                   "~Brouillon~", # 15% chance d'arreter la confusion
                                   "~Paragraphe~", # 6% chance d'enlever gel + brulure + blessure + deconcentration + confusion
                                   "~Magnum-Opus~", # 6% chance de donner numero_etage * 5 golds
                                   "~Agrume~", # 6% chance d'être béni
                                   "~Raisin~", # 6% chance d'être en folie
                                   "~Durian~", # 6% chance d'être en furie
                                   "~Gingembre~", # 6% chance d'être jindagee 2 tours
                                   "~Mandragore~", # 6% chance d'être aatma 2 tours
                                   "~Nigredo~", # 2% chance reprendre full vie
                                   "~Albédo~", # 2% chance reprendre full mana
                                   "~Citrinitas~", # 2% chance reprendre full endurance
                                   "~Chrysalide~", # 2% chance devenir invincible 2 tours
                                   ]
                    #enelever les effets elementaires en doublons
                    sort_choisi_transformee_en_liste = list(sort_choisie.split())
                    if "Faisceau" in sort_choisi_transformee_en_liste :
                        liste_affix.remove("~Limitation~")
                    elif "Thermosphère" in sort_choisi_transformee_en_liste :
                        liste_affix.remove("~Ordre~")
                    elif "Pic" in sort_choisi_transformee_en_liste :
                        liste_affix.remove("~Aveugle~")
                    elif "Création" in sort_choisi_transformee_en_liste :
                        liste_affix.remove("~Transcendance~")
                    elif "Dance" in sort_choisi_transformee_en_liste :
                        liste_affix.remove("~Eveil~")

                    nombre_aleatoire = random.randint(0, (len(liste_affix) - 1))
                    affix_choisi = liste_affix[nombre_aleatoire]

                    sort_choisie_a_afficher = sort_choisie
                    Player.sorts_possedes.remove(sort_choisie)
                    sort_choisie += f" {affix_choisi}"
                    Player.sorts_possedes.append(sort_choisie)
                    print("Vous approchez Zeroual du centre de la table, et celui ci se transforme en livre lévitant a quelques centimètres de celle ci.")
                    Affichage.EntreePourContinuer()
                    # fait que l'event soit finit et ne peut ps etre relancé
                    caracteristique_de_la_salle["terminé par joueur"] = True
                    Save.SaveTheGameSansAffichage()
                    print(f"Vous pensez alors au sort {sort_choisie_a_afficher}, et les symboles inconnus tout autours convergent vers une des pages de Zeroual.")
                    Affichage.EntreePourContinuer()
                    print(f"Votre sort gagne l'enchantement [{affix_choisi}] !")
                    Affichage.EntreePourContinuer()
                    print("Les symboles disparaissent, et Zeroual reprend sa forme de base.")
                    Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "DECHARGE":  # DONE
                if  Sove.ModifieTagsDansSove("Checke", "Village Jour"):
                    print("Vous vous approchez d'un monticule de déchets.")
                    Affichage.EntreePourContinuer()
                    CHANNELMUSIQUEDEBASE.set_volume(0.7)
                    PermanentPlaySFX("garbage_ambiance")
                    CHANNELSFX.set_volume(0.5)
                    print("L'odeur est putride, ce qui n'est pas peu dire au vu de votre manque de capacité olfactive en temps que fantome.")
                    Affichage.EntreePourContinuer()
                    print("Enfait, ce n'est pas vraiment l'odeur qui dérange, mais une énergie sinistre, putride, qui émane du tas de bric a brac et vous repousse de manière instinctive.")
                    Affichage.EntreePourContinuer()
                    while True:
                        while True:
                            liste_de_dechets = Player.PutMateriauxInList()
                            try:
                                if len(liste_de_dechets) == 0:
                                    print("Il n'y a rien d'utile ici.")
                                    print("\n1 - Partir")
                                else:
                                    print("Vous pouvez voir des materiaux utiles ressemblant a ce que vous aviez avant votre mort .")
                                    print("\n1 - Partir")
                                    print("2 - Recupérer vos materiaux")
                                choix = int(input("\nFaites votre choix avec les nombres : "))
                                ClearConsole()
                                if (choix in [1, 2] and len(liste_de_dechets) != 0) or (len(liste_de_dechets) == 0 and choix == 1):
                                    break
                            except ValueError:
                                ClearConsole()
                        if choix == 1:
                            print("Vous laissez le tas nauséabond derriere vous.")
                            Affichage.EntreePourContinuer()
                            break
                        else:
                            print("Vous fouillez dans la déchetterie, et récuperez : ")

                            for materiaux in Player.liste_de_materiaux:
                                if Player.liste_de_materiaux[materiaux] != 0:
                                    Sove.ModifieDechetsDansSove("Ajout", materiaux, Player.liste_de_materiaux[materiaux])
                                    print(f"{Player.liste_de_materiaux[materiaux]} {materiaux}")

                            Player.BringBackListeMateriauxToZero()

                            Save.SaveTheGameSansAffichage()

                            Affichage.EntreePourContinuer()

                            print("[SYSTEM OVERRIDE : SUCCESSFULL ACE EXECUTION]")
                            print("[JOUEUR RECONNU]")
                            print("[VOS MATERIAUX ONT ETE DEPLACE DANS VOTRE FICHIER DE SAUVEGARDE PERMANENT, ET SE CUMULERONT AU FIL DE VOS DESCENTE]")

                            Affichage.EntreePourContinuer()

                    CHANNELSFX.set_volume(0)
                    time.sleep(0.01)
                    CHANNELSFX.stop()
                    CHANNELMUSIQUEDEBASE.set_volume(1)

                else:
                    print("Vous laissez votre regard se perdre dans les montagnes de dechets qui remplissent l'horizon de leur teinte gris/sapin.")
                    Affichage.EntreePourContinuer()
                    print("De nombreuses âmes errent sans but dans les monticules.")
                    Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] in ['ARMURIER','SORCIERE','HERBORISTE'] :  # DONE
                # dessine la salle, si ce n'est pas fait
                if  Sove.ModifieTagsDansSove("Checke", "Village Jour"):
                    print("Vous vous approchez de l'étal du marchand.")
                    Affichage.EntreePourContinuer()
                    self.DoTransition("In", caracteristique_de_la_salle["type"])
                    Trader.DoVillageTrading(caracteristique_de_la_salle["type"])
                    print("Vous faites un signe de main et quittez l'étal.")
                    Affichage.EntreePourContinuer()
                    self.DoTransition("Out", caracteristique_de_la_salle["type"])
                else:
                    print("Les étals des marchands sont fermés.")
                    Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "MAGE" :  # DONE 
                # dessine la salle, si ce n'est pas fait 

                if  Sove.ModifieTagsDansSove("Checke", "Village Jour"):
                    print("Vous vous approchez d'une tour étrange, tordue, qui devrait s'écrouler mais ne le fait pas..")
                    CHANNELMUSIQUEDEBASE.set_volume(0.5)
                    PermanentPlaySFX("mage_ambiance")
                    Affichage.EntreePourContinuer()
                    Trader.DoKeyTrading()
                    print("Vous passez les portes de la tour, en veillant a ne pas taper votre tête sur le bas plafond.")
                    Affichage.EntreePourContinuer()
                    CHANNELSFX.set_volume(0)
                    time.sleep(0.01)
                    CHANNELSFX.stop()
                    CHANNELMUSIQUEDEBASE.set_volume(1)
                else:
                    print("Vous regardez avec dépit les restes d'une tour écroulée au sol.")
                    Affichage.EntreePourContinuer()
                    print("De nombreux cristaux gisent dans les débris.")
                    Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "BANQUIER" :  # DONE 
                # dessine la salle, si ce n'est pas fait 
                if  Sove.ModifieTagsDansSove("Checke", "Village Jour"):
                    print("Vous vous approchez d'une batisse droite, propre, et en passez les portes.")
                else:
                    print("Vous vous approchez d'une batisse droite, propre, et apercevez une pancarte accrochée a la poignée :")
                    print("*Ouvert 24h/24*")
                    Affichage.EntreePourContinuer()
                    print("Vous rentrez dans la banque.")
                Affichage.EntreePourContinuer()
                self.DoTransition("In", caracteristique_de_la_salle["type"])
                Trader.DoBankTrading()
                print("Vous repassez les portes de la banque.")
                Affichage.EntreePourContinuer()
                self.DoTransition("Out", caracteristique_de_la_salle["type"])
            elif caracteristique_de_la_salle["type"] == "HOLLISTIQUE" :  # DONE 
                # dessine la salle, si ce n'est pas fait 
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.bete()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous avancez dans les couloirs, et sursautez en entendant une voix derrière vous.")
                Affichage.EntreePourContinuer()
                print("*...hey..il y a quelqu'un ..?*")
                Affichage.EntreePourContinuer()
                print("Vous vous retournez, et trouvez une jeune femme en accoutrement léopard ridicule adossée contre le mur.")
                Affichage.EntreePourContinuer()
                print("*rigolez pas...je pensais que ca ferait fuir les monstres...*")
                Affichage.EntreePourContinuer()
                print("Vous aidez la jeune femme a se relever.")
                Affichage.EntreePourContinuer()
                print("*J'ai passé ma vie a faire des choses sans aucune raison, et bizarrement, c'était toujours la bonne idée. Mais la, je vois mal en quoi etre coincée dans un donjon mortel m'aiderait...*")
                Affichage.EntreePourContinuer()
                print("*Peut être pourriez vous m'aider a descendre ? Je peut lancer quelques sorts a chaque début de tour.*")
                Affichage.EntreePourContinuer()
                print("Vous commencez a réfléchir a la proposition, et un mal de dos venant de nulle part vous tord de douleur et vous fait baisser la tête.")
                Affichage.EntreePourContinuer()
                print("Le mal de dos disparait, et vous relevez la tête.")
                Affichage.EntreePourContinuer()
                print("*Oh merci ! Merci milles fois !*")
                Affichage.EntreePourContinuer()
                print("Vous avez l'impression que la mage a confondu votre mouvement pour un hochage de tête...M'enfin.")
                Affichage.EntreePourContinuer()
                print("Vous obtenez l'arte-, je veux dire, la Mage se bat avec vous !")
                Affichage.EntreePourContinuer()
                print("Elle enflamme ou gèle vos ennemis a chaque début de tour !")
                Affichage.EntreePourContinuer()
                print("Cepandant, si vos pv tombent en dessous de 10 pendant un combat, vous risquez de ne plus pouvoir la défendre d'un sort tragique.")
                Affichage.EntreePourContinuer()
                Player.liste_dartefacts_optionels.append("Mage")
                # fait que l'event soit finit et ne peut ps etre relancé
                caracteristique_de_la_salle["terminé par joueur"] = True
            elif caracteristique_de_la_salle["type"] == "CARTOGRAPHE" :  # DONE 
                
                if  Sove.ModifieTagsDansSove("Checke", "Village Jour"):
                    print("Vous avancez dans la rue et voyez un homme par terre, écrivant sur le sol diverses symboles mathématiques a l'aide d'une craie.")
                    Affichage.EntreePourContinuer()
                    CHANNELMUSIQUEDEBASE.set_volume(0.5)
                    PermanentPlaySFX("mapper_ambiance")
                    Trader.DoMapTrader()
                    print("Vous faites demi tour en veillant a ne pas marcher sur les symboles écrits a terre.")
                    Affichage.EntreePourContinuer()
                    CHANNELSFX.set_volume(0)
                    time.sleep(0.01)
                    CHANNELSFX.stop()
                    CHANNELMUSIQUEDEBASE.set_volume(1)
                else:
                    print("Vous trouvez une maison dont le sol devant est couvert d'inscriptions a la craie.")
                    Affichage.EntreePourContinuer()
                    print("Un nombre est entouré a de multiples reprises :")
                    Affichage.EntreePourContinuer()
                    print("*42*")
                    Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "ARENE" :  # DONE 

                
                print("Vous avancez vers une réplique plus petite d'un colisée, comme on peut en voir a Rome.")
                print("Alors que vous arrivez au niveau de l'entrée, un homme habillé en punk vous arrête.")
                Affichage.EntreePourContinuer()
                CHANNELMUSIQUEDEBASE.set_volume(0.7)
                PermanentPlaySFX("colysee_ambiance")
                Trader.DoColiseum()
                print("Vous laissez le coliseum derriere vous.")
                Affichage.EntreePourContinuer()
                CHANNELSFX.set_volume(0)
                time.sleep(0.01)
                CHANNELSFX.stop()
                CHANNELMUSIQUEDEBASE.set_volume(1)
            elif caracteristique_de_la_salle["type"] == "FABRICATEUR" :  # DONE 
                
                if  Sove.ModifieTagsDansSove("Checke", "Village Jour"):
                    CHANNELMUSIQUEDEBASE.set_volume(0.7)
                    PermanentPlaySFX("machine_ambiance")
                    print("Vous approchez d'une petite maison de bois, style outback, dans un coin de la décharge.")
                    print("A l'interieur, il y a une grosse machine avec une petite cabine nommée *INPUT*, une cabine *OUTPUT*, et un tube de cuivre qui relie les deux cabines au coeur de la machine.")
                    Affichage.EntreePourContinuer()
                    print("Il y a un panneau au milieu indiquant des catégories allant de Rugueux à Très Fin, en passant par Grossier, 2:1, et Fin.")
                    print("La poignée sélecteur est bloquée sur la catégorie *2:1*.")
                    Affichage.EntreePourContinuer()
                    Trader.DoFabricator()
                    print("Vous laissez la machine et sortez de la petite cabine.")
                    Affichage.EntreePourContinuer()
                    CHANNELSFX.set_volume(0)
                    time.sleep(0.01)
                    CHANNELSFX.stop()
                    CHANNELMUSIQUEDEBASE.set_volume(1)
                else:
                    print("Vous cherchez la petite maison au fond de la décharge, mais ne trouvez rien.")
                    Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "VILLAGE_QUARTIERS" :  # DONE 
                print("Vous trouvez une pancarte en pierre rose, a moitié enfoncé dans le sol, sur lequel est gravé un message en grandes lettres :")
                print("*VERS : QUARTIER RESIDENTIEL*")
                Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "CHEMIN_ARENE" :  # DONE 
                if  Sove.ModifieTagsDansSove("Checke", "Village Jour"):
                    liste_descriptions_possibles = [
                        "Vous entendez les sons et les cris venant du Colysée.",
                        "Vous passez à côté d'un groupe de 4 frères habillés en tenue de prisonnier jaune et noire.\nLeur taille est différente.",
                        "Vous prenez une grande inspiration.\nÇa sent la mandarine...",
                        "Vous regardez au loin : les champs remplis d'âmes errantes continuent à perte de vue.",
                        "Vous prenez une grande inspiration.\nUne odeur iodée remplit vos narines...",
                        "Vous passez à côté d'un homme roux dans un grand kimono noir.\nL'épée qu'il traîne derrière lui est gigantesque !",
                        "Vous regardez les bâtisses qui entourent le Colysée, au Nord.\nElles vendent toutes des pâtisseries.",
                        "Vous regardez les bâtisses qui entourent le Colysée, au Sud.\nElles vendent toutes des boissons.",
                        "Vous regardez les bâtisses qui entourent le Colysée, à l'Est.\nElles vendent toutes des chips.\nUn rapide coup d'œil vous indique que toutes les chips sont saveur poulet rôti et thym.",
                        "Vous regardez les bâtisses qui entourent le Colysée, à l'Ouest.\nElles vendent des costumes sur des thèmes variés.",
                        "Vous passez à côté d'un groupe habillé avec un kimono orange, et entendez un bout de leur conversation.\nQuelque chose à propos de boules de dragons ?",
                        "Le sol est pavé de pierres anciennes, usées par des siècles de passages.",
                        "Un homme joue de la flûte sur les marches du Colysée, attirant quelques curieux.",
                        "Des marchands ambulants crient leurs prix, tentant de vendre des souvenirs.",
                        "Des enfants courent autour d'une fontaine centrale, éclaboussant les passants avec leurs rires.",
                        "Un sculpteur sur bois est assis au bord d'une fontaine, entrainant sa lame sur des morceaux de différentes couleur.\nDevant lui, vous voyez une vingtaine de bols."
                        "Un artiste de rue fait des acrobaties près de la grande place, attirant l'attention de quelques âmes.",
                        "Vous remarquez un marchand vendant des bijoux faits à la main avec des pierres colorées.\nJoli, mais terriblement inutile",
                        "Un groupe de musiciens joue une mélodie entraînante, qui vous fait oublier pendant quelques instant ou vous êtes.",
                        "Vous regardez le soleil et sentez sa chaleur sur votre âme.\nVous êtes bel et bien mort, mais vous sentez plus vivant que jamais.",
                    ]
                else:
                    liste_descriptions_possibles = [
                        "Le Colysée est plongé dans l’obscurité, mais des murmures étranges s’échappent de ses entrailles.",
                        "Vous entendez au loin des rires étouffés provenant d’un bar, tandis qu’un serveur glisse un cocktail fluorescent sur une table.",
                        "Les fenêtres des maisons sont éclairées par des lueurs douces, projetant des ombres délicates sur les pavés.",
                        "Un vent frais vous effleure, emportant avec lui des chuchotements venus de ruelles désertes.",
                        "Une odeur de tabac et de menthe émane d’un groupe installé en terrasse, leur conversation basse se mêlant au silence nocturne.",
                        "Les fontaines sont éteintes, mais le bruit d’un léger filet d’eau persiste, amplifiant le calme environnant.",
                        "Les cris du Colysée sont étouffés par la nuit, presque mélodieux, comme un chant ancien qu’on ose à peine écouter.",
                        "Les pavés sous vos pieds semblent plus froids maintenant que la nuit s’est installée.",
                        "Une légère brume commence à se lever, enveloppant la place dans un voile mystique.",
                        "Les enseignes lumineuses des bars clignotent doucement, attirant les rares noctambules vers leurs portes.",
                        "Vous passez à côté d’une fenêtre ouverte et entendez un vieux vinyle grésiller une chanson d’un autre temps.",
                        "Les lanternes suspendues au-dessus de la place diffusent une lumière tamisée, créant des halos jaunes et oranges dans l’air.",
                        "Un chat noir traverse silencieusement la place, ses yeux brillant dans l’obscurité.",
                        "L’air est frais et légèrement humide, apportant avec lui une odeur de terre et de végétation nocturne.",
                        "Un homme seul joue quelques notes de guitare, sa musique flottant doucement dans le silence de la nuit.",
                        "Le Colysée, sous la lumière des étoiles, semble plus imposant, comme une silhouette vigilante observant la ville endormie.",
                        "Vous entendez le tintement discret de verres dans un bar, signe d’une soirée tranquille qui s’éternise.",
                        "Des bougies allumées sur les terrasses créent des jeux de lumière et d’ombre sur les visages des clients attablés.",
                        "Le ciel nocturne est d’un bleu profond, parsemé d’étoiles scintillantes qui semblent veiller sur la place.",
                        "Un léger brouillard se lève autour du Colysée, le rendant presque irréel, comme s’il flottait au-dessus de la place.",
                    ]

                description_a_afficher = random.choice(liste_descriptions_possibles)
                print(description_a_afficher)
                Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "CHEMIN_QUARTIERS" :  # DONE 
                if  Sove.ModifieTagsDansSove("Checke", "Village Jour"):
                    liste_descriptions_possibles = [
                        "Les maisons qui longent l’artère principale sont aussi diverses que des sculptures exposées en plein air.",
                        "Une maison à la forme d’un cube géant attire votre attention, son propriétaire, vêtu d'une tunique rouge, vante les mérites de son toit en forme de prisme.",
                        "Un homme ajuste une étrange girouette en forme de dragon sur le toit de sa maison circulaire, lui donnant un air fantastique.",
                        "Vous passez devant une maison haute et fine, presque tordue, ses fenêtres triangulaires brillent encore sous la lumière du crépuscule.",
                        "Les pavés sous vos pieds semblent légèrement irréguliers, ajoutant un charme ancien à cette rue moderne.",
                        "Un enfant court entre deux maisons, son rire résonne tandis qu'il disparaît derrière une porte en bois sculpté.",
                        "Les propriétaires d’une maison aux murs en mosaïque colorée sont assis sur le seuil, discutant avec des voisins curieux.",
                        "Une maison ressemblant à une tour penchée projette une ombre démesurée sur la rue.",
                        "Vous sentez l’odeur de pain chaud s’échapper de la fenêtre ouverte d’une maison à l’architecture massive, dont les murs semblent faits de blocs de pierre brute.",
                        "Un passant s’arrête pour observer une maison en forme de dôme, en discutant avec l'architecte qui semble donner des détails techniques aux curieux.",
                        "Les lanternes de la rue commencent à s’allumer, leur lumière orangée se reflétant sur les façades d’une maison aux motifs floraux.",
                        "Une maison construite entièrement en bois sombre attire l’œil, avec ses sculptures minutieuses d’animaux qui décorent la façade.",
                        "Une femme, vêtue de façon élégante, sort d’une maison aux allures de manoir gothique, le crépuscule accentue les contours sombres de l’édifice.",
                        "Les maisons, si différentes les unes des autres, semblent être en compétition pour attirer les regards des passants.",
                        "Vous passez devant une maison étrange, avec une porte minuscule et un toit démesurément grand, rappelant une maison de conte de fées.",
                        "L’air est chaud, et les bruits des conversations des habitants se mêlent aux craquements du bois des maisons anciennes.",
                        "Un vieil homme vous salue depuis son balcon, décoré de plantes grimpantes qui recouvrent presque toute la façade de sa maison en pierre.",
                        "Une maison de forme hexagonale dégage une atmosphère mystérieuse, ses fenêtres sont éclairées d’une lueur douce et bleutée.",
                        "Vous entendez des bruits de marteaux et d'outils : un artisan semble encore travailler dans son atelier, dont la porte est grande ouverte sur la rue.",
                        "Le ciel au-dessus de l’artère se teinte d’orange et de violet, illuminant les toits des maisons avec une lumière magique."
                    ]
                else:
                    liste_descriptions_possibles = [
                        "Le ciel étoilé s'étend au-dessus de l'artère principale, les lumières des maisons créant des halos doux dans la nuit.",
                        "Les maisons sont silencieuses, seules leurs fenêtres éclairées témoignent de la présence des habitants à l'intérieur.",
                        "Vous levez les yeux vers le ciel : des milliers d'étoiles brillent, offrant une sérénité que la journée ne connait pas.",
                        "Les lanternes de la rue projettent des ombres longues et apaisantes sur le sol pavé, comme si la ville elle-même dormait.",
                        "Le murmure lointain du vent dans les arbres et les toits donne l'impression que tout est en ordre, que tout est calme.",
                        "Vous sentez une brise légère sur votre visage, et un sentiment de confort s'installe, comme si vous rentriez chez vous après une longue journée.",
                        "Les fenêtres illuminées des maisons sont comme des phares, rappelant que même dans l'obscurité, il y a toujours de la chaleur et de la vie.",
                        "Le silence est presque total, seulement interrompu par le doux crépitement d'un feu qu'on devine derrière une fenêtre entrouverte.",
                        "Les étoiles semblent briller plus intensément ici, loin des bruits et des lumières de la ville, comme si elles veillaient sur la rue.",
                        "Un chat se faufile silencieusement dans la rue, ses yeux luisant sous la lumière d'une lampe, ajoutant une touche de mystère à la tranquillité ambiante.",
                        "Vous respirez profondément, l'air frais de la nuit est pur, presque revigorant, et vous donne cette sensation de paix qu'on ressent en rentrant chez soi après une belle journée.",
                        "Les maisons semblent veiller sur l'artère principale, comme des gardiens silencieux, tandis que la lumière intérieure filtre à travers les rideaux épais.",
                        "Vous entendez au loin le bruit discret d'une porte qui se ferme, signe que les derniers habitants sont rentrés chez eux pour la nuit.",
                        "Le ciel, parsemé d’étoiles, est clair et profond, apportant une sensation d'infini qui contraste avec le calme rassurant de la rue.",
                        "Les lumières des fenêtres sont chaleureuses, un doux rappel des maisons bien habitées où les familles s’apprêtent à se coucher.",
                        "La rue semble endormie, et vous ressentez une douce mélancolie, un mélange de bonheur tranquille et de nostalgie d'enfance.",
                        "Une odeur de bois brûlé flotte dans l’air, provenant sans doute d’une cheminée allumée quelque part, ajoutant à la douceur du moment.",
                        "Le monde semble loin, ici, où seul le bruit de vos pas sur les pavés résonne doucement dans la nuit.",
                        "Les étoiles, immobiles, semblent vous suivre du regard, comme si elles aussi veillaient à ce que la nuit reste paisible.",
                        "Vous sentez une chaleur intérieure grandir, comme quand, enfant, vous rentriez chez vous après une longue journée de jeux, sachant que tout est à sa place, que tout ira bien.",
                        "Vous manquez de trébucher sur quelqu'un.\nVous regardez alors a vos pieds et découvrez des miliers de personnes allongées sur le sol, admirant le ciel étoilé."
                    ]

                description_a_afficher = random.choice(liste_descriptions_possibles)
                print(description_a_afficher)
                Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "CHEMIN_COMMERCIAL" :  # DONE 
                if  Sove.ModifieTagsDansSove("Checke", "Village Jour"):
                    liste_descriptions_possibles = [
                        "Les étals débordent de marchandises exotiques, des épices aux couleurs vives côtoient des objets étranges dont l’utilité est un mystère.",
                        "Un groupe d’artistes de rue dessine des formes colorées sur le sol avec de la craie, tandis qu’un acrobate lance des jongles audacieuses à quelques mètres de là.",
                        "Vous entendez le son rythmé d’un tambour, un musicien joue au centre d’un cercle de passants qui tapent des mains.",
                        "Des vendeurs s’interpellent dans différentes langues, créant un mélange sonore aussi varié que les objets qu’ils vendent.",
                        "Vous passez devant un marchand vendant des brosses à dents en bois sculpté, en face d'un étal d’armes finement décorées.",
                        "Des bannières multicolores flottent au-dessus de la rue, ajoutant une touche festive à l’ambiance animée.",
                        "Un groupe de personnes marchant la tête en bas passe à côté de vous, se dirigeant vers un temple caché, un peu plus loin au Sud.",
                        "Des ballons flottent paresseusement dans le ciel, colorés et brillants sous la lumière éternelle du soleil au zénith.",
                        "Un riche marchand, vêtu de soieries chatoyantes, discute avec un artisan qui tient entre ses mains une épée finement gravée.",
                        "Les odeurs se mélangent : la friture d’un stand de nourriture côtoie le parfum doux d’encens brûlant devant une échoppe de talismans.",
                        "Des reliques du monde réel, des objets familiers mais étrangement déplacés, trônent dans des vitrines : une montre, un téléphone, une clé de voiture rouillée.",
                        "Un groupe de personnes, habillées en tenues d’époque, déambule lentement, attirant l’attention avec leurs capes ornées de bijoux.",
                        "Les rires des enfants jouant autour d’un vendeur de bonbons remplissent l’air, créant une ambiance joyeuse au milieu de l’agitation.",
                        "Un homme jongle avec des dagues étincelantes, ses mouvements rapides attirent une foule fascinée.",
                        "Des boissons aux couleurs fluorescentes sont servies dans des verres étranges, aux formes impossibles, par un vendeur en costume de magicien.",
                        "Un couple de riches nobles, vêtus de tenues extravagantes et dorées, passe entre les stands en observant les marchandises d’un œil critique.",
                        "Vous remarquez un marchand à la peau tatouée, ses bras recouverts de symboles étranges, qui vend des cartes aux mystères insondables.",
                        "Les gens circulent sans cesse, certains discutent bruyamment en négociant des prix, tandis que d’autres observent en silence les artistes de rue.",
                        "Un enfant poursuit un ballon rouge qui s’élève lentement dans le ciel, passant devant une échoppe qui vend des reliques étranges du passé.",
                        "Un cri retentit, et vous tournez la tête pour voir un groupe de danseurs acrobatiques exécuter des figures impressionnantes au milieu de la rue."
                    ]

                else:
                    liste_descriptions_possibles = [
                        "Les étals sont vides, leurs toiles tirées, et seules les torches et lampadaires éclairent doucement la rue déserte.",
                        "Un vent frais balaie la place, soulevant doucement des feuilles et quelques papiers abandonnés sur le sol pavé.",
                        "Vous passez à côté de la banque, la seule bâtisse encore éclairée dans la rue endormie, ses fenêtres brillantes dans la nuit silencieuse.",
                        "Deux marchands discutent à voix basse près d'un étal vide, une cigarette à la main, leurs visages éclairés par la lueur des lampadaires.",
                        "Un groupe de personnes s'arrête devant chaque bâtiment, leurs murmures de prière résonnent faiblement dans l'air nocturne.",
                        "Les rares sans-abris sont allongés sur des bancs en bois, enveloppés dans des couvertures, leurs silhouettes à peine visibles dans l'ombre.",
                        "Un artiste, seul, assis sur un petit tabouret, peint en silence le ciel étoilé, ses pinceaux glissant délicatement sur la toile.",
                        "Les lumières des boutiques fermées projettent des ombres longues et tranquilles, comme si la ville entière retenait son souffle.",
                        "Vous entendez le léger bruit de l’eau couler à la laverie du village, où quelques hommes et femmes frottent leurs vêtements sur des planches de bois.",
                        "Le claquement des planches de la laverie résonne doucement, accompagné par les murmures des quelques personnes qui travaillent encore si tard.",
                        "Un lampadaire grésille faiblement avant de s’éteindre, ajoutant à la sensation d’une ville qui s’éteint lentement avec la nuit.",
                        "L'air est frais, et une légère brume commence à s'élever au niveau des pavés, baignant la rue dans une lueur mystique.",
                        "Les vitrines des boutiques sont obscures, mais des reflets de lumière dansent encore sur les fenêtres, créant des jeux d’ombre et de lumière.",
                        "Un sans-abri tourne lentement sur un banc, cherchant un peu plus de confort sous sa couverture usée, tandis que les torches vacillent dans la nuit.",
                        "Les portes des boutiques sont fermées et silencieuses, mais vous pouvez encore sentir l’écho de l’agitation du jour flotter dans l’air.",
                        "Le ciel étoilé est clair, sans nuages, et semble veiller sur le quartier endormi comme un manteau protecteur.",
                        "Les rares passants marchent tranquillement, le bruit de leurs pas résonnant faiblement dans la rue vide.",
                        "Une enseigne de néon clignote encore faiblement, attirant l’attention dans la pénombre, seule source de mouvement dans cette rue figée.",
                        "Vous entendez des rires étouffés en provenance d’un coin sombre, où deux marchands finissent leur conversation nocturne avant de rentrer.",
                        "Le vent fait bruisser doucement les bannières abandonnées, leur présence fantomatique rappelant l’effervescence qui animait la rue plus tôt dans la journée."
                    ]

                description_a_afficher = random.choice(liste_descriptions_possibles)
                print(description_a_afficher)
                Affichage.EntreePourContinuer()
            elif (caracteristique_de_la_salle["type"] == "CHEMIN_CHAMPS") or (caracteristique_de_la_salle["type"] == "ANCIEN" and  Sove.ModifieTagsDansSove("Checke", "Village Jour")): # DONE 
                if  Sove.ModifieTagsDansSove("Checke", "Village Jour"):
                    liste_descriptions_possibles = [
                        "Les personnes autour de vous sont immobiles ou marchent sans but, leurs yeux vides, comme si elles attendaient une fin qui ne viendra jamais.",
                        "Vous croisez un homme assis par terre, la tête baissée, ses mains recouvertes de poussière, son regard complètement vide.",
                        "Un silence lourd règne ici, entrecoupé seulement par le bruit de pas traînants et le léger sifflement du vent sur la terre battue.",
                        "À l'ouest, la gigantesque déchetterie s'étend à perte de vue, une abomination où des objets tombent du ciel dans une pluie lente et macabre.",
                        "Des êtres sans âge fouillent les déchets avec des gestes mécaniques, comme s’ils cherchaient quelque chose qu’ils ne trouveront jamais.",
                        "L'odeur des déchets flotte dans l'air, âcre et étouffante, comme si elle voulait s'infiltrer dans votre âme elle-même.",
                        "Un homme passe à côté de vous, son corps courbé par le temps, mais son visage est figé dans une expression de vide absolu.",
                        "Les objets qui tombent du ciel se mêlent aux déchets, certains encore brillants, d'autres déformés et grotesques, dégageant une aura profondément dérangeante.",
                        "Les immenses tas de détritus semblent vous observer, leur présence insupportable comme une entité vivante et malveillante.",
                        "Vous ressentez une répulsion instinctive à l’approche de la déchetterie, comme si quelque chose de profondément mauvais s’y trouvait, quelque chose d'invisible mais palpable.",
                        "Les personnes dans le champ, allongées ou debout, ne semblent plus être là, physiquement présentes mais déjà disparues dans leur esprit.",
                        "Un bruit sourd retentit à l'ouest, un autre objet vient de tomber du ciel dans les déchets, créant un écho sinistre dans cet espace déjà pesant.",
                        "Les déchets, tordus et grotesques, semblent dégager une énergie sombre qui vous fait frissonner, comme si une partie de vous voulait fuir cet endroit.",
                        "Certains des gens autour de vous fouillent dans les détritus sans aucune expression, comme des marionnettes manipulées par un désir inconscient.",
                        "Vous regardez au loin, et le champ semble s'étendre à l'infini, avec ces silhouettes humaines figées dans une attente qui semble éternelle.",
                        "Le ciel au-dessus de la déchetterie semble plus sombre, presque menaçant, comme si l'endroit lui-même corrompait la lumière qui passe à travers.",
                        "Les visages des personnes que vous croisez n'ont plus d'émotion, juste une lassitude profonde, comme s'ils avaient perdu toute volonté de vivre.",
                        "L'aura des déchets est presque palpable, une présence insidieuse qui semble s'accrocher à votre esprit, vous poussant à détourner le regard.",
                        "À chaque fois que vous regardez vers la déchetterie, vous avez l’impression qu’elle vous attire, comme un gouffre sans fond prêt à vous engloutir.",
                        "Les gens autour de vous errent comme des ombres, leurs corps présents mais leurs esprits déjà ailleurs, dans une sorte de non-existence dénuée de toute lumière."
                    ]

                else:
                    liste_descriptions_possibles = [
                        "La nuit a enveloppé le champ, mais les silhouettes des gens immobiles sont toujours visibles, leurs yeux vides brillants dans la faible lueur des étoiles.",
                        "Le silence est encore plus lourd la nuit, seulement brisé par des bruits lointains de pas et des murmures indistincts, comme des échos d'un autre monde.",
                        "Dans l’obscurité, les silhouettes allongées sur la terre battue semblent être des ombres plus que des êtres vivants, figées dans leur attente sans fin.",
                        "La déchetterie à l’ouest est encore plus effrayante la nuit, ses monticules d'ordures se dressant comme des monstres immobiles sous le ciel étoilé.",
                        "Des objets continuent de tomber du ciel dans la déchetterie, mais la nuit rend leur chute presque fantomatique, comme s’ils se matérialisaient depuis l’obscurité elle-même.",
                        "Les gens errants dans la nuit semblent plus proches d’esprits que d’humains, leurs mouvements lents et dénués de vie, comme des spectres prisonniers du temps.",
                        "Un faible vent souffle, soulevant des volutes de poussière dans l'air nocturne, et vous donne l’impression que même l’air ici est vieux et fatigué.",
                        "La lumière de la lune éclaire faiblement les déchets, révélant des formes tordues et monstrueuses qui dégagent toujours cette aura malveillante et repoussante.",
                        "Les rares bruits venant de la déchetterie sont amplifiés par le silence de la nuit, des craquements étranges et des chutes qui résonnent comme des chuchotements sinistres.",
                        "Les personnes dans le champ, immobiles ou errantes, sont enveloppées d'une ombre profonde, comme si elles faisaient partie intégrante de la nuit elle-même.",
                        "L'obscurité semble rendre les déchets encore plus hostiles, chaque monticule prenant la forme de quelque chose de vivant, quelque chose de corrompu.",
                        "Vous avez l'impression que l’air est plus lourd près de la déchetterie, comme si une présence invisible et oppressante se répandait depuis les tas d’ordures.",
                        "Le ciel étoilé au-dessus du champ est vaste, mais les étoiles semblent lointaines et froides, indifférentes aux âmes perdues qui hantent ce lieu.",
                        "Les ombres des gens errant près de la déchetterie se fondent presque avec les montagnes de détritus, créant des silhouettes indistinctes et inquiétantes dans la nuit.",
                        "Le champ semble sans fin dans la nuit, chaque pas vous rapprochant d’un vide encore plus profond, où ni lumière ni vie ne subsistent.",
                        "Un murmure sourd traverse le champ, un son que vous ne pouvez ni localiser ni comprendre, comme si les âmes errantes parlaient dans un langage oublié.",
                        "Les objets qui tombent du ciel dans la nuit semblent plus menaçants, comme s’ils s’écrasaient dans la déchetterie avec une intention malveillante.",
                        "La faible lumière de la lune fait briller certaines parties des ordures dans la déchetterie, créant des reflets malsains et déformés, presque vivants.",
                        "Les yeux des gens que vous croisez dans la nuit sont vides, mais leur vide semble absorber la lumière, comme des puits sans fond dans lesquels toute clarté disparaît.",
                        "Vous avez l’impression que même le temps ralentit ici la nuit, chaque seconde s'étirant à l’infini, laissant une trace de désespoir silencieux dans l’air froid.",
                        "..?\nVous voyez un homme a l'extreme Nord-Ouest, sur un talus de déchet... "
                    ]

                description_a_afficher = random.choice(liste_descriptions_possibles)
                print(description_a_afficher)
                Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "VILLAGE_CHAMPS" :  # DONE 
                print("Vous trouvez un simple panneau de bois, a moitié enfoncé dans le sol, sur lequel est peint un message en grandes lettres :")
                print("*VERS : CHAMPS ET DECHETTERIE*")
                Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "VILLAGE_ARENE" :  # DONE 
                print("Vous trouvez deux colonnades de marbres enserrant le chemin.")
                print("Accroché en hauteur, il y a une pancarte sur laquelle est peint un paysage dans lequel trone un Colysée.")
                Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "VILLAGE_COMMERCIAL" :  # DONE 
                print("Vous trouvez un panneau de métal, a moitié enfoncé dans le sol, sur lequel sont soudés plusieurs symboles.")
                print("On peut voir un marteau, une fiole, un dollars, une petite boite noire, et une feuille, entourant les mots *VERS : QUARTIER COMMERCIAL*.")
                Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "ANCIEN": #DONE

                print("Vous trouvez un vieil homme habillé en plaid et beret traditionnel assis sur un tas de déchet, regardant la lune.")
                print("Après quelques efforts, vous arrivez en haut du monticule, et vous asseyez a coté de lui.")
                Affichage.EntreePourContinuer()
                Trader.DoAncien()
                print("Vous admirez la lune encore quelques instants, avant de dévaller la pente du tad de dechet sur les fesses, et de repartir.")
                Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "HOTEL" :  # DONE 

                print("Vous vous approchez d'une batisse de bois type Western, avec des portes a double battant.")
                print("A l'interieur, certaines figures fantomatiques boivent des liquides divers et variés alors que d'autre montent a l'étage pour y passer la nuit.")
                Affichage.EntreePourContinuer()
                CHANNELMUSIQUEDEBASE.set_volume(0.5)
                PermanentPlaySFX("noise")
                Trader.DoHotel()
                CHANNELSFX.set_volume(0)
                time.sleep(0.01)
                CHANNELSFX.stop()
                CHANNELMUSIQUEDEBASE.set_volume(1)
                print("Vous repassez dramatiquement les portes battantes du saloon. C'est a dire, en donnant un grand coup de pied dedans.")
                Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "ANCIENNE" :  # DONE 

                print("Vous vous approchez d'une vieille batisse en ruine, style colonnades romaines...")
                if  Sove.ModifieTagsDansSove("Checke", "Village Jour"):
                    print("...mais il n'y a personne.")
                    Affichage.EntreePourContinuer()
                else:
                    print("...et distinguez une forme dans la pénombre d'une des colonnes.")
                    Affichage.EntreePourContinuer()
                    Trader.DoChamane()
                print("...vous laissez le temple en ruine derrière vous.")
                Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "JARDIN" :  # DONE 
                
                if  Sove.ModifieTagsDansSove("Checke", "Village Jour"):
                    CHANNELMUSIQUEDEBASE.set_volume(0.5)
                    PermanentPlaySFX("garden_ambiance")
                    Affichage.ParlerAvecLeDirecteur()
                    CHANNELSFX.set_volume(0)
                    time.sleep(0.01)
                    CHANNELSFX.stop()
                    CHANNELMUSIQUEDEBASE.set_volume(1)
                else:
                    print("Le portail du jardin de la grande demeure est fermé.")
                    Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "MAITRE_ARTEFACT" :  # DONE
                # dessine la salle, si ce n'est pas fait

                if  Sove.ModifieTagsDansSove("Checke", "Village Jour"):
                    print("Vous regardez à l'interieur de l'échoppe, et un vieil homme vous fait signe.")
                    Affichage.EntreePourContinuer()
                    self.DoTransition("In", caracteristique_de_la_salle["type"])
                    Trader.DoArtefactTrading()
                    print("Vous saluez respectueusement le Maitre, et sortez de l'échoppe.")
                    Affichage.EntreePourContinuer()
                    self.DoTransition("Out", caracteristique_de_la_salle["type"])
                else:
                    print("Vous tentez d'ouvrir la porte de l'échoppe, mais elle résiste a tout vos efforts.")
                    Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "WORKSHOP":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.workshop()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous vous préparez a entrer dans la salle, et sentez une chaleur immense alors que votre arme vibre d'excitation.")
                Affichage.EntreePourContinuer()
                print("A l'interieur, vous voyez des cascades de lave en fusion s'écoulant des deux côtés d'une impressionante collection d'outils en tout genre, posé sur une grosse enclume.")
                Affichage.EntreePourContinuer()
                print("Alors que vous touchez les outils recouverts de poussière, des visions s'emparent de votre esprit.")
                print("Le bruit des marteaux sur l'enclume, la sensation de la sueur sur la peau, et plusieurs dizaines de personnes travaillant sur une petite boule blanche.")
                Affichage.EntreePourContinuer()
                print("Vous reconnaissez ici le berceau et lieu de fabrication de Zeroual, votre arme !")
                Affichage.EntreePourContinuer()
                while True:
                    while True:
                        try:
                            print("Les visions vous donnent les capacités et connaissances nécessaires a la modification de votre arme.")
                            print(f"\n            - Zeroual : {Player.nombre_de_monstres_tues} âmes -")
                            print("\n1 - Changer l'ordre des techniques")
                            print("2 - Changer l'ordre des sorts")
                            print("\n            - Techniques -")
                            print("3 - Enchanter une technique avec un mot de puissance aléatoire [15 âmes]")
                            print("4 - Enchanter une technique avec un mot de puissance élémentaire [15 âmes + 5 cristaux élémentaires]")
                            print("5 - Elever une technique au niveau superieur [25 âmes]")
                            print("\n            - Sorts -")
                            print("6 - Enchanter un sort avec un mot de puissance aléatoire [15 âmes]")
                            print("7 - Enchanter un sort avec un mot de puissance élémentaire [15 âmes + 5 cristaux élémentaires]")
                            print("8 - Elever un sort au niveau superieur [25 âmes]")
                            print("\n            - Autre -")
                            print("9 - Partir")
                            choix = int(input("\nFaites votre choix avec les nombres : "))
                            ClearConsole()
                            if choix in range(1, 10):
                                break
                        except ValueError:
                            ClearConsole()
                    if choix == 1 and len(Player.techniques_possedes) > 0:
                        #liste_de_ techniques nouvellement ordonné, temporaire
                        liste_technique_nouvel_ordre = []
                        #liste de techniques disponibles
                        liste_technique_disponibles = list(Player.techniques_possedes)
                        while True:
                            while True:
                                try:
                                    print(f"Nouvel Ordre des techniques : {liste_technique_nouvel_ordre}\n")
                                    numero = 1
                                    for action in liste_technique_disponibles:
                                        print(f"{numero} - {action}")
                                        numero += 1
                                    choix = int(input("\nChoisissez avec les nombres la prochaine technique de votre nouvelle liste : "))
                                    ClearConsole()
                                    if choix in range(1, len(liste_technique_disponibles) + 1):
                                        break
                                except ValueError:
                                    ClearConsole()
                            technique_choisie = liste_technique_disponibles[choix - 1]
                            liste_technique_disponibles.remove(technique_choisie)
                            liste_technique_nouvel_ordre.append(technique_choisie)
                            if len(liste_technique_disponibles) == 0 :
                                print("Vous posez Zeroual sur l'enclume et frappez dessus avec une masse rectangulaire à des points bien spécifiques.")
                                print("L'ordre avec lequel les techniques sont présentées a changé !")
                                Affichage.EntreePourContinuer()
                                Player.techniques_possedes = list(liste_technique_nouvel_ordre)
                                break
                    elif choix == 2 and len(Player.sorts_possedes) > 0:
                        #liste_de_ techniques nouvellement ordonné, temporaire
                        liste_sort_nouvel_ordre = []
                        #liste de techniques disponibles
                        liste_sort_disponibles = list(Player.sorts_possedes)
                        while True:
                            while True:
                                try:
                                    print(f"Nouvel Ordre des sorts : {liste_sort_nouvel_ordre}\n")
                                    numero = 1
                                    for action in liste_sort_disponibles:
                                        print(f"{numero} - {action}")
                                        numero += 1
                                    choix = int(input("\nChoisissez avec les nombres le prochain sort de votre nouvelle liste : "))
                                    ClearConsole()
                                    if choix in range(1, len(liste_sort_disponibles) + 1):
                                        break
                                except ValueError:
                                    ClearConsole()
                            sort_choisie = liste_sort_disponibles[choix - 1]
                            liste_sort_disponibles.remove(sort_choisie)
                            liste_sort_nouvel_ordre.append(sort_choisie)
                            if len(liste_sort_disponibles) == 0 :
                                print("Vous posez Zeroual sur l'enclume et frappez dessus avec un étrange marteau à des points bien spécifiques.")
                                print("L'ordre avec lequel les sorts sont présentés a changé !")
                                Affichage.EntreePourContinuer()
                                Player.sorts_possedes = list(liste_sort_nouvel_ordre)
                                break  
                    elif choix == 3 and Player.nombre_de_monstres_tues >= 15 and len(Player.techniques_possedes) > 0:
                        print("Vous prenez Zeroual avec des pinces et le plongez dans la rivière de lave.")
                        Affichage.EntreePourContinuer()
                        liste_techniques_affixables = []
                        for technique in Player.techniques_possedes:
                            if technique in LISTETECHNIQUES or technique == "Attaque Lourde":
                                liste_techniques_affixables.append(technique)
                        while True:
                            while True:
                                try:
                                    print("Puis, vous pensez a une technique.")
                                    print("\n1 - Arreter")
                                    numero = 1
                                    if Player.malediction == "Ordinaire":
                                        print("*D'anciennes forces maudites interfèrent avec vos pensées. Vous ne pouvez pas enchanter.*")
                                    else:
                                        for tut in liste_techniques_affixables :
                                            numero += 1
                                            print(f"{numero} - Penser à {tut}")
                                    choix = int(input("\nFaites votre choix avec les nombres : "))
                                    ClearConsole()
                                    if choix in range (1, (numero + 1)):
                                        break
                                except ValueError:
                                    ClearConsole()
                            if choix == 1:
                                print("Vous retirez Zeroual de la lave.")
                                Affichage.EntreePourContinuer()
                                break
                            else:
                                technique_choisie = liste_techniques_affixables[(choix - 2)]
                                liste_affix = ["~Rouge~", # +2 vie
                                            "~Carmin~", # +4 vie
                                            "~Violet~", # +2 mana
                                            "~Pourpre~", # +4 mana
                                            "~Jaune~", # +2 endurance
                                            "~Doré~", # +4 endurance
                                            "~Lolipop~", # +1 vie mana endurance
                                            "~Bubblegum~", # +2 vie mana endurance
                                            "~Escargot~", # +1% degat technique
                                            "~Limace~", # +1% degat sorts
                                            "~Citronnier~", # +0.5 degat critique technique
                                            "~Citron~", # +1 degat critique technique
                                            "~Cerisier~", # +0.5 degat critique sort
                                            "~Cerise~", # +1 degat critique sort
                                            "~Mars~", # +0.5% chance de bruler
                                            "~Neptune~", # +0.5% chance de geler
                                            "~Pluton~", # +0.25% chance de paralyser
                                            "~Lune~", # +0.5% chance de lapider
                                            "~Mercure~", # +0.5% chance de drain
                                            "~Ordre~", # peut bruler
                                            "~Aveugle~", # peut geler
                                            "~Limitation~", # peut lapider
                                            "~Transcendance~", # peut paralyser
                                            "~Eveil~", # peut drainer
                                            "~Antithèse~", # 15% chance d'arreter le gel
                                            "~Chaotique~", # 15% chance d'arreter la brulure
                                            "~Tache~", # 15% chance d'arreter la blessure
                                            "~Rature~", # 15% chance d'arreter la deconcentration
                                            "~Brouillon~", # 15% chance d'arreter la confusion
                                            "~Paragraphe~", # 6% chance d'enlever gel + brulure + blessure + deconcentration + confusion
                                            "~Magnum-Opus~", # 6% chance de donner numero_etage * 5 golds
                                            "~Agrume~", # 6% chance d'être béni
                                            "~Raisin~", # 6% chance d'être en folie
                                            "~Durian~", # 6% chance d'être en furie
                                            "~Gingembre~", # 6% chance d'être jindagee 2 tours
                                            "~Mandragore~", # 6% chance d'être aatma 2 tours
                                            "~Nigredo~", # 2% chance reprendre full vie
                                            "~Albédo~", # 2% chance reprendre full mana
                                            "~Citrinitas~", # 2% chance reprendre full endurance
                                            "~Chrysalide~", # 2% chance devenir invincible 2 tours
                                            ]
                                #enelever les effets elementaires en doublons
                                technique_choisie_transformee_en_liste = list(technique_choisie.split())
                                if "Lance" in technique_choisie_transformee_en_liste :
                                    liste_affix.remove("~Limitation~")
                                elif "Bô" in technique_choisie_transformee_en_liste :
                                    liste_affix.remove("~Ordre~")
                                elif "Katana" in technique_choisie_transformee_en_liste :
                                    liste_affix.remove("~Aveugle~")
                                elif "Corne" in technique_choisie_transformee_en_liste :
                                    liste_affix.remove("~Transcendance~")
                                elif "Dague" in technique_choisie_transformee_en_liste :
                                    liste_affix.remove("~Eveil~")

                                nombre_aleatoire = random.randint(0, (len(liste_affix) - 1))
                                affix_choisi = liste_affix[nombre_aleatoire]

                                technique_choisie_a_afficher = technique_choisie
                                Player.techniques_possedes.remove(technique_choisie)
                                technique_choisie += f" {affix_choisi}"
                                Player.techniques_possedes.append(technique_choisie)
                                Player.nombre_de_monstres_tues -= 15
                                print("Vous sentez Zeroual vibrer, et le sortez de son bain de roche en fusion.")
                                print("Ensuite, vous le posez délicatement a terre, et le transpercez d'un coup sec avec une lame rouillée gravée de nombreuses inscriptions.")
                                Save.SaveTheGameSansAffichage()
                                Affichage.EntreePourContinuer()
                                print(f"Les inscriptions s'illuminent, puis descendent vers l'orbe.")
                                Affichage.EntreePourContinuer()
                                print(f"La technique {technique_choisie_a_afficher} gagne l'enchantement [{affix_choisi}] !")
                                Affichage.EntreePourContinuer()
                                print("Les inscriptions retournent dans la lame, et vous la retirez de l'orbe blanc.")
                                Affichage.EntreePourContinuer()
                                break
                    elif choix == 4 and Player.nombre_de_monstres_tues >= 15 and Player.items_possedes["Crystal Elémentaire"] >= 5 and len(Player.techniques_possedes) > 0:
                        print("Vous rapprochez vos crystaux élémentaires, prenez Zeroual avec des pinces, et le plongez dans la rivière de lave.")
                        Affichage.EntreePourContinuer()
                        liste_techniques_affixables = []
                        for technique in Player.techniques_possedes:
                            if technique in LISTETECHNIQUES or technique == "Attaque Lourde":
                                liste_techniques_affixables.append(technique)
                        while True:
                            while True:
                                try:
                                    print("Puis, vous pensez a une technique.")
                                    print("\n1 - Arreter")
                                    numero = 1
                                    for technique in liste_techniques_affixables :
                                        numero += 1
                                        print(f"{numero} - Penser à {technique}")
                                    choix = int(input("\nFaites votre choix avec les nombres : "))
                                    ClearConsole()
                                    if choix in range (1, (numero + 1)):
                                        break
                                except ValueError:
                                    ClearConsole()
                            if choix == 1:
                                print("Vous retirez Zeroual de la lave.")
                                Affichage.EntreePourContinuer()
                                break
                            else:
                                technique_choisie = liste_techniques_affixables[(choix - 2)]
                                liste_affix = [
                                            "~Ordre~", # peut bruler
                                            "~Aveugle~", # peut geler
                                            "~Limitation~", # peut lapider
                                            "~Transcendance~", # peut paralyser
                                            "~Eveil~", # peut drainer
                                            ]
                                #enelever les effets elementaires en doublons
                                technique_choisie_transformee_en_liste = list(technique_choisie.split())
                                if "Lance" in technique_choisie_transformee_en_liste :
                                    liste_affix.remove("~Limitation~")
                                elif "Bô" in technique_choisie_transformee_en_liste :
                                    liste_affix.remove("~Ordre~")
                                elif "Katana" in technique_choisie_transformee_en_liste :
                                    liste_affix.remove("~Aveugle~")
                                elif "Corne" in technique_choisie_transformee_en_liste :
                                    liste_affix.remove("~Transcendance~")
                                elif "Dague" in technique_choisie_transformee_en_liste :
                                    liste_affix.remove("~Eveil~")

                                nombre_aleatoire = random.randint(0, (len(liste_affix) - 1))
                                affix_choisi = liste_affix[nombre_aleatoire]

                                technique_choisie_a_afficher = technique_choisie
                                Player.techniques_possedes.remove(technique_choisie)
                                technique_choisie += f" {affix_choisi}"
                                Player.techniques_possedes.append(technique_choisie)
                                Player.nombre_de_monstres_tues -= 15
                                Player.items_possedes["Crystal Elémentaire"] -= 5
                                print("Vous sentez Zeroual vibrer, mais le laissez dans son bain de roche en fusion.")
                                print("Vous en profitez pour réduire les crystaux en une poudre fine que vous mouillez avec un liquide nacré avant d'appliquer sur une lame rouillée gravée de nombreuses inscriptions.")
                                Save.SaveTheGameSansAffichage()
                                print("Vous entendez votre arme vibrer de plus en plus, et la sortez de la lave avant de la transpercer avec la lame rouillée.")
                                Save.SaveTheGameSansAffichage()
                                Affichage.EntreePourContinuer()
                                print(f"Les inscriptions s'illuminent, puis passent a travers la pate élémentaire en descendant vers l'orbe.")
                                Affichage.EntreePourContinuer()
                                print(f"La technique {technique_choisie_a_afficher} gagne l'enchantement [{affix_choisi}] !")
                                Affichage.EntreePourContinuer()
                                print("Les inscriptions retournent dans la lame, et vous la retirez de l'orbe blanc.")
                                print("La pate élémentaire se durcit, et vous passez quelques minutes a l'enlever de la lame.")
                                Affichage.EntreePourContinuer()
                                break
                    elif choix == 5 and Player.nombre_de_monstres_tues >= 25 and len(Player.techniques_possedes) > 0:
                        print("Vous ouvrez une boite noire chaude au toucher, et y rentrez Zeroual.")
                        Affichage.EntreePourContinuer()
                        #faire liste action evoluable
                        liste_action_qui_peut_evoluer = [
                            "Attaque Légère",
                            "Lance Rapide",
                            "Lance Statique",
                            "Lance Electrique",
                            "Lance de l'Eclair",
                            "Lance Foudroyante",
                            "Bô Chaud",  #
                            "Bô Brulant",  #
                            "Bô Enflammé",  #
                            "Bô de la Fournaise",
                            "Bô Magmatique",
                            "Katana Bleu",
                            "Katana Froid",
                            "Katana Givré",
                            "Katana Glacial",
                            "Katana Polaire",
                            "Corne Argile",  #
                            "Corne Lapis",  #
                            "Corne Granite",  #
                            "Corne Obsidienne",
                            "Corne de la Montagne",
                            "Poing Léger",  #
                            "Poing Renforcé",  #
                            "Poing Lourd",  #
                            "Poing Maitrisé",  #
                            "Poing Fatal",  #
                            "Dague Volevie",
                            "Dague Siphoneuse",
                            "Dague Vampirique",
                            "Dague Parasite",
                            "Dague Destructrice"]
                        liste_action_en_possession = []
                        for action in Player.techniques_possedes:
                            if action in liste_action_qui_peut_evoluer:
                                liste_action_en_possession.append(action)

                        while True:
                            try:
                                print("Vous refermez la boite et pensez a une technique.")
                                print("\n1 - Arrêter")
                                numero = 2
                                for action in liste_action_en_possession:
                                    print(f"{numero} - {action}")
                                    numero += 1
                                choix = int(input("\nFaites votre choix avec les nombres : "))
                                ClearConsole()
                                if choix in range (1, (numero)):
                                    break
                            except ValueError:
                                ClearConsole()
                        if choix == 1:
                            print("Vous sortez Zeroual de la boite.")
                            Affichage.EntreePourContinuer()
                        else:
                            nom_action_a_evoluer = liste_action_en_possession[choix - 2]
                            Player.nombre_de_monstres_tues -= 25

                            #trouver son evolution
                            if nom_action_a_evoluer == "Attaque Légère":
                                nom_nouvelle_action = "Attaque Lourde"
                                description = "La technique"
                                Player.techniques_possedes.remove(nom_action_a_evoluer)
                                Player.techniques_possedes.append(nom_nouvelle_action)
                            elif nom_action_a_evoluer in LISTETECHNIQUES:
                                position_de_laction = LISTETECHNIQUES.index(nom_action_a_evoluer)
                                nom_nouvelle_action = LISTETECHNIQUES[position_de_laction + 1]
                                description = "La technique"
                                Player.techniques_possedes.remove(nom_action_a_evoluer)
                                Player.techniques_possedes.append(nom_nouvelle_action)

                            print("La boite s'active alors, et un constant bourdonnement s'en échappe.")
                            print("Vous pouvez soudainement voir a travers une des face teintée de la boite, et trouvez votre arme entrain de tourner sur elle même, éclairé par une lumière jaune.")
                            print("Un nombre incalculable de minuscules éclairs percant sa surface. ")
                            Affichage.EntreePourContinuer()
                            print("La boite fait alors 4 bips stridents, et tout s'arrête.")
                            Affichage.EntreePourContinuer()
                            print(f"La technique [{nom_action_a_evoluer}] devient [{nom_nouvelle_action}] !")
                            Affichage.EntreePourContinuer()
                            print("Vous récuperez Zeroual.")
                            print("Il est chaud au toucher !")
                            Affichage.EntreePourContinuer()
                    elif choix == 6 and Player.nombre_de_monstres_tues >= 15 and len(Player.sorts_possedes) > 0:
                        print("Vous prenez Zeroual avec des pinces et le plongez dans la rivière de lave.")
                        Affichage.EntreePourContinuer()
                        liste_sorts_affixables = []
                        for sort in Player.sorts_possedes:
                            if sort in LISTESORTS or sort == "Missile Arcanique":
                                liste_sorts_affixables.append(sort)
                        while True:
                            while True:
                                try:
                                    print("Puis, vous pensez a un sort.")
                                    print("\n1 - Arreter")
                                    numero = 1
                                    if Player.malediction == "Ordinaire":
                                        print("*D'anciennes forces maudites interfèrent avec vos pensées. Vous ne pouvez pas enchanter.*")
                                    else:
                                        for sort in liste_sorts_affixables :
                                            numero += 1
                                            print(f"{numero} - Penser à {sort}")
                                    choix = int(input("\nFaites votre choix avec les nombres : "))
                                    ClearConsole()
                                    if choix in range (1, (numero + 1)):
                                        break
                                except ValueError:
                                    ClearConsole()
                            if choix == 1:
                                print("Vous retirez Zeroual de la lave.")
                                Affichage.EntreePourContinuer()
                                break
                            else:
                                sort_choisie = liste_sorts_affixables[(choix - 2)]
                                liste_affix = ["~Rouge~", # +2 vie
                                            "~Carmin~", # +4 vie
                                            "~Violet~", # +2 mana
                                            "~Pourpre~", # +4 mana
                                            "~Jaune~", # +2 endurance
                                            "~Doré~", # +4 endurance
                                            "~Lolipop~", # +1 vie mana endurance
                                            "~Bubblegum~", # +2 vie mana endurance
                                            "~Escargot~", # +1% degat technique
                                            "~Limace~", # +1% degat sorts
                                            "~Citronnier~", # +0.5 degat critique technique
                                            "~Citron~", # +1 degat critique technique
                                            "~Cerisier~", # +0.5 degat critique sort
                                            "~Cerise~", # +1 degat critique sort
                                            "~Mars~", # +0.5% chance de bruler
                                            "~Neptune~", # +0.5% chance de geler
                                            "~Pluton~", # +0.25% chance de paralyser
                                            "~Lune~", # +0.5% chance de lapider
                                            "~Mercure~", # +0.5% chance de drain
                                            "~Ordre~", # peut bruler
                                            "~Aveugle~", # peut geler
                                            "~Limitation~", # peut lapider
                                            "~Transcendance~", # peut paralyser
                                            "~Eveil~", # peut drainer
                                            "~Antithèse~", # 15% chance d'arreter le gel
                                            "~Chaotique~", # 15% chance d'arreter la brulure
                                            "~Tache~", # 15% chance d'arreter la blessure
                                            "~Rature~", # 15% chance d'arreter la deconcentration
                                            "~Brouillon~", # 15% chance d'arreter la confusion
                                            "~Paragraphe~", # 6% chance d'enlever gel + brulure + blessure + deconcentration + confusion
                                            "~Magnum-Opus~", # 6% chance de donner numero_etage * 5 golds
                                            "~Agrume~", # 6% chance d'être béni
                                            "~Raisin~", # 6% chance d'être en folie
                                            "~Durian~", # 6% chance d'être en furie
                                            "~Gingembre~", # 6% chance d'être jindagee 2 tours
                                            "~Mandragore~", # 6% chance d'être aatma 2 tours
                                            "~Nigredo~", # 2% chance reprendre full vie
                                            "~Albédo~", # 2% chance reprendre full mana
                                            "~Citrinitas~", # 2% chance reprendre full endurance
                                            "~Chrysalide~", # 2% chance devenir invincible 2 tours
                                            ]
                                #enelever les effets elementaires en doublons
                                sort_choisi_transformee_en_liste = list(sort_choisie.split())
                                if "Faisceau" in sort_choisi_transformee_en_liste :
                                    liste_affix.remove("~Limitation~")
                                elif "Thermosphère" in sort_choisi_transformee_en_liste :
                                    liste_affix.remove("~Ordre~")
                                elif "Pic" in sort_choisi_transformee_en_liste :
                                    liste_affix.remove("~Aveugle~")
                                elif "Création" in sort_choisi_transformee_en_liste :
                                    liste_affix.remove("~Transcendance~")
                                elif "Dance" in sort_choisi_transformee_en_liste :
                                    liste_affix.remove("~Eveil~")

                                nombre_aleatoire = random.randint(0, (len(liste_affix) - 1))
                                affix_choisi = liste_affix[nombre_aleatoire]

                                sort_choisie_a_afficher = sort_choisie
                                Player.sorts_possedes.remove(sort_choisie)
                                sort_choisie += f" {affix_choisi}"
                                Player.sorts_possedes.append(sort_choisie)
                                Player.nombre_de_monstres_tues -= 15
                                print("Vous sentez Zeroual vibrer, et le sortez de son bain de roche en fusion.")
                                print("Ensuite, vous le posez délicatement a terre, et répétez en boucle une sort de formule magique, ou prière.")
                                Save.SaveTheGameSansAffichage()
                                Affichage.EntreePourContinuer()
                                print(f"Pendant de courts instants, des symboles apparaissent autour de votre arme.")
                                Affichage.EntreePourContinuer()
                                print(f"Le sort {sort_choisie_a_afficher} gagne l'enchantement [{affix_choisi}] !")
                                Affichage.EntreePourContinuer()
                                print("Vous hurlez un mot terrible, et le processus s'arrête brusquement.")
                                Affichage.EntreePourContinuer()
                                break
                    elif choix == 7 and Player.nombre_de_monstres_tues >= 15 and len(Player.sorts_possedes) > 0:
                        print("Vous prenez Zeroual avec des pinces, rassemblez vos crystaux élémentaires, et le plongez dans la rivière de lave.")
                        Affichage.EntreePourContinuer()
                        liste_sorts_affixables = []
                        for sort in Player.sorts_possedes:
                            if sort in LISTESORTS or sort == "Missile Arcanique":
                                liste_sorts_affixables.append(sort)
                        while True:
                            while True:
                                try:
                                    print("Puis, vous pensez a un sort.")
                                    print("\n1 - Arreter")
                                    numero = 1
                                    for sort in liste_sorts_affixables :
                                        numero += 1
                                        print(f"{numero} - Penser à {sort}")
                                    choix = int(input("\nFaites votre choix avec les nombres : "))
                                    ClearConsole()
                                    if choix in range (1, (numero + 1)):
                                        break
                                except ValueError:
                                    ClearConsole()
                            if choix == 1:
                                print("Vous retirez Zeroual de la lave.")
                                Affichage.EntreePourContinuer()
                                break
                            else:
                                sort_choisie = liste_sorts_affixables[(choix - 2)]
                                liste_affix = [
                                            "~Ordre~", # peut bruler
                                            "~Aveugle~", # peut geler
                                            "~Limitation~", # peut lapider
                                            "~Transcendance~", # peut paralyser
                                            "~Eveil~", # peut drainer
                                            ]
                                #enelever les effets elementaires en doublons
                                sort_choisi_transformee_en_liste = list(sort_choisie.split())
                                if "Faisceau" in sort_choisi_transformee_en_liste :
                                    liste_affix.remove("~Limitation~")
                                elif "Thermosphère" in sort_choisi_transformee_en_liste :
                                    liste_affix.remove("~Ordre~")
                                elif "Pic" in sort_choisi_transformee_en_liste :
                                    liste_affix.remove("~Aveugle~")
                                elif "Création" in sort_choisi_transformee_en_liste :
                                    liste_affix.remove("~Transcendance~")
                                elif "Dance" in sort_choisi_transformee_en_liste :
                                    liste_affix.remove("~Eveil~")

                                nombre_aleatoire = random.randint(0, (len(liste_affix) - 1))
                                affix_choisi = liste_affix[nombre_aleatoire]

                                sort_choisie_a_afficher = sort_choisie
                                Player.sorts_possedes.remove(sort_choisie)
                                sort_choisie += f" {affix_choisi}"
                                Player.sorts_possedes.append(sort_choisie)
                                Player.nombre_de_monstres_tues -= 15
                                Player.items_possedes["Crystal Elémentaire"] -= 5
                                print("Vous sentez Zeroual vibrer, mais le laissez dans son bain de roche en fusion.")
                                print("A la place, vous sortez un vieux livre, et préparez une tasse de thé avec les crystaux réduits en poudre.")
                                print("Alors que votre thé se termine, vous le buvez d'un coup et observez les figures laissées au fond de la tasse par le reste de crystaux élémentaires.")
                                print("Vous vous servez ensuite du livre pous assigner un mot a chaque figure, et le notez sur un morceau de papier.")
                                Save.SaveTheGameSansAffichage()
                                Affichage.EntreePourContinuer()
                                print(f"Vous sortez votre arme de la lave alors qu'elle vibre sans ménagement, la posez a terre, et lisez seulement les mots que vous avez notés.")
                                print("Zeroual s'arrête alors de vibrer.")
                                Affichage.EntreePourContinuer()
                                print(f"Le sort {sort_choisie_a_afficher} gagne l'enchantement [{affix_choisi}] !")
                                Affichage.EntreePourContinuer()
                                print("Vous vous préparez une tasse de véritable thé en attendant que Zeroual refroidisse, pour enlever le gout de cailloux dans votre bouche.")
                                Affichage.EntreePourContinuer()
                                break
                    elif choix == 8 and Player.nombre_de_monstres_tues >= 25 and len(Player.sorts_possedes) > 0:
                        print("Vous ouvrez une boite blanche froide au toucher, et y rentrez Zeroual.")
                        Affichage.EntreePourContinuer()
                        #faire liste action evoluable
                        liste_action_qui_peut_evoluer = [
                            "Tir Arcanique",
                            "Faisceau Rapide",
                            "Faisceau Statique",
                            "Faisceau Electrique",
                            "Faisceau de l'Eclair",
                            "Faisceau Foudroyant",
                            "Thermosphère Chaude",
                            "Thermosphère Brulante",
                            "Thermosphère Enflammée",
                            "Thermosphère de la Fournaise",
                            "Thermosphère Magmatique",
                            "Pic Bleu",
                            "Pic Froid",
                            "Pic Givré",
                            "Pic Glacial",
                            "Pic Polaire",
                            "Création d'Argile",
                            "Création de Lapis",
                            "Création de Granite",
                            "Création Obsidienne",
                            "Création de la Montagne",
                            "Explosion Légère",
                            "Explosion Renforcée",
                            "Explosion Lourde",
                            "Explosion Maitrisée",
                            "Explosion Fatale",
                            "Dance Volevie",
                            "Dance Siphoneuse",
                            "Dance Vampirique",
                            "Dance Parasite",
                            "Dance Destructrice",
                            "Sonata Pitoyable",  # 3% ou 8pv
                            "Sonata Miséricordieuse",  # 5% ou 15pv
                            "Sonata Empathique",  # 12% ou 20pv
                            "Sonata Sincère",  # 17% ou 25pv
                            "Sonata Bienveillante",  # 20% ou 33pv
                            ]
                        liste_action_en_possession = []
                        for action in Player.sorts_possedes:
                            if action in liste_action_qui_peut_evoluer:
                                liste_action_en_possession.append(action)

                        while True:
                            try:
                                print("Vous refermez la boite et pensez a un sort.")
                                print("\n1 - Arrêter")
                                numero = 2
                                for action in liste_action_en_possession:
                                    print(f"{numero} - {action}")
                                    numero += 1
                                choix = int(input("\nFaites votre choix avec les nombres : "))
                                ClearConsole()
                                if choix in range (1, (numero)):
                                    break
                            except ValueError:
                                ClearConsole()
                        if choix == 1:
                            print("Vous sortez Zeroual de la boite.")
                            Affichage.EntreePourContinuer()
                        else:
                            #trouver son evolution
                            Player.nombre_de_monstres_tues -= 25
                            nom_action_a_evoluer = liste_action_en_possession[choix - 2]

                            if nom_action_a_evoluer == "Tir Arcanique":
                                nom_nouvelle_action = "Missile Arcanique"
                                Player.sorts_possedes.remove(nom_action_a_evoluer)
                                Player.sorts_possedes.append(nom_nouvelle_action)
                            elif nom_action_a_evoluer in LISTESORTS:
                                position_de_laction = LISTESORTS.index(nom_action_a_evoluer)
                                nom_nouvelle_action = LISTESORTS[position_de_laction + 1]
                                Player.sorts_possedes.remove(nom_action_a_evoluer)
                                Player.sorts_possedes.append(nom_nouvelle_action)

                            print("Vous sentez qu'un changement s'opère dans la boite, et un petit vent chaud se met a sortir de derrière.")
                            print("Vous essayez d'ouvrir la boite, mais n'y arrivez pas.")
                            Affichage.EntreePourContinuer()
                            print("Vous vous installez confortablement et faites un petit somme.")
                            Affichage.EntreePourContinuer()
                            print("Quelques heures plus tard, un bruit de déclic vous réveille, et la porte de la boite s'ouvre d'elle même.")
                            Affichage.EntreePourContinuer()
                            print(f"La technique [{nom_action_a_evoluer}] devient [{nom_nouvelle_action}] !")
                            Affichage.EntreePourContinuer()
                            print("Vous récuperez Zeroual.")
                            print("Il est froid au toucher !")
                            Affichage.EntreePourContinuer()
                    elif choix == 9:
                        print("Vous sortez de la salle, et les visions disparaissent.")
                        Affichage.EntreePourContinuer()
                        break
                    else:
                        print("Impossible !")
                        Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "LOTTERIE":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.lotterie()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous rentrez dans la salle et fermez les yeux.")
                Affichage.EntreePourContinuer()
                print("Devant vous, il y a des murs recouverts d'une tapisserie kitch de couleur rose, ainsi que des rubans verts accrochés au plafond, et des lumières aveuglantes provenant de différentes sources un peu partout.")
                Affichage.EntreePourContinuer()
                print("Alors que vos yeux s'habituent a l'horrible mélange de formes et couleurs qui compose la salle, vous arrivez a discerner les contour d'un bloc de roche complètement, absolument, totalement, noir.")
                print("Vous avez l'impression que même la lumière ne peut s'échapper du monolithe.")
                Affichage.EntreePourContinuer()
                print("Vous vous approchez de la chose, et des lettres de lumières apparaissent a sa surface.")
                Affichage.EntreePourContinuer()
                self.TraderIncAnimationOpen()
                while True:
                    while True:
                        try:
                            print("                       ||")
                            print("                      ||||")
                            print("                     ||  ||")
                            print("                    ||||||||")
                            print("                   |||    |||")
                            print("                  || ||  || ||")
                            print("                 ||   ||||   ||")
                            print("                ||     ||     ||")
                            print("               ||||||||||||||||||")
                            print("")
                            print("")
                            print("              Traders Incorporated")
                            print("                Fidelity Service")
                            print("\n")
                            print(f"Bonjour Trader, nous avons détecté {Player.jetons} jeton en votre possession.")
                            print("\n")
                            print("\n1 - Gagnez 5 items aléatoires pour seulement 1 Jeton !")
                            print("2 - Achetez 1 Redcoin pour un prix misérable de 2 Jetons !")
                            print("3 - Dépensez 3 Jetons et repartez chez vous avec un artefact !")
                            print("4 - 4 Jetons, c'est le prix de la tranquilité avec notre service d'augmentation de la chair !")
                            print("5 - Devenez un membre Platinium de notre service de Trading pour 5 Jetons !")
                            print("\n6 - Eteindre le système.")
                            choix = int(input("\nFaites votre choix en touchant les nombres : "))
                            ClearConsole()
                            if choix in [1, 2, 3, 4, 5, 6]:
                                break
                        except ValueError:
                            ClearConsole()
                    if choix == 1 and Player.jetons >= 1:
                        Player.jetons -= 1
                        liste_item = []
                        for _ in range(1, 6):
                            nombre_aleatoire = random.randint(0, (len(LISTEITEM) - 1))
                            item_obtenu = LISTEITEM[nombre_aleatoire]
                            liste_item.append(item_obtenu)
                            Player.items_possedes[item_obtenu] += 1
                        print("                       ||")
                        print("                      ||||")
                        print("                     ||  ||")
                        print("                    ||||||||")
                        print("                   |||    |||")
                        print("                  || ||  || ||")
                        print("                 ||   ||||   ||")
                        print("                ||     ||     ||")
                        print("               ||||||||||||||||||")
                        print("")
                        print("")
                        print("              Traders Incorporated")
                        print("                Fidelity Service")
                        print("\n")
                        print("\nCher Trader, vous devriez trouver dans votre poche de nouveaux item a vendre aux aventuriers !")
                        print(f"Nous vous avons donné les items [{liste_item[0]}], [{liste_item[1]}], [{liste_item[2]}], [{liste_item[3]}] et [{liste_item[4]}] !")
                        input("\nTouchez Entrée pour Continuer ")
                        ClearConsole()
                    elif choix == 2 and Player.jetons >= 2:
                        Player.jetons -= 2
                        Player.nombre_de_red_coin += 1
                        print("                       ||")
                        print("                      ||||")
                        print("                     ||  ||")
                        print("                    ||||||||")
                        print("                   |||    |||")
                        print("                  || ||  || ||")
                        print("                 ||   ||||   ||")
                        print("                ||     ||     ||")
                        print("               ||||||||||||||||||")
                        print("")
                        print("")
                        print("              Traders Incorporated")
                        print("                Fidelity Service")
                        print("\n")
                        print("\nCher Trader, vous devriez trouver dans votre poche un sublime Redcoin a vendre pour un prix exorbitant !")
                        print("Rapellez vous la règle : 1 seul Redcoin par étage, mettez le deuxieme a un prix impossible pour dissuader les plus riche.")
                        print("Nous avons un équilibre a garder, après tout !")
                        input("\nTouchez Entrée pour Continuer ")
                        ClearConsole()
                    elif choix == 3 and Player.jetons >= 3:
                        Player.jetons -= 3
                        print("                       ||")
                        print("                      ||||")
                        print("                     ||  ||")
                        print("                    ||||||||")
                        print("                   |||    |||")
                        print("                  || ||  || ||")
                        print("                 ||   ||||   ||")
                        print("                ||     ||     ||")
                        print("               ||||||||||||||||||")
                        print("")
                        print("")
                        print("              Traders Incorporated")
                        print("                Fidelity Service")
                        print("\n")
                        print("\nCher Trader, vous devriez trouver dans votre poche une boite de chène noir, natif a notre monde.")
                        print("Car ici, à Trader Incorporated, nous mettons un peu de noue même dans chaque transaction !")
                        print("Bien entendu, il y a aussi un artefact a l'interieur.")
                        print("Et vous, cher trader...")
                        input("\nTouchez Entrée pour Continuer ")
                        ClearConsole()
                        print("                       ||")
                        print("                      ||||")
                        print("                     ||  ||")
                        print("                    ||||||||")
                        print("                   |||    |||")
                        print("                  || ||  || ||")
                        print("                 ||   ||||   ||")
                        print("                ||     ||     ||")
                        print("               ||||||||||||||||||")
                        print("")
                        print("")
                        print("              Traders Incorporated")
                        print("                Fidelity Service")
                        print("\n")
                        print("")
                        self.GiveRandomArtefact()
                    elif choix == 4 and Player.jetons >= 4:
                        Player.jetons -= 4
                        print("                       ||")
                        print("                      ||||")
                        print("                     ||  ||")
                        print("                    ||||||||")
                        print("                   |||    |||")
                        print("                  || ||  || ||")
                        print("                 ||   ||||   ||")
                        print("                ||     ||     ||")
                        print("               ||||||||||||||||||")
                        print("")
                        print("")
                        print("              Traders Incorporated")
                        print("                Fidelity Service")
                        print("\n")
                        print("\nCher Trader, votre corps est votre plus grand outil pendant vos ventes.")
                        print("Avec son language, vous pouvez planter des idées qui germent dans les têtes de nos consommateurs et les incitent à l'achat.")
                        print("Avec sa forme, vous pouvez proteger vos marchandises des perfides qui peuplent votre dimension.")
                        input("\nTouchez Entrée pour Continuer ")
                        ClearConsole()
                        print("                       ||")
                        print("                      ||||")
                        print("                     ||  ||")
                        print("                    ||||||||")
                        print("                   |||    |||")
                        print("                  || ||  || ||")
                        print("                 ||   ||||   ||")
                        print("                ||     ||     ||")
                        print("               ||||||||||||||||||")
                        print("")
                        print("")
                        print("              Traders Incorporated")
                        print("                Fidelity Service")
                        print("\n")
                        print("\nEt c'est dans cet optique là que nous avons modifié votre corps afin de rendre plus réceptif, le porte monnaie de nos investisseurs.")
                        print("Vous gagnez ainsi 2 points de force, intelligence, defence, ainsi que 5 points de vie, mana, et endurance max, et bien sur 3% de chance de faire des coups/sorts critiques !")
                        print("Sans oublier 1% de chance d'esquive.")
                        input("\nTouchez Entrée pour Continuer ")
                        Player.points_de_force += 2
                        Player.points_dintelligence += 2
                        Player.points_de_defence += 2
                        Player.points_dendurance += 5
                        Player.points_de_vie_max += 5
                        Player.points_de_mana_max += 5
                        Player.taux_sort_critique += 3
                        Player.taux_coup_critique += 3
                        Player.taux_desquive += 1
                        ClearConsole()
                    elif choix == 5 and Player.jetons >= 5:
                        Player.jetons -= 5
                        print("                       ||")
                        print("                      ||||")
                        print("                     ||  ||")
                        print("                    ||||||||")
                        print("                   |||    |||")
                        print("                  || ||  || ||")
                        print("                 ||   ||||   ||")
                        print("                ||     ||     ||")
                        print("               ||||||||||||||||||")
                        print("")
                        print("")
                        print("              Traders Incorporated")
                        print("                Fidelity Service")
                        print("\n")
                        print("\nCher Trader, notre entreprise est une grande famille.")
                        print("Une grande famille intouchable, innacessible, et qui fait du commerce entre les mondes via des monolithes anciens seulement avec des personnes particulières, certe,")
                        print("Mais c'est *votre* famille.")
                        input("\nTouchez Entrée pour Continuer ")
                        ClearConsole()
                        print("                       ||")
                        print("                      ||||")
                        print("                     ||  ||")
                        print("                    ||||||||")
                        print("                   |||    |||")
                        print("                  || ||  || ||")
                        print("                 ||   ||||   ||")
                        print("                ||     ||     ||")
                        print("               ||||||||||||||||||")
                        print("")
                        print("")
                        print("              Traders Incorporated")
                        print("                Fidelity Service")
                        print("\n")
                        print("\nEt c'est pour cette raison, afin de vous récompenser de vos achats, que nous vous offrons ce Médaillon de Platine de haute qualité.")
                        print("Avec lui, vous pourrez acquérir des biens chez les marchands de notre companie, vos frères et soeurs, pour des sommes bien moins élevées.")
                        print("Nous vous remercions sincèrement de votre dévouement !")
                        input("\nTouchez Entrée pour Continuer ")
                        FloorMaker.GiveRandomArtefact("Médaillon de Platine","Don")
                        ClearConsole()
                    elif choix == 6:
                        self.TraderIncAnimationClose()
                        print("Vous vous éloignez du systeme de fidélité de la guilde des marchands (tm).")
                        Affichage.EntreePourContinuer()
                        break
                    else:
                        print("                       ||")
                        print("                      ||||")
                        print("                     ||  ||")
                        print("                    ||||||||")
                        print("                   |||    |||")
                        print("                  || ||  || ||")
                        print("                 ||   ||||   ||")
                        print("                ||     ||     ||")
                        print("               ||||||||||||||||||")
                        print("")
                        print("")
                        print("              Traders Incorporated")
                        print("                Fidelity Service")
                        print("\n")
                        print("\nVous n'avez pas assez de [JETONS] !")
                        input("\nTouchez Entrée pour Continuer ")
                        ClearConsole()
            elif caracteristique_de_la_salle["type"] == "BRAZIER_ROUGE":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.brazier()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                liste_items_sacrifiables_total = LISTEITEM

                print("Vous avancez dans la salle, et découvrez un gigantesque brasero orné de pierres précieuses .")
                Affichage.EntreePourContinuer()
                print("Sur ses côtés sont gravés des symboles anciens, montrant des populations en position de prière autour d'un objet similaire, sur lequel semble bruler un objet.")
                Affichage.EntreePourContinuer()
                print("Sans vraiment savoir comment, vous savez exactement ce que vous pouvez y bruler.")
                Affichage.EntreePourContinuer()
                while True:
                    while True:
                        try:
                            if Player.flammes_rouge != 0:
                                print("Un brasier de couleur rouge danse dans le brasero.")
                            else:
                                print("Il n'y a plus de feu dans le brasero.")
                            print("\n1 - Faire une offrande")
                            print("2 - Partir")
                            choix = int(input("\nFaites votre choix avec les nombres : "))
                            ClearConsole()
                            if choix in [1, 2]:
                                break
                        except ValueError:
                            ClearConsole()
                    if choix == 1:
                        #faire la liste d'objet sacrifiable
                        liste_items_sacrifiables_possedes = []
                        for item in Player.items_possedes:
                            if ((item in liste_items_sacrifiables_total) and
                                (Player.items_possedes[item] > 0)):
                                liste_items_sacrifiables_possedes.append(item)

                        if Player.flammes_rouge == 0:
                            print("Vous regardez les cendres remplissant désormais le brasero, et avez le sentiment que vous ne pouvez plus rien offrir.")
                            Affichage.EntreePourContinuer()
                        elif len(liste_items_sacrifiables_possedes) == 0:
                            print("Vous ne pouvez rien offrir de valeur ici.")
                            Affichage.EntreePourContinuer()
                        else :
                            while True:
                                try:
                                    print("     -= Offrandes =-")
                                    print("\n1 - Retour")
                                    numero = 2
                                    for item in liste_items_sacrifiables_possedes:
                                        print(f"{numero} - {item} [{Player.items_possedes[item]} dans la sacoche]")
                                        numero += 1
                                    choix = int(input("\nFaites votre choix avec les nombres : "))
                                    ClearConsole()
                                    if choix in range(1, (len(liste_items_sacrifiables_possedes) + 2)):
                                        break
                                except ValueError :
                                    ClearConsole()
                            if choix == 1:
                                pass
                            else:
                                item_choisi = liste_items_sacrifiables_possedes[(choix - 2)]
                                nombre_aleatoire = random.randint(0, (len(LISTEITEM) - 1))
                                item_obtenu = LISTEITEM[nombre_aleatoire]
                                print(f"Vous jetez l'item [{item_choisi}] dans le brasero, et regardez les braises se disperser dans les airs.")
                                Affichage.EntreePourContinuer()
                                print("Au bout de quelques instant, quelque chose apparait a vos pieds.")
                                Affichage.EntreePourContinuer()
                                Player.flammes_rouge -= 1
                                Player.items_possedes[item_choisi] -= 1
                                Player.items_possedes[item_obtenu] += 1
                                Save.SaveTheGameSansAffichage()
                                print(f"Vous obtenez l'item [{item_obtenu}] !")
                                Affichage.EntreePourContinuer()
                                print("Le feu se fait plus faible.")
                                Affichage.EntreePourContinuer()
                    elif choix == 2:
                        print("Vous regardez, pensif, le feu gravé dans le réceptacle, avant de partir.")
                        Affichage.EntreePourContinuer()
                        break
            elif caracteristique_de_la_salle["type"] == "BRAZIER_NOIR":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.brazier()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                liste_items_sacrifiables_total = ["Fruit Jindagee", "Fruit Aatma", "Crystal Elémentaire"]

                print("Vous avancez dans la salle, et découvrez un gigantesque brasero orné de pierres précieuses .")
                Affichage.EntreePourContinuer()
                print("Sur ses côtés sont gravés des symboles anciens, montrant des populations en position de prière autour d'un objet similaire, sur lequel semble bruler un objet.")
                Affichage.EntreePourContinuer()
                print("Sans vraiment savoir comment, vous savez exactement ce que vous pouvez y bruler.")
                Affichage.EntreePourContinuer()
                while True:
                    while True:
                        try:
                            if Player.flammes_noire != 0:
                                print("Un brasier de couleur noir danse dans le brasero.")
                            else:
                                print("Il n'y a plus de feu dans le brasero.")
                            print("\n1 - Faire une offrande")
                            print("2 - Partir")
                            choix = int(input("\nFaites votre choix avec les nombres : "))
                            ClearConsole()
                            if choix in [1, 2]:
                                break
                        except ValueError:
                            ClearConsole()
                    if choix == 1:
                        #faire la liste d'objet sacrifiable
                        liste_items_sacrifiables_possedes = []
                        for item in Player.items_possedes:
                            if ((item in liste_items_sacrifiables_total) and
                                (Player.items_possedes[item] > 0)):
                                liste_items_sacrifiables_possedes.append(item)

                        if Player.flammes_noire == 0:
                            print("Vous regardez les cendres remplissant désormais le brasero, et avez le sentiment que vous ne pouvez plus rien offrir.")
                            Affichage.EntreePourContinuer()
                        elif len(liste_items_sacrifiables_possedes) == 0:
                            print("Vous ne pouvez rien offrir de valeur ici.")
                            Affichage.EntreePourContinuer()
                        else :
                            while True:
                                while True:
                                    try:
                                        print("     -= Offrandes =-")
                                        print("\n1 - Retour")
                                        numero = 2
                                        for item in liste_items_sacrifiables_possedes:
                                            print(f"{numero} - {item} [{Player.items_possedes[item]} dans la sacoche]")
                                            numero += 1
                                        choix = int(input("\nFaites votre choix avec les nombres : "))
                                        ClearConsole()
                                        if choix in range(1, (len(liste_items_sacrifiables_possedes) + 2)):
                                            break
                                    except ValueError :
                                        ClearConsole()
                                if choix == 1:
                                    break
                                elif choix == 2:
                                    item_choisi = liste_items_sacrifiables_possedes[(choix - 2)]
                                    if Player.items_possedes[item_choisi] < 20:
                                        print("Vous n'avez pas assez de cet objet pour satisfaire la faim de ce terrible feu.")
                                        Affichage.EntreePourContinuer()
                                    else:
                                        print(f"Vous jetez l'item [{item_choisi}] dans le brasero.\nPuis un autre.\nEt encore un autre.")
                                        Affichage.EntreePourContinuer()
                                        print(f"Au final, c'est une vingtaine de [{item_choisi}] que vous faites disparaitre dans les flammes et les braises.")
                                        Affichage.EntreePourContinuer()
                                        print("Au bout de quelques instants, le feu s'éteint.")
                                        Affichage.EntreePourContinuer()
                                        print("...?\nIl y a quelque chose dans les cendres...")
                                        Affichage.EntreePourContinuer()
                                        if item_choisi == "Fruit Jindagee":
                                            item_obtenu = "Totem de la Force"
                                            commentaire_sur_artefact = "Un totem en bois rouge, don divin d'un feu ancestral contre une offrande remplie de vitalité.\nVous commencez tout les combats avec l'effet [Jindagee] pendant 3 tours !"
                                        elif item_choisi == "Fruit Aatma":
                                            item_obtenu = "Totem de la Sagesse"
                                            commentaire_sur_artefact = "Un totem en bois bleu, don divin d'un feu ancestral contre une offrande remplie de spiritualité.\nVous commencez tout les combats avec l'effet [Aatma] pendant 3 tours !"
                                        elif item_choisi == "Crystal Elémentaire":
                                            commentaire_sur_artefact = "Un totem en bois vert, don divin d'un feu ancestral contre une offrande remplie de défiance.\nVous commencez tout les combats avec une petite augmentation aléatoire d'appliquer un effet élémentaire !"
                                            item_obtenu = "Totem du Courage"
                                        FloorMaker.GiveRandomArtefact(item_obtenu,"Don")
                                        Player.flammes_noire -= 1
                                        Player.items_possedes[item_choisi] -= 20
                                        Save.SaveTheGameSansAffichage()
                                        print(f"Vous obtenez l'artefact [{item_obtenu}] !")
                                        print(commentaire_sur_artefact)
                                        Affichage.EntreePourContinuer()
                                        break
                    elif choix == 2:
                        print("Vous regardez, pensif, le feu gravé dans le réceptacle, avant de partir.")
                        Affichage.EntreePourContinuer()
                        break
            elif caracteristique_de_la_salle["type"] == "BRAZIER_BLEU":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.brazier()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                liste_items_sacrifiables_total = LISTEITEMBASE
                liste_items_quand_uppgrade = LISTEITEMAVANCE

                print("Vous avancez dans la salle, et découvrez un gigantesque brasero orné de pierres précieuses .")
                Affichage.EntreePourContinuer()
                print("Sur ses côtés sont gravés des symboles anciens, montrant des populations en position de prière autour d'un objet similaire, sur lequel semble bruler un objet.")
                Affichage.EntreePourContinuer()
                print("Sans vraiment savoir comment, vous savez exactement ce que vous pouvez y bruler.")
                Affichage.EntreePourContinuer()
                while True:
                    while True:
                        try:
                            if Player.flammes_bleue != 0:
                                print("Un brasier de couleur bleu danse dans le brasero.")
                            else:
                                print("Il n'y a plus de feu dans le brasero.")
                            print("\n1 - Faire une offrande")
                            print("2 - Partir")
                            choix = int(input("\nFaites votre choix avec les nombres : "))
                            ClearConsole()
                            if choix in [1, 2]:
                                break
                        except ValueError:
                            ClearConsole()
                    if choix == 1:
                        #faire la liste d'objet sacrifiable
                        liste_items_sacrifiables_possedes = []
                        for item in Player.items_possedes:
                            if ((item in liste_items_sacrifiables_total) and
                                (Player.items_possedes[item] > 0)):
                                liste_items_sacrifiables_possedes.append(item)

                        if Player.flammes_bleue == 0:
                            print("Vous regardez les cendres remplissant désormais le brasero, et avez le sentiment que vous ne pouvez plus rien offrir.")
                            Affichage.EntreePourContinuer()
                        elif len(liste_items_sacrifiables_possedes) == 0:
                            print("Vous ne pouvez rien offrir de valeur ici.")
                            Affichage.EntreePourContinuer()
                        else :
                            while True:
                                try:
                                    print("     -= Offrandes =-")
                                    print("\n1 - Retour")
                                    numero = 2
                                    for item in liste_items_sacrifiables_possedes:
                                        print(f"{numero} - {item} [{Player.items_possedes[item]} dans la sacoche]")
                                        numero += 1
                                    choix = int(input("\nFaites votre choix avec les nombres : "))
                                    ClearConsole()
                                    if choix in range(1, (len(liste_items_sacrifiables_possedes) + 2)):
                                        break
                                except ValueError :
                                    ClearConsole()
                            if choix == 1:
                                pass
                            else:
                                item_choisi = liste_items_sacrifiables_possedes[(choix - 2)]
                                place_de_litem_choisi_dans_listeitem = LISTEITEMBASE.index(item_choisi)
                                item_obtenu = liste_items_quand_uppgrade[place_de_litem_choisi_dans_listeitem]
                                print(f"Vous jetez l'item [{item_choisi}] dans le brasero, et regardez les braises se disperser dans les airs.")
                                Affichage.EntreePourContinuer()
                                print("Au bout de quelques instant, quelque chose apparait a vos pieds.")
                                Affichage.EntreePourContinuer()
                                Player.flammes_bleue -= 1
                                Player.items_possedes[item_choisi] -= 1
                                Player.items_possedes[item_obtenu] += 1
                                Save.SaveTheGameSansAffichage()
                                print(f"Vous obtenez l'item [{item_obtenu}] !")
                                Affichage.EntreePourContinuer()
                                print("Le feu se fait plus faible.")
                                Affichage.EntreePourContinuer()
                    elif choix == 2:
                        print("Vous regardez, pensif, le feu gravé dans le réceptacle, avant de partir.")
                        Affichage.EntreePourContinuer()
                        break
            elif caracteristique_de_la_salle["type"] == "PECHE":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.peche()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous trébuchez sur quelque chose par terre, et finissez la tête dans de l'eau.")
                Affichage.EntreePourContinuer()
                print("Alors que vous vous relevez, vous voyez un trou dans le sol rempli d'une eau bleutée, comme un hublot dans un sous marin.\nEn vous retournant, vous comprenez que vous avez trébuché sur une canne a peche.")
                Affichage.EntreePourContinuer()
                print("On dirait que quelqu'un ici a pratiqué la peche blanche.\nEnfin, pas sur la glace mais dans le sol.")
                Affichage.EntreePourContinuer()
                while True:
                    while True:
                        try:
                            if Player.poissons != 0:
                                print(f"Vous pouvez voir {Player.poissons} formes se baladant au fond de l'eau.")
                            else:
                                print("Il n'y a plus rien a pêcher ici.")
                            print("\n1 - Pecher")
                            print("2 - Partir")
                            choix = int(input("\nFaites votre choix avec les nombres : "))
                            ClearConsole()
                            if choix in [1, 2]:
                                break
                        except ValueError:
                            ClearConsole()
                    if choix == 1:
                        Player.poissons -= 1
                        Save.SaveTheGameSansAffichage()
                        #détermine le type de prise
                        numero_aleatoire = random.randint(1,5)
                        if numero_aleatoire == 1:
                            type_de_prise = "Monstre"
                        elif numero_aleatoire == 2:
                            type_de_prise = "Item"
                        elif numero_aleatoire == 3:
                            type_de_prise = "Poisson"
                        elif numero_aleatoire == 4:
                            type_de_prise = "Gros Poisson"
                        elif numero_aleatoire == 5:
                            type_de_prise = "Redcoin"
                        elif numero_aleatoire == 5:
                            type_de_prise = "Artefact"
                        if Player.poissons == -1:
                            print("Si vous voulez....")
                            Affichage.EntreePourContinuer()
                            type_de_prise = "Rien"
                        prise = self.DoPeche(type_de_prise)
                        if prise == "Pas assez attendu":
                            Player.poissons += 1
                        else:
                            print("Vous sortez l'hameçon de l'eau...")
                            Affichage.EntreePourContinuer()
                            if prise == "Monstre":
                                print("...et découvrez un monstre accroché au bout.")
                                Affichage.EntreePourContinuer()
                                print("...")
                                Affichage.EntreePourContinuer()
                                print("...")
                                Affichage.EntreePourContinuer()
                                print("Le monstre vous regarde d'un air surpris.")
                                Affichage.EntreePourContinuer()
                                print("Vous lui retournez le même regard.")
                                Affichage.EntreePourContinuer()
                                print("Le monstre machouille l'hameçon de manière lancinante.")
                                Affichage.EntreePourContinuer()
                                print("Vous posez la canne et amenez la main a votre arme.")
                                Affichage.EntreePourContinuer()
                                control = controleur.Control(Player, Trader, FloorMaker, Sove)
                                # lance la bataille
                                try:
                                    CHANNELMUSIQUEDEBASE.set_volume(0)
                                    time.sleep(0.01)
                                    CHANNELMUSIQUEDEBASE.stop()
                                    control.Battle()
                                    StopAllMusic()
                                except Exception as error:
                                    WriteErrorInErrorLog(error)
                                print("Ouf !")
                                PlayMusicDeLetage()
                                Affichage.EntreePourContinuer()
                            elif prise == "Item":
                                print("...et décrochez une botte dans laquelle il s'était enfoncé.")
                                Affichage.EntreePourContinuer()
                                numero_aleatoire = random.randint(0, (len(LISTEITEM) - 1))
                                item_aleatoire_obtenu = LISTEITEM[numero_aleatoire]
                                Player.items_possedes[item_aleatoire_obtenu] += 1
                                print(f"A l'interieur de la botte, il y a l'item [{item_aleatoire_obtenu}] !")
                                Affichage.EntreePourContinuer()
                                print("Un déchet en moins dans les eaux !")
                                Affichage.EntreePourContinuer()
                            elif prise == "Poisson":
                                numero_aleatoire = random.randint(1,5)
                                if numero_aleatoire == 1:
                                    print("...et décrochez un joli poisson bleu, trop petit pour être mangé.")
                                    Affichage.EntreePourContinuer()
                                    print("Alors que vous remettez le poisson a l'eau, vous vous sentez en paix avec la nature.")
                                    Affichage.EntreePourContinuer()
                                    print("Vous gagnez 2 point d'intelligence !")
                                    Player.points_dintelligence += 2
                                    Affichage.EntreePourContinuer()
                                elif numero_aleatoire == 2:
                                    print("...et décrochez un joli poisson rouge, trop petit pour être mangé.")
                                    Affichage.EntreePourContinuer()
                                    print("Alors que vous remettez le poisson a l'eau, vous vous sentez en paix avec vos convictions.")
                                    Affichage.EntreePourContinuer()
                                    print("Vous gagnez 2 point de force !")
                                    Player.points_de_force += 2
                                    Affichage.EntreePourContinuer()
                                elif numero_aleatoire == 3:
                                    print("...et décrochez un joli poisson vert, trop petit pour être mangé.")
                                    Affichage.EntreePourContinuer()
                                    print("Alors que vous remettez le poisson a l'eau, vous vous sentez en paix avec vous même.")
                                    Affichage.EntreePourContinuer()
                                    print("Vous gagnez 5 points d'endurance' !")
                                    Player.points_dendurance += 5
                                    Affichage.EntreePourContinuer()
                                elif numero_aleatoire == 4:
                                    print("...et décrochez un joli poisson jaune, trop petit pour être mangé.")
                                    Affichage.EntreePourContinuer()
                                    print("Alors que vous remettez le poisson a l'eau, vous vous sentez en paix avec votre coeur.")
                                    Affichage.EntreePourContinuer()
                                    print("Vous gagnez 1% de chance d'esquive !")
                                    Player.taux_desquive += 1
                                    Affichage.EntreePourContinuer()
                                elif numero_aleatoire == 5:
                                    print("...et décrochez un joli poisson blanc, trop petit pour être mangé.")
                                    Affichage.EntreePourContinuer()
                                    print("Alors que vous remettez le poisson a l'eau, vous vous sentez en paix avec votre âme.")
                                    Affichage.EntreePourContinuer()
                                    print("Le nombre d'âme absorbées par votre arme augmente de 5 !")
                                    Player.nombre_de_monstres_tues += 5
                                    Affichage.EntreePourContinuer()
                                print("Belle prise !")
                                Affichage.EntreePourContinuer()
                            elif prise == "Gros Poisson":
                                numero_aleatoire = random.randint(1,5)
                                if numero_aleatoire == 1:
                                    print("...et décrochez un gros et vigoureux poisson bleu !")
                                    Affichage.EntreePourContinuer()
                                    print("Vous écaillez le poisson...\nLe videz de ses organes...\nPuis de son sang..\nEnlevez ses arêtes...\nLe découpez en filet...\nEt le faite cuire au dessus d'un feu vif.")
                                    Affichage.EntreePourContinuer()
                                    print("Alors que vous dégustez votre poisson, vous sentez des changements dans votre corps.")
                                    Affichage.EntreePourContinuer()
                                    print("Vous gagnez 4 points d'intelligence !")
                                    Player.points_dintelligence += 4
                                    Affichage.EntreePourContinuer()
                                elif numero_aleatoire == 2:
                                    print("...et décrochez un gros et vigoureux poisson rouge !")
                                    Affichage.EntreePourContinuer()
                                    print("Vous écaillez le poisson...\nLe videz de ses organes...\nPuis de son sang..\nEnlevez ses arêtes...\nLe découpez en filet...\nEt le faite cuire au dessus d'un feu vif.")
                                    Affichage.EntreePourContinuer()
                                    print("Alors que vous dégustez votre poisson, vous sentez des changements dans votre corps.")
                                    Affichage.EntreePourContinuer()
                                    print("Vous gagnez 4 point de force !")
                                    Player.points_de_force += 4
                                    Affichage.EntreePourContinuer()
                                elif numero_aleatoire == 3:
                                    print("...et décrochez un gros et vigoureux poisson vert !")
                                    Affichage.EntreePourContinuer()
                                    print("Vous écaillez le poisson...\nLe videz de ses organes...\nPuis de son sang..\nEnlevez ses arêtes...\nLe découpez en filet...\nEt le faite cuire au dessus d'un feu vif.")
                                    Affichage.EntreePourContinuer()
                                    print("Alors que vous dégustez votre poisson, vous sentez des changements dans votre corps.")
                                    Affichage.EntreePourContinuer()
                                    print("Vous gagnez 10 points d'endurance' !")
                                    Player.points_dendurance += 10
                                    Affichage.EntreePourContinuer()
                                elif numero_aleatoire == 4:
                                    print("...et décrochez un gros et vigoureux poisson jaune !")
                                    Affichage.EntreePourContinuer()
                                    print("Vous écaillez le poisson...\nLe videz de ses organes...\nPuis de son sang..\nEnlevez ses arêtes...\nLe découpez en filet...\nEt le faite cuire au dessus d'un feu vif.")
                                    Affichage.EntreePourContinuer()
                                    print("Alors que vous dégustez votre poisson, vous sentez des changements dans votre corps.")
                                    Affichage.EntreePourContinuer()
                                    print("Vous gagnez 3% de chance d'esquive !")
                                    Player.taux_desquive += 3
                                    Affichage.EntreePourContinuer()
                                elif numero_aleatoire == 5:
                                    print("...et décrochez un gros et vigoureux poisson blanc !")
                                    Affichage.EntreePourContinuer()
                                    print("Vous écaillez le poisson...\nLe videz de ses organes...\nPuis de son sang..\nEnlevez ses arêtes...\nLe découpez en filet...\nEt le faite cuire au dessus d'un feu vif.")
                                    Affichage.EntreePourContinuer()
                                    print("Alors que vous dégustez votre poisson, vous sentez des changements dans votre corps.")
                                    Affichage.EntreePourContinuer()
                                    print("Le nombre d'âme absorbées par votre arme augmente de 10 !")
                                    Player.nombre_de_monstres_tues += 10
                                    Affichage.EntreePourContinuer()
                                print("Miam !")
                                Affichage.EntreePourContinuer()
                            elif prise == "Redcoin":
                                print("...et y trouvez une amulette accrochée par chaine.")
                                Affichage.EntreePourContinuer()
                                print(f"Un bien interessant anneau est rentré dans la chaine...")
                                Affichage.EntreePourContinuer()
                                print("...bien précieux...")
                                Affichage.EntreePourContinuer()
                                print("...*mon* précieux...")
                                Affichage.EntreePourContinuer()
                                print("...mais vous êtes plus attiré par le redcoin incrusté a l'arriere de l'amulette.")
                                Affichage.EntreePourContinuer()
                                print("Vous obtenez un Redcoin !")
                                Player.nombre_de_red_coin += 1
                                Affichage.EntreePourContinuer()
                                print("Vous arrachez le redcoin de l'amulette, et la laissez couler au fond de l'eau, oubliée pour l'éternitée...")
                                print("...jusqu'a ce que l'anneau rentre en possession de quelqu'un d'autre.")
                                Affichage.EntreePourContinuer()
                            elif prise == "Artefact":
                                print("...et regardez avec intensité la petite boite noire qui y est pendue.")
                                Affichage.EntreePourContinuer()
                                print(f"Vous arrachez l'hameçon du bois dans lequel il était rentré...")
                                Affichage.EntreePourContinuer()
                                print("...et ouvrez la boite avec beaucoup d'anticipation.")
                                Affichage.EntreePourContinuer()
                                self.GiveRandomArtefact()
                                print("Incroyable Prise !\nMais comment une boite peut-elle donner autant de fil a retordre pour être remontée...?")
                                Affichage.EntreePourContinuer()
                        PlayMusicDeLetage()
                    elif choix == 2:
                        print("Vous n'avez jamais aimé la pêche de toute manière.")
                        Affichage.EntreePourContinuer()
                        break
            elif caracteristique_de_la_salle["type"] == "BRAZIER_VERT":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.brazier()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                liste_items_sacrifiables_total = LISTEITEM

                print("Vous avancez dans la salle, et découvrez un gigantesque brasero orné de pierres précieuses .")
                Affichage.EntreePourContinuer()
                print("Sur ses côtés sont gravés des symboles anciens, montrant des populations en position de prière autour d'un objet similaire, sur lequel semble bruler un objet.")
                Affichage.EntreePourContinuer()
                print("Sans vraiment savoir comment, vous savez exactement ce que vous pouvez y bruler.")
                Affichage.EntreePourContinuer()
                while True:
                    while True:
                        try:
                            if Player.flammes_verte != 0:
                                print("Un brasier de couleur vert danse dans le brasero.")
                            else:
                                print("Il n'y a plus de feu dans le brasero.")
                            print("\n1 - Faire une offrande")
                            print("2 - Partir")
                            choix = int(input("\nFaites votre choix avec les nombres : "))
                            ClearConsole()
                            if choix in [1, 2]:
                                break
                        except ValueError:
                            ClearConsole()
                    if choix == 1:
                        #faire la liste d'objet sacrifiable
                        liste_items_sacrifiables_possedes = []
                        for item in Player.items_possedes:
                            if ((item in liste_items_sacrifiables_total) and
                                (Player.items_possedes[item] > 0)):
                                liste_items_sacrifiables_possedes.append(item)

                        if Player.flammes_verte == 0:
                            print("Vous regardez les cendres remplissant désormais le brasero, et avez le sentiment que vous ne pouvez plus rien offrir.")
                            Affichage.EntreePourContinuer()
                        elif len(liste_items_sacrifiables_possedes) == 0:
                            print("Vous ne pouvez rien offrir de valeur ici.")
                            Affichage.EntreePourContinuer()
                        else :
                            while True:
                                try:
                                    print("     -= Offrandes =-")
                                    print("\n1 - Retour")
                                    numero = 2
                                    for item in liste_items_sacrifiables_possedes:
                                        print(f"{numero} - {item} [{Player.items_possedes[item]} dans la sacoche]")
                                        numero += 1
                                    choix = int(input("\nFaites votre choix avec les nombres : "))
                                    ClearConsole()
                                    if choix in range(1, (len(liste_items_sacrifiables_possedes) + 2)):
                                        break
                                except ValueError :
                                    ClearConsole()
                            if choix == 1:
                                pass
                            else:
                                item_choisi = liste_items_sacrifiables_possedes[(choix - 2)]
                                print(f"Vous jetez l'item [{item_choisi}] dans le brasero, et regardez les braises se disperser dans les airs.")
                                Affichage.EntreePourContinuer()
                                print("Au bout de quelques instant, un changement se produit dans votre corps.")
                                Affichage.EntreePourContinuer()
                                Player.flammes_verte -= 1
                                Player.items_possedes[item_choisi] -= 1
                                liste_recompense = LISTEITEMUPPGRADE[item_choisi]
                                for cle in liste_recompense:
                                    if cle == "Attaque":
                                        Player.points_de_force += liste_recompense[cle]
                                        commentaire = f"Vous gagnez {liste_recompense[cle]} points de force !"
                                    elif cle == "Defence":
                                        Player.points_de_defence += liste_recompense[cle]
                                        commentaire = f"Vous gagnez {liste_recompense[cle]} points de défence !"
                                    elif cle == "Intelligence":
                                        Player.points_dintelligence += liste_recompense[cle]
                                        commentaire = (
                                            f"Vous gagnez {liste_recompense[cle]} points d'intelligence !"
                                        )
                                    elif cle == "Vie":
                                        Player.points_de_vie_max += liste_recompense[cle]
                                        Player.points_de_vie += liste_recompense[cle]
                                        commentaire = (
                                            f"Vous gagnez {liste_recompense[cle]} points de vie maximum !"
                                        )
                                    elif cle == "Mana":
                                        Player.points_de_mana_max += liste_recompense[cle]
                                        Player.points_de_mana += liste_recompense[cle]
                                        commentaire = (
                                            f"Vous gagnez {liste_recompense[cle]} points de mana maximum !"
                                        )
                                    elif cle == "Endurance":
                                        Player.points_dendurance += liste_recompense[cle]
                                        commentaire = (
                                            f"Vous gagnez {liste_recompense[cle]} points d'endurance maximum !"
                                        )
                                    elif cle == "Taux coup critique":
                                        Player.taux_coup_critique += liste_recompense[cle]
                                        commentaire = f"Vous gagnez {liste_recompense[cle]}% de chance de faire un coup critique !"
                                    elif cle == "Degat coup critique":
                                        Player.degat_coup_critique += liste_recompense[cle]
                                        commentaire = f"Vous gagnez {liste_recompense[cle]} points de degats de coup critique !"
                                    elif cle == "Taux sort critique":
                                        Player.taux_sort_critique += liste_recompense[cle]
                                        commentaire = f"Vous gagnez {liste_recompense[cle]}% de chance de faire un sort critique !"
                                    elif cle == "Taux esquive":
                                        Player.taux_desquive += liste_recompense[cle]
                                        commentaire = (
                                            f"Vous gagnez {liste_recompense[cle]}% de chance d'esquiver !"
                                        )
                                    elif cle == "Degat sort critique":
                                        Player.degat_sort_critique += liste_recompense[cle]
                                        commentaire = f"Vous gagnez {liste_recompense[cle]} points de degats de sort critique !"
                                    elif cle == "Red coin":
                                        Player.nombre_de_red_coin += liste_recompense[cle]
                                        commentaire = f"{liste_recompense[cle]} Red Coin apparait dans votre poche !"
                                    print(commentaire)
                                Save.SaveTheGameSansAffichage()
                                Affichage.EntreePourContinuer()
                                print("Le feu se fait plus faible.")
                                Affichage.EntreePourContinuer()
                    elif choix == 2:
                        print("Vous regardez, pensif, le feu gravé dans le réceptacle, avant de partir.")
                        Affichage.EntreePourContinuer()
                        break
            elif caracteristique_de_la_salle["type"] == "BETE":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.bete()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous avancez dans la salle, et vous retrouvez devant une bien étrange scène.")
                Affichage.EntreePourContinuer()
                print("Ca et la, de grandes machines de métal ronronnent doucement, et affichent des nombres et mots dans une langue que vous ne comprenez pas.")
                print("Le sol est recouvert d'un métal blanc, percé a distance régulière par de petites lumières.")
                Affichage.EntreePourContinuer()
                print("Et au centre, trone une créature de chair et de kératine dans une capsule transparente.")
                Affichage.EntreePourContinuer()
                while True:
                    while True:
                        try:
                            print("La respiration de la créature est régulière, comme si elle était endormie.")
                            print("Devant la capsule, il y a une fente rectangulaire, affublée du mot *OPEN* en grosses lettres rouge.")
                            print("\n1 - Insérer quelque chose dans la fente")
                            print("2 - Partir")
                            choix = int(input("\nFaites votre choix avec les nombres : "))
                            ClearConsole()
                            if choix in [1, 2]:
                                break
                        except ValueError:
                            ClearConsole()
                    if choix == 1:
                        if "Carte de Sécurité" in Player.liste_dartefacts_optionels:
                            Player.liste_dartefacts_optionels.remove("Carte de Sécurité")
                            print("Vous insérez la Carte de Sécurité dans la fente, et la salle se retrouve plongée dans une obscurité percée seulement par la lumière rouge de quelques alarmes.")
                            Affichage.EntreePourContinuer()
                            print("Vous entendez un craquement sinistre, et la capsule transparente s'ouvre lentement.")
                            Affichage.EntreePourContinuer()
                            StopAllMusic()
                            print("Tout à coup, les alarmes éclatent et vous vous retrouvez plongé dans le noir.")
                            time.sleep(3)
                            ClearConsole()
                            print("Vous entendez un craquement.")
                            time.sleep(3)
                            ClearConsole()
                            print("Puis un autre.")
                            time.sleep(3)
                            ClearConsole()
                            print("Deux points verts apparaissent en face de vous.")
                            time.sleep(3)
                            ClearConsole()
                            print("Ils vous fixent intensément.")
                            time.sleep(3)
                            ClearConsole()
                            print("Vous sentez quelque chose de chaud sur votre visage.")
                            time.sleep(3)
                            ClearConsole()
                            print("Quelque chose est proche de vous.")
                            time.sleep(3)
                            ClearConsole()
                            print("Vous fermez les yeux, et attendez votre fin.")
                            time.sleep(6)
                            ClearConsole()
                            print("Mais rien ne vient.")
                            time.sleep(3)
                            ClearConsole()
                            PlayMusicDeLetage()
                            print("Quand vous rouvrez vos yeux, l'obscurité a laissé place a la fine lumière qui passe a travers la porte éventrée de la salle.")
                            Affichage.EntreePourContinuer()
                            print("Il n'y a plus rien dans la capsule.")
                            Affichage.EntreePourContinuer()
                            print("Vous gagnez l'artefact [Regard de la Bête] !")
                            print("La marque psychologique indélébile d'un prédateur sur sa proie. \nCe n'est pas vraiment un artefact, mais le stress a fait battre votre coeur tellement vite que vous gagnez 4 points d'endurance !")
                            FloorMaker.GiveRandomArtefact("Regard de la Bête","Don")
                            Player.points_dendurance += 4
                            Affichage.EntreePourContinuer()
                            # fait que l'event soit finit et ne peut ps etre relancé
                            caracteristique_de_la_salle["terminé par joueur"] = True
                            break
                        else:
                            print("Vous n'avez rien a insérer.")
                            Affichage.EntreePourContinuer()
                    elif choix == 2:
                        print("Vous quittez la salle tout droit tirée d'un film de science fiction.")
                        Affichage.EntreePourContinuer()
                        break
            elif caracteristique_de_la_salle["type"] == "ECLAIR":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.eclair()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous entrez dans une salle singulière, dont le sol est tapissé de terre fertile.")
                Affichage.EntreePourContinuer()
                print("Des armes de toute formes sont plantées dans la terre, que la rouille rend inutilisable.")
                Affichage.EntreePourContinuer()
                print("Au dessus, la vapeur d'eau est condensée en un grondant et tourbillonant nuage noir.")
                Affichage.EntreePourContinuer()
                while True:
                    try:
                        print("Une petite colline vous permet de vous approcher du nuage noir.")
                        print("\n1 - Monter sur la colline")
                        print("2 - Partir")
                        choix = int(input("\nFaites votre choix avec les nombres : "))
                        ClearConsole()
                        if choix in [1, 2]:
                            break
                    except ValueError:
                        ClearConsole()
                if choix == 1:
                    # fait que l'event soit finit et ne peut ps etre relancé
                    caracteristique_de_la_salle["terminé par joueur"] = True

                    #faire liste action evoluable
                    liste_action_qui_peut_evoluer = [
                        "Attaque Légère",
                        "Lance Rapide",
                        "Lance Statique",
                        "Lance Electrique",
                        "Lance de l'Eclair",
                        "Lance Foudroyante",
                        "Bô Chaud",  #
                        "Bô Brulant",  #
                        "Bô Enflammé",  #
                        "Bô de la Fournaise",
                        "Bô Magmatique",
                        "Katana Bleu",
                        "Katana Froid",
                        "Katana Givré",
                        "Katana Glacial",
                        "Katana Polaire",
                        "Corne Argile",  #
                        "Corne Lapis",  #
                        "Corne Granite",  #
                        "Corne Obsidienne",
                        "Corne de la Montagne",
                        "Poing Léger",  #
                        "Poing Renforcé",  #
                        "Poing Lourd",  #
                        "Poing Maitrisé",  #
                        "Poing Fatal",  #
                        "Dague Volevie",
                        "Dague Siphoneuse",
                        "Dague Vampirique",
                        "Dague Parasite",
                        "Dague Destructrice",
                        "Tir Arcanique",
                        "Faisceau Rapide",
                        "Faisceau Statique",
                        "Faisceau Electrique",
                        "Faisceau de l'Eclair",
                        "Faisceau Foudroyant",
                        "Thermosphère Chaude",
                        "Thermosphère Brulante",
                        "Thermosphère Enflammée",
                        "Thermosphère de la Fournaise",
                        "Thermosphère Magmatique",
                        "Pic Bleu",
                        "Pic Froid",
                        "Pic Givré",
                        "Pic Glacial",
                        "Pic Polaire",
                        "Création d'Argile",
                        "Création de Lapis",
                        "Création de Granite",
                        "Création Obsidienne",
                        "Création de la Montagne",
                        "Explosion Légère",
                        "Explosion Renforcée",
                        "Explosion Lourde",
                        "Explosion Maitrisée",
                        "Explosion Fatale",
                        "Dance Volevie",
                        "Dance Siphoneuse",
                        "Dance Vampirique",
                        "Dance Parasite",
                        "Dance Destructrice",
                        "Sonata Pitoyable",  # 3% ou 8pv
                        "Sonata Miséricordieuse",  # 5% ou 15pv
                        "Sonata Empathique",  # 12% ou 20pv
                        "Sonata Sincère",  # 17% ou 25pv
                        "Sonata Bienveillante",  # 20% ou 33pv
                        ]
                    liste_action_en_possession = []
                    for action in Player.techniques_possedes:
                        if action in liste_action_qui_peut_evoluer:
                            liste_action_en_possession.append(action)
                    for action in Player.sorts_possedes:
                        if action in liste_action_qui_peut_evoluer:
                            liste_action_en_possession.append(action)

                    #prendre action au pif
                    if len(liste_action_en_possession) == 0:
                        Player.nombre_de_monstres_tues += 20
                        uppgrade_impossible = True
                    else:
                        uppgrade_impossible = False
                        nombre_aleatoire = random.randint(0, (len(liste_action_en_possession) - 1))
                        nom_action_a_evoluer = liste_action_en_possession[nombre_aleatoire]

                    #trouver son evolution
                    if nom_action_a_evoluer == "Attaque Légère":
                        nom_nouvelle_action = "Attaque Lourde"
                        description = "La technique"
                        Player.techniques_possedes.remove(nom_action_a_evoluer)
                        Player.techniques_possedes.append(nom_nouvelle_action)
                    elif nom_action_a_evoluer == "Tir Arcanique":
                        description = "Le sort"
                        nom_nouvelle_action = "Missile Arcanique"
                        Player.sorts_possedes.remove(nom_action_a_evoluer)
                        Player.sorts_possedes.append(nom_nouvelle_action)
                    elif nom_action_a_evoluer in LISTETECHNIQUES:
                        position_de_laction = LISTETECHNIQUES.index(nom_action_a_evoluer)
                        nom_nouvelle_action = LISTETECHNIQUES[position_de_laction + 1]
                        description = "La technique"
                        Player.techniques_possedes.remove(nom_action_a_evoluer)
                        Player.techniques_possedes.append(nom_nouvelle_action)
                    elif nom_action_a_evoluer in LISTESORTS:
                        position_de_laction = LISTESORTS.index(nom_action_a_evoluer)
                        nom_nouvelle_action = LISTESORTS[position_de_laction + 1]
                        description = "Le sort"
                        Player.sorts_possedes.remove(nom_action_a_evoluer)
                        Player.sorts_possedes.append(nom_nouvelle_action)


                    print("Alors que vous vous approchez du nuage, la verdure se fait de plus en plus rare, jusqu'a ce que vos pas s'enfoncent dans un sol sec et aride.")
                    print("Vous continuez de vous avancer, utilisant les différentes lames pour vous hisser sur le sommet de la colline.")
                    Affichage.EntreePourContinuer()
                    print("Enfin, vous arrivez tout en haut, haletant.")
                    Affichage.EntreePourContinuer()
                    print("Vous sentez alors l'orage gronder, et vos cheveux se hissent sur votre crane !")
                    print("Vous levez Zeroual dans un geste de défence, et sentez un éclair surpuissant le traverser une seconde plus tard !")
                    Affichage.EntreePourContinuer()
                    print("L'impact vous projette au sol, et vous dévalez la face de la colline en brisant au passage les fragiles lames de métal !")
                    Affichage.EntreePourContinuer()
                    print("Alors que vous vous relevez, vous voyez le nuage disparaitre, et Zeroual briller d'une manière étrange.")
                    Affichage.EntreePourContinuer()
                    Save.SaveTheGameSansAffichage()
                    if uppgrade_impossible:
                        print("Zeroual a absorbé l'équivalent de 20 nouvelles âmes !")
                    else:
                        print(f"{description} [{nom_action_a_evoluer}] devient [{nom_nouvelle_action}] !")
                    Affichage.EntreePourContinuer()
                    print("Vous tournez le dos à l'étrange colline et repartez d'ou vous venez.")
                    Affichage.EntreePourContinuer()
                elif choix == 2:
                    print("Vous laissez votre regard se perdre dans le faux ciel peint au plafond...et sortez de la salle.")
                    Affichage.EntreePourContinuer()  
            elif caracteristique_de_la_salle["type"] == "DISTRIBUTEUR":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.machine()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous trouvez un méchanisme ancien !")
                Affichage.EntreePourContinuer()
                print("C'est...")
                Affichage.EntreePourContinuer()
                print("...un distributeur !")
                Affichage.EntreePourContinuer()
                while True:
                    while True:
                        try:
                            print("Vous pouvez voir une fente pour inserer de l'argent, et une jolie sélection d'artefacts derrière la vitre.")
                            print("Un avertissement écrit en petit caractères prévient de la casse (presque) inévitable des artefacts présents a chaque changement d'étage.")
                            print(f"Vous avez {Player.nombre_de_gold} golds sur vous.")
                            print(f"\n1 - Acheter [Epée de Damocles] pour {Player.numero_de_letage * 30} golds") #15 % de dmg, 2% chance que ca brise et fasse 15% vie
                            print(f"2 - Acheter [Morceau d'Ether Fragile] pour {Player.numero_de_letage * 30} golds") #15 % de sorts, 2% chance que ca brise et vide toute mana
                            print(f"3 - Acheter [Eau Bénite] pour {Player.numero_de_letage * 60} golds") #5% chance d'etre béni pas tour
                            print(f"4 - Acheter [Bandeau Catharsis] pour {Player.numero_de_letage * 45} golds") #5% cahnce esquive, prend 10% degat en plus
                            print(f"5 - Acheter [Charbon Primordial] pour {Player.numero_de_letage * 50} golds") #+1 tour de brulure
                            print(f"6 - Acheter [Saphir de Gel] pour {Player.numero_de_letage * 50} golds") #+1 tour de gel
                            print(f"7 - Acheter [Fossile Figé] pour {Player.numero_de_letage * 50} golds") #+5% chance de faire lapidation
                            print(f"8 - Acheter [Fiole des Eclairs] pour {Player.numero_de_letage * 50} golds") #+5% chance de faire paralysie
                            print(f"9 - Acheter [Assurance Distributeur] pour {Player.numero_de_letage * 50} golds") #+garde les items 1 etage supplementaire
                            print("10 - Partir")
                            choix = int(input("\nFaites votre choix avec les nombres : "))
                            ClearConsole()
                            if choix in range(1, 11):
                                break
                        except ValueError:
                            ClearConsole()
                    if choix == 10:
                        print("Vous laissez le distributeur, non sans tenter de trouver des golds en dessous (Il n'y en avait pas).")
                        Affichage.EntreePourContinuer()
                        break
                    else:
                        dictionaire_item_distributeur = {1 : {"Nom" : "Epée de Damocles", "Prix" : (Player.numero_de_letage * 30), "Description" : "Une épée suintant l'anxiété, ayant appartenue a un ancien roi.\nLes dégâts de vos techniques augmentent de 25%, mais il y a une faible probabilité que l'artefact vous tombe dessus, se brisant sur votre crane et vous infligeant de lourds dégâts."},
                                                         2 : {"Nom" : "Morceau d'Ether Fragile", "Prix" : (Player.numero_de_letage * 30), "Description" : "Un catalyste pour les sorts très fragile, extrait directement de la fabrique de la réalité.\nLes dégâts de vos sorts augmentent de 25%, mais il y a une faible probabilité que l'artefact se brise spontanément, vous vidant alors de tout vos points de mana."},
                                                         3 : {"Nom" : "Eau Bénite", "Prix" : (Player.numero_de_letage * 60), "Description" : "Une fiole légendaire devant laquelle des papes dévoués ont prié jours et nuits pendant 50 ans d'affilée.\nVous avez une faible chance d'être béni par le Feu Divin à la fin de chaque tours."},
                                                         4 : {"Nom" : "Bandeau Catharsis", "Prix" : (Player.numero_de_letage * 45), "Description" : "Un bandeau magique a se mettre devant les yeux, afin d'affuter les sens.\nVos chances d'esquive augmentent, ainsi que les dégats que l'on vous inflige."},
                                                         5 : {"Nom" : "Charbon Primordial", "Prix" : (Player.numero_de_letage * 50), "Description" : "Un reste du tout premier feu de bois, enseigné par Promethée aux humains.\nL'effet Brulure que vous infligez dure 1 tour de plus."},
                                                         6 : {"Nom" : "Saphir de Gel", "Prix" : (Player.numero_de_letage * 50), "Description" : "La culmination de millénaires de pression par la neige sur un morceau de neige du tout premier age glaciaire .\nL'effet Gel que vous infligez dure 1 tour de plus."},
                                                         7 : {"Nom" : "Fossile Figé", "Prix" : (Player.numero_de_letage * 50), "Description" : "Le fossile d'un animal rare vivant il y a des millions d'années de ca, débordant de vitalité, que seul le processus de diagénèse autour de lui a su arrêter.\nL'effet Lapidation a un peu plus de chance de réussir."},
                                                         8 : {"Nom" : "Fiole des Eclairs", "Prix" : (Player.numero_de_letage * 50), "Description" : "Un des éclairs de Zeus, jalousement gardé par un humain qui avait réussi a l'enfermer dans une amphore vide de vin, que le dieu de la foudre à oublié sur terre lors de sa dernière échappée avec la femme de l'humain en question.\nL'effet Paralysie a un peu plus de chance de réussir.  "},
                                                         9 : {"Nom" : "Assurance Distributeur", "Prix" : (Player.numero_de_letage * 50), "Description" : "Un bout de papier assurant a son porteur que les artefacts qu'il a acheté au distributeur ne se briseront pas pour 1 changement d'étage.\nVous pouvez en acheter plusieurs bien sur !"}}
                        item_choisi = dictionaire_item_distributeur[choix]
                        if Player.nombre_de_gold < item_choisi["Prix"]:
                            print("Vous n'avez pas assez d'argent !")
                            Affichage.EntreePourContinuer()
                        else:
                            Player.nombre_de_gold -= item_choisi["Prix"]
                            FloorMaker.GiveRandomArtefact(item_choisi["Nom"],"Don")
                            print("Vous inserez l'argent dans la machine, tapez le code sur le clavier numérique, et patientez quelques instants.")
                            time.sleep(10)
                            Affichage.EntreePourContinuer()
                            print("L'artefact tombe enfin dans la chute, et vous pouvez le récuperer.")
                            Affichage.EntreePourContinuer()
                            print(f"Vous obtenez l'artefact [{item_choisi['Nom']}] !")
                            print(item_choisi["Description"])
                            Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "CHENIL":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.machine()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous trouvez un méchanisme ancien !")
                Affichage.EntreePourContinuer()
                print("C'est...")
                Affichage.EntreePourContinuer()
                print("...une jolie niche rose fermée !")
                Affichage.EntreePourContinuer()
                while True:
                    try:
                        print("Vous pouvez voir une fente pour inserer de l'argent, et un panneau juste en dessous lit :\n* CHIEN AUTONOME de NACRE ININFLAMMABLE GARDANT et OBEISSANT son UTILISATEUR : 100 golds *")
                        print("\n1 - Mettre les golds dans la fente")
                        print("2 - Partir")
                        choix = int(input("\nFaites votre choix avec les nombres : "))
                        ClearConsole()
                        if choix in [1, 2]:
                            break
                    except ValueError:
                        ClearConsole()
                if choix == 2:
                    print("Vous pensez a votre bourse et refusez cet achat compulsif.")
                    Affichage.EntreePourContinuer()
                elif choix == 1:
                    if Player.nombre_de_gold >= 100:
                        print("Vous pensez a votre bourse et vous indulgez dans cet achat compulsif.")
                        Affichage.EntreePourContinuer()
                        print("Au bout du 100eme goold inséré, la porte de la niche s'ouvre et un chien bionique en sort !")
                        Affichage.EntreePourContinuer()
                        print("Ce dernier, relié a un tuyau greffé dans son cou, ouvre doucement les yeux et vous regarde d'un air exalté !")
                        Affichage.EntreePourContinuer()
                        print("Alors qu'il se frotte a vos jambes et a votre main, vous le décrochez de sa station de vie artificielle et trouvez un collier contenant son nom en lettres manuscriptes :")
                        Affichage.EntreePourContinuer()
                        print("C.A.N.I.G.O.U.")
                        Affichage.EntreePourContinuer()
                        print("Vous obtenez Canigou !")
                        print("Ce chien a moitié cyborg fait des dégâts a vos ennemis a chaque fin de tour !")
                        Player.nombre_de_gold -= 100
                        FloorMaker.GiveRandomArtefact("Canigou","Don")
                        Affichage.EntreePourContinuer()
                        print("Vous sortez de la salle avec votre nouveau compagnon.")
                        Affichage.EntreePourContinuer()
                        # fait que l'event soit finit et ne peut ps etre relancé
                        caracteristique_de_la_salle["terminé par joueur"] = True
                    else:
                        print("Vous regardez votre bourse avec insistance, mais aucun gold supplémentaire n'apparait.")
                        Affichage.EntreePourContinuer()
                        print("Décu, vous tournez les talons et sortez de la salle.")
                        Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "BUFFET":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.machine()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous trouvez un méchanisme ancien !")
                Affichage.EntreePourContinuer()
                print("C'est...")
                Affichage.EntreePourContinuer()
                print("...un buffet a volonté !")
                Affichage.EntreePourContinuer()
                print("Ou plutot un faux buffet, vu que toute la nourriture est faite de plastique.")
                Affichage.EntreePourContinuer()
                while True:
                    try:
                        print("Au centre de la table, une réplique de la corne d'abondance semble attirer votre regard.")
                        print("\n1 - Mettre votre main dans la corne")
                        print("2 - Partir")
                        choix = int(input("\nFaites votre choix avec les nombres : "))
                        ClearConsole()
                        if choix in [1, 2]:
                            break
                    except ValueError:
                        ClearConsole()
                if choix == 2:
                    print("Vous laissez la scène en place et repartez, une petite faim commencant a pointer le bout de son nez.")
                    Affichage.EntreePourContinuer()
                elif choix == 1:
                    print("Vous plongez votre main dans la corne d'abondance, et sentez votre énergie diminuer.")
                    print("Vous perdez 10 points de vie et de mana max !")
                    Affichage.EntreePourContinuer()
                    print("Cepandant, vous arrivez à ressortir de la corne une suite d'objets aléatoires, accrochés les uns aux autres par un fil de laine rouge.")
                    Affichage.EntreePourContinuer()
                    liste_ditem_possibles = LISTEITEM
                    liste_ditem_possibles.append("Redcoin")
                    liste_ditem_recus = []
                    for _ in range (1,6):
                        nom_de_litem = GetRandomItemFromList(liste_ditem_possibles)
                        if nom_de_litem == "Redcoin":
                            Player.nombre_de_red_coin += 1
                        else:
                            Player.items_possedes[nom_de_litem] += 1
                        liste_ditem_recus.append(nom_de_litem)
                    print(f"Vous obtenez les objets {liste_ditem_recus} !")
                    Affichage.EntreePourContinuer()
                    print("La corne se brise alors subitement, et la nourriture sur la table semble pourrir de manière accélérée.")
                    Affichage.EntreePourContinuer()
                    # fait que l'event soit finit et ne peut ps etre relancé
                    caracteristique_de_la_salle["terminé par joueur"] = True
                    Player.points_de_mana_max -= 10
                    if Player.points_de_mana_max < 0 :
                        Player.points_de_mana_max = 0
                    if Player.points_de_mana > Player.points_de_mana_max :
                        Player.points_de_mana == Player.points_de_mana_max
                    Player.points_de_vie_max -= 10
                    if Player.points_de_vie_max < 1 :
                        Player.points_de_vie_max = 1
                    if Player.points_de_vie > Player.points_de_vie_max :
                        Player.points_de_vie == Player.points_de_vie_max        
            elif caracteristique_de_la_salle["type"] == "SPAWNER":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.machine()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous trouvez un méchanisme ancien !")
                Affichage.EntreePourContinuer()
                print("C'est...")
                Affichage.EntreePourContinuer()
                print("...difficile à décrire...")
                Affichage.EntreePourContinuer()
                print("On dirait une cage de métal dans laquelle dansent des flammes.\nIl y a une fente dessus, et vous sentez les âmes absorbées par Zeroual réagir au méchanisme.")
                Affichage.EntreePourContinuer()
                while True:
                    while True:
                        try:
                            print(f"Vous pouvez dépenser une partie de vos {Player.nombre_de_monstres_tues} âmes pour faire... quelque chose ?")
                            print("\n1 - Dépenser 5 âmes")
                            print("2 - Dépenser 12 âmes")
                            print("3 - Dépenser 20 âmes")
                            print("4 - Partir")
                            choix = int(input("\nFaites votre choix avec les nombres : "))
                            ClearConsole()
                            if choix in range(1, 5):
                                break
                        except ValueError:
                            ClearConsole()
                    if ((choix == 1 and Player.nombre_de_monstres_tues >= 5) or 
                        (choix == 2 and Player.nombre_de_monstres_tues >= 12) or 
                        (choix == 3 and Player.nombre_de_monstres_tues >= 20)):
                        if choix == 1 :
                            Player.nombre_de_monstres_tues -= 5
                            Player.nombre_dennemis_a_letage += 5
                        elif choix == 2 :
                            Player.nombre_dennemis_a_letage += 10
                            Player.nombre_de_monstres_tues -= 12 
                        elif choix == 3 :
                            Player.nombre_dennemis_a_letage += 17
                            Player.nombre_de_monstres_tues -= 20
                        print("Vous approchez Zeroual de la fente, et l'arme prend la forme d'une clé a motif de crâne.")
                        print("Vous insérez la clé dans la fente et...")
                        Affichage.EntreePourContinuer()
                        print("...vous la tournez.")
                        Affichage.EntreePourContinuer()
                        print("Vous sentez quelque chose sortir de Zeroual, et rejoindre les flammes a l'interieur de la cage.")
                        print("Dans le plus grand des silences, la cage s'ouvre de tout les côtés, comme un cube de papier pour laquelle la colle n'aurait pas tenue, et les flammes sortent de la salle en virevoltant !")
                        Affichage.EntreePourContinuer()
                        print("Une idée résonne alors dans votre esprit, comme induite par Zeroual :")
                        Affichage.EntreePourContinuer()
                        print("*ARENE*")
                        Affichage.EntreePourContinuer()
                        # fait que l'event soit finit et ne peut ps etre relancé
                        caracteristique_de_la_salle["terminé par joueur"] = True
                        break
                    elif choix == 4:
                        print("Vous regardez, comme hypnotisé, la danse magestueuse des flammes dans la cage, et décidez de vous en aller.")
                        Affichage.EntreePourContinuer()
                        break
                    else:
                        print("Vous approchez Zeroual de la fente, et l'arme prend la forme d'une clé a motif de crâne.")
                        print("Vous insérez la clef dans la fente et...")
                        Affichage.EntreePourContinuer()
                        print("...rien ne se passe.")
                        Affichage.EntreePourContinuer()
                        print("On dirait que vous n'aviez pas assez d'âmes.")
                        Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "LEVIER":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.machine()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                print("Vous trouvez un méchanisme ancien !")
                Affichage.EntreePourContinuer()
                print("C'est...")
                Affichage.EntreePourContinuer()
                print("...un levier !")
                Affichage.EntreePourContinuer()
                print("Littéralement.\nUn simple levier placé au centre de la salle, sur un piedestal de verre.")
                Affichage.EntreePourContinuer()
                while True:
                    try:
                        print("Tout peut arriver.")
                        print("\n1 - Tirer le levier")
                        print("2 - Partir")
                        choix = int(input("\nFaites votre choix avec les nombres : "))
                        ClearConsole()
                        if choix in [1, 2]:
                            break
                    except ValueError:
                        ClearConsole()
                if choix == 2:
                    print("Il n'y a aucune raison de tirer ce levier suspicieux.\nVraiment.\nAucune.\nEn plus c'est surement un piège.")
                    Affichage.EntreePourContinuer()
                    print("Vous laissez ce levier tranquille, rempli de cette assurance sur vos choix et actions, vous sentant intelligent comme personne !")
                    Affichage.EntreePourContinuer()
                    print("Et si vous aviez tiré le levier ?\nVous auriez pu avoir tant de choses...\nPlus tard, sur votre lit de mort, c'est la dernière pensée qui traversera votre esprit.")
                    Affichage.EntreePourContinuer()
                    print("Ou pas ?\nQui sait.\nPas vous en tout cas, vu que vous n'avez pas tiré le levier.")
                    Affichage.EntreePourContinuer()
                if choix == 1:
                    print("Vous avancez gaiement, sautillant de pas en pas, jusqu'à atteindre le magnifique et tentateur levier au milieu de la salle.")
                    Affichage.EntreePourContinuer()
                    print("Qui sait ce qui se serait passé si vous ne l'aviez pas tiré ?\nVous l'auriez sans doute regretté sur votre lit de mort.")
                    Affichage.EntreePourContinuer()
                    print("Ou pas ?\nQui sait.\nPas vous en tout cas, vu que vous allez tirer le levier !")
                    Affichage.EntreePourContinuer()
                    print("Vous posez fermement vos mains sur le levier, tirez dessus, et...")
                    Affichage.EntreePourContinuer()
                    effet_aleatoire = random.randint(1, 10)
                    if effet_aleatoire == 1 :
                        print("...rien ne se passe.")
                        Affichage.EntreePourContinuer()
                        print("C'est vraiment nul.")
                        Affichage.EntreePourContinuer()
                    elif effet_aleatoire == 2:
                        print("...le sol s'ouvre sous vos pieds !\nCa devait être le mauvais levier !")
                        Affichage.EntreePourContinuer()
                        print("Vous tombez dans le trou béant, glissez sur la pierre fraiche pendant une vingtaine de minute, et atterissez...")
                        Affichage.EntreePourContinuer()
                        print("...au centre de l'arène !")
                        Player.position_x = 0
                        Player.position_y = 0
                        Player.numero_de_la_salle = 1
                        self.UpdatePlayerPosition()
                        Affichage.EntreePourContinuer()
                    elif effet_aleatoire == 3:
                        print("...un monstre de niveau superieur apparait !")
                        Affichage.EntreePourContinuer()
                        Player.player_tags.append("Monstre De Niveau Superieur")
                        control = controleur.Control(Player, Trader, FloorMaker, Sove)
                        # lance la bataille
                        try:
                            CHANNELMUSIQUEDEBASE.set_volume(0)
                            time.sleep(0.01)
                            CHANNELMUSIQUEDEBASE.stop()
                            control.Battle()
                            StopAllMusic()
                        except Exception as error:
                            WriteErrorInErrorLog(error)
                        Player.player_tags.remove("Monstre De Niveau Superieur")
                        PlayMusicDeLetage()
                    elif effet_aleatoire == 4:
                        print(
                            "...des arbalètes sournoises, cachées dans les murs, vous criblent de flèches !"
                        )
                        Affichage.EntreePourContinuer()
                        if not ("Sabre du Roi de Glace" in Player.liste_dartefacts_optionels):
                            degat = round(Player.points_de_vie_max * 0.33)
                            Player.points_de_vie -= degat
                            print(f"Vous perdez {degat} points de vie.")
                            Affichage.EntreePourContinuer()
                            if Player.points_de_vie <= 0:
                                StopAllMusic()
                                PlaySound("death")
                                print("Vous échouez a stopper le saignement, et perdez la vie.")
                                Affichage.EntreePourContinuer()
                                Player.player_tags.append("KIA")
                                CheckForKIA()
                        else:
                            print("Cepandant, des éclats de glace se forment aux endroits ou les flèches auraient du se planter.")
                            Affichage.EntreePourContinuer()
                    elif effet_aleatoire == 5:
                        print("...un petit coffre tombe du plafond et rebondit sur le sol !")
                        Affichage.EntreePourContinuer()
                        print("Enfin, sur votre tête, puis sur le sol.")
                        Affichage.EntreePourContinuer()
                        nom_de_litem = GetRandomItemFromList(LISTEITEM)
                        Player.items_possedes[nom_de_litem] += 1
                        print(f"A l'interieur, vous trouvez l'objet {nom_de_litem}")
                        Affichage.EntreePourContinuer()
                    elif effet_aleatoire == 6:
                        print("...rien ne se passe.")
                        Affichage.EntreePourContinuer()
                        print("C'est vraiment nul.")
                        Affichage.EntreePourContinuer()
                        print("Au moment ou vous tournez le dos au méchanisme, vous voyez une figure fantomatique s'approcher de vous !")
                        Affichage.EntreePourContinuer()
                        print("La chose porte un casque de chantier jaune, un pantalon bleu a bretelle, et un visage pâle et fatigué.")
                        Affichage.EntreePourContinuer()
                        print("*Ouai, ouai, je sais.*")
                        Affichage.EntreePourContinuer()
                        print("L'ingénieur se rapproche de vous et vous tend quelque chose.")
                        print("*C'était sensé faire tomber des araignées du plafond, mais, héhé, elles sont toutes mortes. Prend ca comme compensation.*")
                        Affichage.EntreePourContinuer()
                        print("Vous obtenez un Redcoin !")
                        Affichage.EntreePourContinuer()
                        print("Aussitot, un souffle de vent vous pousse en dehors de la salle.")
                        print("*Fiche moi le camp pronto, j'ai un truc à réparer.*")
                        Affichage.EntreePourContinuer()
                    elif effet_aleatoire == 7:
                        print("...une petite boite noire se materialise *dans* le piedestal !")
                        print("Vous brisez le verre pour récuperer la boite, et l'ouvrez.")
                        Affichage.EntreePourContinuer()
                        self.GiveRandomArtefact()
                    elif effet_aleatoire == 8:
                        print("...un monstre apparait !")
                        Affichage.EntreePourContinuer()
                        control = controleur.Control(Player, Trader, FloorMaker, Sove)
                        # lance la bataille
                        try:
                            CHANNELMUSIQUEDEBASE.set_volume(0)
                            time.sleep(0.01)
                            CHANNELMUSIQUEDEBASE.stop()
                            control.Battle()
                            StopAllMusic()
                        except Exception as error:
                            WriteErrorInErrorLog(error)
                        PlayMusicDeLetage()
                    elif effet_aleatoire == 9:
                        print("...un orbe bleu apparait !")
                        print("Il flotte jusqu'à vous, et rentre dans votre poitrine.")
                        Affichage.EntreePourContinuer()
                        print("Vous gagnez 7 points de vie/mana max !")
                        Player.points_de_vie_max += 7
                        Player.points_de_mana_max += 7
                        Affichage.EntreePourContinuer()
                    elif effet_aleatoire == 10:
                        print("...vous entendez le son caractéristique d'une mèche d'explosif qui s'allume !")
                        print("Vous sortez de la salle en courant, et bientot cette dernière disparait dans l'explosion d'une ccentaine de paquets de tnt !")
                        print("Pris dans l'explosion, vous êtes projetés de plusieurs mètres en avant dans un mur, laissant sur ce dernier une indentation en forme de vous !")
                        if not ("Sabre du Roi de Glace" in Player.liste_dartefacts_optionels):
                            degat = round(Player.points_de_vie_max * 0.66)
                            Player.points_de_vie -= degat
                            print(f"Vous perdez {degat} points de vie.")
                            Affichage.EntreePourContinuer()
                            if Player.points_de_vie <= 0:
                                StopAllMusic()
                                PlaySound("death")
                                print("Vous ne vous releverez jamais de cette explosion.")
                                Affichage.EntreePourContinuer()
                                Player.player_tags.append("KIA")
                                CheckForKIA()
                        else:
                            print("Cepandant, alors que vous vous relevez, vous vous rendez compte que votre corps tout entier était recouvert d'une épaisse armure de glace qui a absorbé le choc.")
                            Affichage.EntreePourContinuer()
                    if not "Fantome" in Player.player_tags:
                        print("Au final, est ce que ca valait le coup de tirer le levier ?")
                        Affichage.EntreePourContinuer()
                        print("Seul vous peut en décider.")
                        Affichage.EntreePourContinuer()
                    # fait que l'event soit finit et ne peut ps etre relancé
                    caracteristique_de_la_salle["terminé par joueur"] = True
            elif caracteristique_de_la_salle["type"] == "BOSS":
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    print("Vous rentrez dans une salle bien plus grande que d'habitude, tapissée de verdure et d'arbres, comme si vous étiez dehors, et...")
                    Affichage.EntreePourContinuer()
                    print("...")
                    Affichage.EntreePourContinuer()
                    print("...")
                    Affichage.EntreePourContinuer()
                    print("Il y a une cascade.")
                    Affichage.EntreePourContinuer()
                    print("...")
                    Affichage.EntreePourContinuer()
                    print("...")
                    Affichage.EntreePourContinuer()
                    print("Vous allez bien evidemment derrière la cascade.")
                    Affichage.EntreePourContinuer()
                    Draw.boss()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True
                print("Vous trouvez une porte de pierre taillée derrière une cascade.")
                Affichage.EntreePourContinuer()
                print("Vous pouvez y voir des symboles différents dans des cercles de pierre, tous reliés a un cercle plus grand, en hauteur.")
                Affichage.EntreePourContinuer()
                print("En dessous, 50 emplacements de taille bien plus petite, ressemblant a des redcoins.")
                Affichage.EntreePourContinuer()
                donnees_de_s0ve = Observation.GetPermanentThingsFromS0ve() 
                redcoins_inseres = ast.literal_eval(donnees_de_s0ve["Redcoins Inseres"])

                while True:
                    while True:
                        try:
                            print(f"{redcoins_inseres} redcoins sont dans leurs emplacements.")
                            if ((redcoins_inseres == 50 and Player.nom_du_personnage == "Terah")
                                or
                                Player.death_divinity
                            ):
                                print("La porte est ouverte.")
                                print("\n1 - Passer la porte.")
                            else:
                                print("La porte est fermée.")
                                print(f"\n1 - Poser tout les redcoins dans leurs emplacements [{Player.nombre_de_red_coin}]")
                            print("2 - Observer la porte")
                            print("3 - Partir")
                            choix = int(input("\nFaire votre choix avec les nombres : "))
                            ClearConsole()
                            if choix in range(1, 4):
                                break
                        except ValueError:
                            ClearConsole()
                    if choix == 3:
                        print("Vous laissez la porte et retournez sur vos pas.")
                        Affichage.EntreePourContinuer()
                        break
                    elif choix == 2:
                        Ending.PrintEtEntreePourContinuer("Vous regardez les symboles de plus près :")
                        Ending.PrintEtEntreePourContinuer("Un nuage de fumée s'échappant d'un personnage fou.")
                        Ending.PrintEtEntreePourContinuer("Une petite cane de pharaon entourée de 2 totems.")
                        Ending.PrintEtEntreePourContinuer("Un couteau de cuisine.")
                        Ending.PrintEtEntreePourContinuer("Un gluant avec une couronne.")
                        Ending.PrintEtEntreePourContinuer("Une hache prise dans la glace.")
                        Ending.PrintEtEntreePourContinuer("Une figure encapuchonnée.")
                        Ending.PrintEtEntreePourContinuer("Un personnage entouré de 4 autres.")
                        Ending.PrintEtEntreePourContinuer("Un personnage similaire, avec un sourire sanguinaire.")
                        Ending.PrintEtEntreePourContinuer("Une boule sur laquelle se trouve plusieurs visages en peine.")
                        Ending.PrintEtEntreePourContinuer("Et ces symboles sont relié a un grand levé/couché de soleil surmonté de vagues.")
                        Ending.PrintEtEntreePourContinuer("?")
                        Ending.PrintEtEntreePourContinuer("Vous pouvez voir, dans un coin de la porte, un message gravé a la hate :")
                        Ending.PrintEtEntreePourContinuer("*Entend ma voix, enfant maudit.*")
                    elif choix == 1:
                        if (redcoins_inseres == 50 and Player.nom_du_personnage == "Terah") or Player.death_divinity:
                            while True:
                                while True:
                                    try:
                                        print("Êtes vous sûr ?\n(La difficultée augmente drastiquement, et vous ne pourrez pas revenir en arrière.)")
                                        print("\n1 - Oui")
                                        print("2 - Non")
                                        choix = int(input("Faites votre choix avec les nombres : "))
                                        ClearConsole()
                                        if choix in [1, 2]:
                                            break
                                    except ValueError:
                                        ClearConsole()
                                if choix == 1:
                                    Player.position_x = 0
                                    Player.position_y = 0
                                    self.UpdatePlayerPosition()
                                    Player.numero_de_la_salle = 1
                                    Player.etage_alternatif = True
                                    Player.numero_de_letage -= 1
                                    Player.player_tags.append("Passe La Porte Redcoin")
                                    DoBossOrGoDown()
                                    break
                                else:
                                    break
                            if "Passe La Porte Redcoin" in Player.player_tags :
                                break
                        elif redcoins_inseres != 50:
                            redcoins_inseres += Player.nombre_de_red_coin
                            if redcoins_inseres > 50:
                                redcoins_inseres = 50
                            

                            donnees_de_s0ve["Redcoins Inseres"] = redcoins_inseres
                            Observation.SetPermanentThingsToS0ve(donnees_de_s0ve)
                            

                            print(f"Vous posez {Player.nombre_de_red_coin} redcoins dans les emplacements.")
                            Player.nombre_de_red_coin = 0
                            Save.SaveTheGameSansAffichage()
                            Affichage.EntreePourContinuer()

                        else:
                            print("Les redcoins sont déja tous placés.")
                            Affichage.EntreePourContinuer()
                    if "Passe La Porte Redcoin" in Player.player_tags :
                        break
            elif caracteristique_de_la_salle["type"] == "RITUEL":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.rituel()
                    self.UseMonocleDeVerite()
                    caracteristique_de_la_salle["marqué sur la carte"] = True

                if not "Griffes du Démon" in Player.techniques_possedes:
                    print("Vous trouvez un autel de pierre tailladée, sur lequel repose un gobelet doré.")
                    print("Alors que vous prenez le gobelet dans vos mains, vous entendez une voix résonner dans votre tête :")
                    Affichage.EntreePourContinuer()
                    print("*Met en jeu ton âme.*")
                    print("*Exécute avec les mains de l'Innomable.*")
                    print("*J'ornerais ton corps avec celui des morts.*")
                    Affichage.EntreePourContinuer()
                    print("...")
                    Affichage.EntreePourContinuer()
                    print("Le gobelet se remplit de #???!!## .")
                    Affichage.EntreePourContinuer()
                    while True:
                        try:
                            print("Boire le contenu du gobelet ?")
                            print("\n1 - Oui")
                            print("2 - Non")
                            choix = int(
                            input("\nChoisissez votre action avec les nombres : ")
                            )
                            ClearConsole()
                            if choix in [1, 2]:
                                break
                        except ValueError:
                            ClearConsole()
                    if choix == 1:
                        print("Vous avalez le contenu du gobelet.")
                        print("Votre main devient plus sombre, et une énergie noire sort de vos ongles.")
                        Affichage.EntreePourContinuer()
                        print("Vous apprenez la technique [Griffes du Démon] !")
                        Player.techniques_possedes.append("Griffes du Démon")
                        Affichage.EntreePourContinuer()
                        if "Syra" in Player.liste_dartefacts_optionels:
                            print("Grace au verre de Syra que vous avez bu, vous gagnez aussi 10 pm max !")
                            Player.points_de_mana += 10
                            Player.points_de_mana_max += 10
                            Affichage.EntreePourContinuer()
                        print("Vous sentez quelque chose fretiller dans votre abdomen, puis planter ses griffes dans les parois de votre estomac.")
                        Affichage.EntreePourContinuer()
                        print("Vous perdez 20 points de vie et mana max !")
                        Player.points_de_vie_max -= 20
                        if Player.points_de_vie_max <= 0:
                            Player.points_de_vie_max = 1
                        if Player.points_de_vie > Player.points_de_vie_max:
                            Player.points_de_vie = Player.points_de_vie_max
                        Player.points_de_mana_max -= 20
                        if Player.points_de_mana_max <= 0:
                            Player.points_de_mana_max = 1
                        if Player.points_de_mana > Player.points_de_mana_max:
                            Player.points_de_mana = Player.points_de_mana_max
                        Affichage.EntreePourContinuer()
                        print("*Chaines.*")
                        Affichage.EntreePourContinuer()
                        print("*Confitions de ta libération ?*")
                        print("*Reviens dans quelques instants.*")
                        Affichage.EntreePourContinuer()
                        print("Vous vous éloignez de l'autel, mais le sentez changer derrière votre dos.")
                        Affichage.EntreePourContinuer()
                    else:
                        print("Vous reposez le gobelet sur l'autel, et vous en éloignez.")
                        Affichage.EntreePourContinuer()
                else:
                    print("Vous vous approchez de l'autel, et posez votre main dessus.")
                    print("Des lettres apparaissent alors dans les airs, tremblottantes comme une flamme devant la tempête.")
                    Affichage.EntreePourContinuer()
                    while True:
                        while True:
                            try:
                                print("        -{ AUTEL DEMONIAQUE }-")
                                print("     -= Offrande de Sacrifices =-")
                                print(f"\n        SACRIFICES ? {Player.nombre_de_sacrifices}.\n")
                                print("       1 - RICHESSE ? 3.")
                                print("            2 - VIE ? 3.")
                                print("           3 - SANG ? 5.")
                                print("         4 - DESTIN ? 5")
                                print("        5 - POUVOIR ? 10.")
                                print("        6 - LÂCHETÉ ? 0.")
                                print("     7 - LIBERATION ? 5.")
                                choix = int(
                                input("\nChoisissez votre action avec les nombres : ")
                                )
                                ClearConsole()
                                if choix in range(1, 8):
                                    break
                            except ValueError:
                                ClearConsole()
                        if choix == 1:
                            if Player.nombre_de_sacrifices >= 3:
                                Player.nombre_de_sacrifices -= 3
                                print("L'INNOMABLE VOUS REMERCIE.")
                                Affichage.EntreePourContinuer()
                                print("Une lueur bleue sort de votre poignet tandis que votre poche s'alourdit.")
                                Affichage.EntreePourContinuer()
                                gain_gold = 255
                                gain_gold = Player.AddGoldToPlayer(gain_gold, True)
                                print(f"Vous perdez 3 Sacrifices, et gagnez {gain_gold} golds !")
                                Affichage.EntreePourContinuer()
                            else:
                                print("BLAGUE ?")
                                Affichage.EntreePourContinuer()
                        elif choix == 2:
                            if Player.nombre_de_sacrifices >= 3:
                                Player.nombre_de_sacrifices -= 3
                                print("L'INNOMABLE VOUS REMERCIE.")
                                Affichage.EntreePourContinuer()
                                print("Une lueur bleue sort de votre poignet tandis que quelque chose pose sa main sur votre torse et appuie fortement.")
                                Affichage.EntreePourContinuer()
                                print("Vous perdez 3 Sacrifices, gagnez 5 points de vie/mana max, et regagnez toute votre vie et votre mana !")
                                Player.points_de_vie_max += 5
                                Player.points_de_vie = Player.points_de_vie_max
                                Player.points_de_mana_max += 5
                                Player.points_de_mana = Player.points_de_mana_max
                                Affichage.EntreePourContinuer()
                            else:
                                print("BLAGUE ?")
                                Affichage.EntreePourContinuer()
                        elif choix == 3:
                            if Player.nombre_de_sacrifices >= 5:
                                Player.nombre_de_sacrifices -= 5
                                print("L'INNOMABLE VOUS REMERCIE.")
                                Affichage.EntreePourContinuer()
                                print("Une lueur bleue sort de votre poignet, et une énergie étrangère parcourt les veines de votre corps.")
                                Affichage.EntreePourContinuer()
                                print("Vous perdez 5 Sacrifices, gagnez 2 points de force/intelligence !")
                                Player.points_de_force += 2
                                Player.points_dintelligence += 2
                                Affichage.EntreePourContinuer()
                            else:
                                print("BLAGUE ?")
                                Affichage.EntreePourContinuer()
                        elif choix == 4:
                            if Player.nombre_de_sacrifices >= 5:
                                Player.nombre_de_sacrifices -= 5
                                print("L'INNOMABLE VOUS REMERCIE.")
                                Affichage.EntreePourContinuer()
                                print("Une lueur bleue sort de votre poignet tandis que quelque chose souffle au dessus de votre tête.")
                                Affichage.EntreePourContinuer()
                                print("Vous perdez 5 Sacrifices, gagnez 3 pourcents de chance de faire un coup/sort critiques, et 1 pourcent de chance d'esquive !")
                                Player.taux_coup_critique += 3
                                Player.taux_sort_critique += 3
                                Player.taux_desquive += 1
                                Affichage.EntreePourContinuer()
                            else:
                                print("BLAGUE ?")
                                Affichage.EntreePourContinuer()
                        elif choix == 5:
                            if Player.nombre_de_sacrifices >= 10:
                                Player.nombre_de_sacrifices -= 10
                                print("L'INNOMABLE VOUS REMERCIE.")
                                Affichage.EntreePourContinuer()
                                print("Une lueur bleue sort de votre poignet, et un petit coffre de bois noir apparait sur l'autel.")
                                Affichage.EntreePourContinuer()
                                print("Vous perdez 10 Sacrifices, et ouvrez le coffre.")
                                Affichage.EntreePourContinuer()
                                self.GiveRandomArtefact()
                            else:
                                print("BLAGUE ?")
                                Affichage.EntreePourContinuer()
                        elif choix == 6:
                            print("Vous enlevez votre main de l'autel.")
                            Affichage.EntreePourContinuer()
                            break
                        elif choix == 7:
                            if Player.nombre_de_sacrifices >= 5:
                                Player.nombre_de_sacrifices -= 5
                                print("L'INNOMABLE VOUS REMERCIE.")
                                Affichage.EntreePourContinuer()
                                print("L'énergie noire sort de votre main.")
                                print("Vous oubliez la technique [Griffes du Démon] !")
                                print("Vous regagnez 20 points de vie et mana max !")
                                Player.techniques_possedes.remove("Griffes du Démon")
                                Player.points_de_vie_max += 20
                                Player.points_de_mana_max += 20
                                Affichage.EntreePourContinuer()
                                print("L'autel s'écroule sur lui même.")
                                Affichage.EntreePourContinuer()
                                caracteristique_de_la_salle["terminé par joueur"] = True
                                break
                            else:
                                print("BLAGUE ?")
                                Affichage.EntreePourContinuer()
            elif caracteristique_de_la_salle["type"] == "OBELISQUE":  # DONE
                # dessine la salle, si ce n'est pas fait
                if not caracteristique_de_la_salle["marqué sur la carte"]:
                    Player.checkForStigmaPlusAhti()
                    Draw.obelisque(caracteristique_de_la_salle["position_x"] * 25, caracteristique_de_la_salle["position_y"] * 25)
                    caracteristique_de_la_salle["marqué sur la carte"] = True
                    self.UseMonocleDeVerite()

                print("Vous trouvez un bien étrange obélisque au centre d'une pièce plus grande que les autres.")
                print("Construit en verre, vous pouvez apercevoir un petit coffre de bois noir au milieu.")
                Affichage.EntreePourContinuer()
                print("De plus, sur chaque faces de l'obélisque, il y a une encoche profonde et 5 mots écrits dans une langue que vous ne connaissez pas.")
                Affichage.EntreePourContinuer()
                print("Zeroual semble réagir à l'encoche.")
                Affichage.EntreePourContinuer()

                while True:
                    try:
                        print("Approcher Zeroual de l'encoche ?")
                        print("(Assurez vous d'être prêt.)")
                        print("\n1 - Non\n2 - Oui")
                        choix = int(
                            input("\nChoisissez votre action avec les nombres : ")
                        )
                        ClearConsole()
                        if choix in [1, 2]:
                            break
                    except ValueError:
                        ClearConsole()
                if choix == 1:
                    print("Vous vous éloignez de la salle de l'obélisque.")
                    Affichage.EntreePourContinuer()

                else:
                    StopAllMusic()
                    print("Vous approchez Zeroual de l'encoche."
                          "\nL'arme prend alors la forme d'une épée a la lame rouillée et au design particulier, et vous l'insérez dans l'encoche.")
                    Affichage.EntreePourContinuer()
                    print("Les portes de la salle se ferment.")
                    Affichage.EntreePourContinuer()
                    print("Des runes apparaissent dans les airs, flottant sur un axe invisible et encerclant le vide.")
                    print("Quelque chose résonne en vous, comme une idée que l'on aurait mit de force dans votre crane, et qui émane de votre arme.")
                    Affichage.EntreePourContinuer()
                    print("*Retire.*")
                    print("*Prouver. Valeur.*")
                    Affichage.EntreePourContinuer()
                    print("Une terrible présence se fait sentir, et vous retirez Zeroual de l'encoche alors qu'un bruit se fait entendre derriere vous.")
                    Affichage.EntreePourContinuer()
                    Player.affronte_obelisque = True
                    vague = 5
                    while vague != 0:
                        control = controleur.Control(Player, Trader, FloorMaker, Sove)
                        CHANNELMUSIQUEDEBASE.set_volume(0)
                        time.sleep(0.01)
                        CHANNELMUSIQUEDEBASE.stop()
                        control.Battle()
                        StopAllMusic()
                        print("Alors que l'ennemi disparait, une des lignes de l'obélisque s'efface.")
                        Affichage.EntreePourContinuer()
                        vague -= 1
                        if vague != 0:
                            print(f"Il n'y a maintenant plus que {vague} mots.")
                            Affichage.EntreePourContinuer()
                            print("Vous voyez une des runes se briser, et quelque chose apparait.")
                            Affichage.EntreePourContinuer()
                    Player.affronte_obelisque = False
                    print("L'obélisque, maintenant vide de mots, éclate en plusieurs morceaux."
                          "\nMais au lieu de tomber, ils restent en place quelques secondes avant d'aller sur votre arme, qui les absorbe.")
                    Affichage.EntreePourContinuer()
                    print("Vous sentez que le nombre de monstre que vous avez tué a soudainement augmenté de 15 !")
                    Player.nombre_de_monstres_tues += 15
                    Affichage.EntreePourContinuer()
                    print("Vous laissez vos questions de coté, et récuperez le petit coffre de bois noir, que vous ouvrez immédiatement.")
                    Affichage.EntreePourContinuer()
                    caracteristique_de_la_salle["terminé par joueur"] = True
                    self.GiveRandomArtefact()
                    print("Les portes de la salle se rouvrent.")
                    Affichage.EntreePourContinuer()
                    PlayMusicDeLetage()

        #rajoute le numéro de la salle observée a la liste des dernieres salles observées
        self.liste_des_salles_observées.append(Player.numero_de_la_salle)
        if len(self.liste_des_salles_observées) > 4:
            self.liste_des_salles_observées.pop(0)
        
        #ajoute la description de la salle
        liste_salle_et_equivalent = { "ENTREE" : "L'Arene",
            "MONSTRE" : "Salle à Monstre",
            "MONSTRE_SUPERIEUR" : "Salle à Monstre Dopé",
            "GOLD" : "Tas de Gold",
            "RIEN" : "Salle Vide",
            "ITEM" : "Caisse à Item",
            "KEY" : "Salle à Clef",
            "LEY" : "Les Leys",
            "MIMIQUE" : "Mimique",
            "PIEGE" : "Piege",
            "SECRET" : "PLACEHOLDER",
            "COEUR" : "PLACEHOLDER",
            "PUIT" : "Puits à Souhaits",
            "LIANE" : "Coffret Végétal",
            "FAUX SPOT" : "Marque de Tromperie",
            "SPOT" : "Coffret de Pirate",
            "SEQUENCE" : "Coffret de l'Empereur",
            "DDR" : "Coffret de Folie",
            "BROKEN" : "Coffret Colatéral",
            "PLAQUE PRESSION" : "Mechanismes Anciens - Plaque de Pression",
            "ARBRE" : "Mechanismes Anciens - Arbre d'Abondance",
            "BOL" : "Mechanismes Anciens - Bol de Malchance",
            "JACCUZI" : "Mechanismes Anciens - Jaccuzi",
            "CHARGEUR" : "Mechanismes Anciens - Super-Chargeur",
            "AFFIXEUR_TECHNIQUE" : "Imbueur d'Experience",
            "AFFIXEUR_SORT" : "Imbueur de Connaissance",
            "DECHARGE" : "Décharge",
            "ARMURIER" : "Boutique des Armuriers",
            "SORCIERE" : "Boutique de la Sorciere",
            "HERBORISTE" : "Boutique de l'Herboriste",
            "BANQUIER" : "Banque du Village",
            "HOLLISTIQUE" : "Tour de la Mage Hollistique",
            "CARTOGRAPHE" : "Rue du Chuchoteur de Carte",
            "ARENE" : "Gradins des Ames",
            "FABRICATEUR" : "La Machine",
            "ANCIEN" : "Monticule de l'Ancien",
            "HOTEL" : "Saloon du Croissant de Lune",
            "ANCIENNE" : "Temple du Dieu Inconnu",
            "JARDIN" : "Jardin du Directeur",
            "MAITRE_ARTEFACT" : "Boutique du Voleur d'Artefacts",
            "WORKSHOP" : "Atelier",
            "LOTTERIE" : "Monolith Marchand",
            "BRAZIER_ROUGE" : "Brazier de Kókkinos",
            "BRAZIER_NOIR" : "Brazier de Mávros",
            "BRAZIER_BLEU" : "Brazier de Caeruleum",
            "PECHE" : "Trou Bleu",
            "BRAZIER_VERT" : "Brazier de Viridis",
            "BETE" : "Laboratoire",
            "ECLAIR" : "Colline aux Eclairs",
            "DISTRIBUTEUR" : "Mechanismes Anciens - Distributeur Coup-De-Pouce",
            "CHENIL" : "Mechanismes Anciens - Canigou",
            "BUFFET" : "Mechanismes Anciens - Buffet Equivalent",
            "SPAWNER" : "Mechanismes Anciens - Prison des Ames",
            "LEVIER" : "Mechanismes Anciens - Levier Insondable",
            "BOSS" : "Porte Divine",
            "RITUEL" : "Autel de l'Innomable",
            "OBELISQUE" : "Coffret de l'Obélisque" }

        liste_du_nom_de_la_salle_secrete_en_fonction_de_letage = ["PLACEHOLDER", "Ruine de la Cigogne Bleue", "Fontaine Pétrifiante", "Oasis de la Fortune", "Musée de la Magie", "Automate Rouillé", "Boutique de Mariette", "Cage de la Cigogne Noire", "Bibliothèque Royale", "Demeure d'Alfred", "PLACEHOLDER", "PLACEHOLDER"]
        liste_salle_et_equivalent["SECRET"] = liste_du_nom_de_la_salle_secrete_en_fonction_de_letage[Player.numero_de_letage]

        if Player.nom_de_letage == "Jungle Cruelle":
            liste_salle_et_equivalent["COEUR"] = "Lame dans la Pierre : Mirage"
        elif Player.nom_de_letage == "Forêt Désenchantée":
            liste_salle_et_equivalent["COEUR"] = "Lame dans la Pierre : Execution"
        elif Player.nom_de_letage == "Cachots de l'Immonde":
            liste_salle_et_equivalent["COEUR"] = "Joyau de l'âme : Haine"
        elif Player.nom_de_letage == "Douves du Pénitent":
            liste_salle_et_equivalent["COEUR"] = "Joyau de l'âme : Regret"

        if caracteristique_de_la_salle["type"] in liste_salle_et_equivalent:
            Sove.RajouteEntreeAuLivreCigogneBlancheSiOnAPas("Les Salles", liste_salle_et_equivalent[caracteristique_de_la_salle["type"]])
        
    def DanceDanceRevolutionIntroduction(self):
        Save.SaveTheGameSansAffichage()
        Player.nombre_de_gold -= 75
        StopAllMusic()
        print("Vous inserez 75 golds dans la machine, et lancez le jeu.")
        Affichage.EntreePourContinuer()
        PlayMusic("tutorial")
        print("Un petit tutoriel s'affiche à l'écran.")
        Affichage.EntreePourContinuer()
        print("                   #####")
        print("Lorsque les notes  #####  rencontrent les encoches |_____| ,")
        print("                   #####")
        print("\nvous devez appuyer sur le nombre correspondant et le valider avec la touche entrée.\n")
        Affichage.EntreePourContinuer()
        print("Exemple:")
        Affichage.EntreePourContinuer()
        print("   #####")
        print("   #####      Attendez...")
        print("   #####")
        print("\n \n\n\n \n\n \n\n\n \n\n")
        print("  |_____|")
        print("     1   ")
        time.sleep(0.5)
        ClearConsole()
        print("\n \n\n\n")
        print("   #####")
        print("   #####      Pas encore....")
        print("   #####")
        print("\n \n\n\n \n\n")
        print("  |_____|")
        print("     1   ")
        time.sleep(0.5)
        ClearConsole()
        print("\n \n\n\n \n\n \n\n\n")
        print("   #####")
        print("   #####      Presque...")
        print("   #####")
        print("\n")
        print("  |_____|")
        print("     1   ")
        time.sleep(0.5)
        ClearConsole()
        print("\n\n \n\n\n \n\n \n\n\n \n\n")
        print("   #####")
        print("   #####      LA ! Il faut appuyer sur 1, puis entrée !")
        print("  |#####|")
        print("     1   ")
        Affichage.EntreePourContinuer()
        print("Rapelez vous, les notes n'avancent que si vous entrez un nombre et que vous appuyez sur entrée.")
        print("De plus, au bout de 4 erreurs, le jeu s'arrete !")
        Affichage.EntreePourContinuer()
        print("Finissez 260 notes avant les 180 secondes de musique, et vous gagnez !")
        Affichage.EntreePourContinuer()
        print("Prêt ?")
        Affichage.EntreePourContinuer()
        StopAllMusic()
        print("C'est parti !")
        Affichage.EntreePourContinuer()
        game_done = self.DanceDanceRevolution()
        return game_done

    def DanceDanceRevolution(self):
        #lance la musique
        PlaySound("dance")

        #condition de continuité du jeu
        game_over = False
        game_won = False
        essais_restant = 4

        #mise en place des toutes premieres notes
        ligne_1 = 1
        ligne_2 = 1
        ligne_3 = 1
        ligne_4 = 1
        ligne_5 = 1

        #commencement du timer
        time_start = time.time()

        #nombre de notes
        nombre_de_notes = 260

        #commencement de la boucle while
        while not game_over:

            #décompte du nombre de notes restantes
            nombre_de_notes -= 1

            #génération d'une note
            prochaine_note = random.randint(1,9)

            #affectation de la note aux lignes d'en dessous
            ligne_0 = ligne_1
            ligne_1 = ligne_2
            ligne_2 = ligne_3
            ligne_3 = ligne_4
            ligne_4 = ligne_5
            ligne_5 = prochaine_note

            #selon la valeur de la variable, l'affichage sera différent
            affichage_ligne_0 = self.MakeBottomDDRView(ligne_0)
            affichage_ligne_1 = self.MakeDDRView(ligne_1)
            affichage_ligne_2 = self.MakeDDRView(ligne_2)
            affichage_ligne_3 = self.MakeDDRView(ligne_3)
            affichage_ligne_4 = self.MakeDDRView(ligne_4)
            affichage_ligne_5 = self.MakeDDRView(ligne_5)

            while True:
                try:
                    #affiche la vue du joueur
                    print(f"{affichage_ligne_5}\n{affichage_ligne_4}\n{affichage_ligne_3}\n"
                        f"{affichage_ligne_2}\n{affichage_ligne_1}\n{affichage_ligne_0}")
                    print("    1      2      3      4      5      6      7      8      9  ")
                    
                    #affiche le nombre de vie restantes
                    if essais_restant == 4:
                        print("\n               [O]             [O]             [O] \n")
                    elif essais_restant == 3:
                        print("\n               [X]             [O]             [O] \n")
                    elif essais_restant == 2:
                        print("\n               [X]             [X]             [O] \n")
                    elif essais_restant == 1:
                        print("\n               [X]             [X]             [X] \n")
                    
                    #demande le numero au joueur
                    choix = int(input("                                "))
                    ClearConsole()

                    if choix in range(1, 10):
                        break
                except ValueError:
                    ClearConsole()

            #regarde si les notes sont finies
            if nombre_de_notes == 0 :
                game_over = True
                game_won = True

            #compare le numéro donné au numéro nécéssaire
            if not choix == ligne_0:
                essais_restant -= 1
                if essais_restant == 0:
                    game_over = True
                    game_won = False
                    cause = f"      -=Game Over=-\nVous avez fait 3 erreurs !\nDerniere faute : Numéro {choix} entré au lieu de {ligne_0}. "

            #regarde si le temps imparti est fini
            time_now = time.time()
            temps_limite = 180
            if (time_now - time_start) > temps_limite:
                game_over = True
                game_won = False
                cause = f"      -=Game Over=-\nLa musique est finie !\nIl vous restait {nombre_de_notes} notes a faire !"

        #regarde la cause de la défaite
        if not game_won:
            StopAllMusic()
            print("La musique s'arrête.")
            Affichage.EntreePourContinuer()
            print("L'écran se fige.")
            Affichage.EntreePourContinuer()
            print(cause)
            print()
            Affichage.EntreePourContinuer()
        else:
            StopAllMusic()
            print("La musique s'arrête.")
            Affichage.EntreePourContinuer()
            print("L'écran se fige.")
            Affichage.EntreePourContinuer()
            print("NOUVEAU HIGHSCORE !")
            print("Vous avez réussi !")
            PlaySound("questdone")
            Affichage.EntreePourContinuer()

        #retourne le résultat du jeu
        return game_won

    def MakeDDRView(self, valeur_de_ligne):
        espace_vide = "  "
        note_vide = "     "
        note = "#####"
        affichage = ""
        retour_a_la_ligne = "\n"
        for _ in range(1, 4):
            if valeur_de_ligne != 1 :
                for _ in range(0, valeur_de_ligne - 1):
                    affichage += espace_vide
                    affichage += note_vide
            affichage += espace_vide
            affichage += note
            affichage += retour_a_la_ligne
        return affichage

    def MakeBottomDDRView(self, valeur_de_ligne):
        espace_vide = "  "
        encoche_vide = "|_____|"
        note_vide = "     "
        note = "#####"
        note_dans_encoche = "|#####|"
        affichage = ""
        retour_a_la_ligne = "\n"
        #notes
        for _ in range(1, 3):
            if valeur_de_ligne != 1 :
                for _ in range(0, valeur_de_ligne - 1):
                    affichage += espace_vide
                    affichage += note_vide
            affichage += espace_vide
            affichage += note
            affichage += retour_a_la_ligne
        #encoches
        affichage += " "
        if valeur_de_ligne != 1 :
            for _ in range(0, valeur_de_ligne - 1):
                affichage += encoche_vide
        affichage += note_dans_encoche
        if valeur_de_ligne != 9 :
            for _ in range(0, 8 - (valeur_de_ligne - 1)):
                affichage += encoche_vide
        return affichage

    def GiveRandomArtefact(self, artefact_in_particular="None", type_douverture="None"):
        
        if Player.malediction == "Sparifique" and type_douverture != "Boss":
            print("...mais d'anciennes forces maudites vous empêchent d'ouvrir la boite.")
            Affichage.EntreePourContinuer()
        
        elif type_douverture == "Don" :
            Player.liste_dartefacts_optionels.append(artefact_in_particular)
            Sove.RajouteEntreeAuLivreCigogneBlancheSiOnAPas("Les Artefacts", artefact_in_particular)


        else:
            nombre_de_fois_a_donner_artefact = [1]
            if Player.death_divinity and artefact_in_particular == "None":
                nombre_de_fois_a_donner_artefact.append(2)

            for _ in nombre_de_fois_a_donner_artefact:
                if artefact_in_particular == "None":

                    # rajoute dans la liste les artefact debloqué au fur et a mesure des parties gagnees
                    donnees_de_s0ve = Observation.GetPermanentThingsFromS0ve() 
                    liste_dartefact_a_obtenir = ast.literal_eval(donnees_de_s0ve["Artefact Debloques"])

                    # enleve la liste les artefacts que l'on possède déja
                    for artefact in Player.liste_dartefacts_optionels:
                        if artefact in liste_dartefact_a_obtenir:
                            liste_dartefact_a_obtenir.remove(artefact)

                    if len(liste_dartefact_a_obtenir) == 0:
                        artefact_a_donner = "Hors Stock"

                    else:
                        # enleve vide interieur si on a voeu cristalisé, ou si on est pas Terah
                        if Player.nom_du_personnage != "Terah" and "Vide Interieur" in liste_dartefact_a_obtenir :
                            liste_dartefact_a_obtenir.remove("Vide Interieur")

                        if "Vide Interieur" in Player.liste_dartefacts_optionels:
                            liste_dartefact_a_obtenir.remove("Voeu Cristallisé")

                        if "Voeu Cristallisé" in Player.liste_dartefacts_optionels:
                            liste_dartefact_a_obtenir.remove("Vide Interieur")

                        # selectionne un artefact au pif
                        numero_artefact_aleatoire = random.randint(0, len(liste_dartefact_a_obtenir) - 1)
                        artefact_a_donner = liste_dartefact_a_obtenir[numero_artefact_aleatoire]

                else:
                    #donne un artefact particulier choisi a l'avance
                    artefact_a_donner = artefact_in_particular

                # donne l'artefact au joueur
                print(f"Vous gagnez l'artefact [{artefact_a_donner}] !")
                Player.liste_dartefacts_optionels.append(artefact_a_donner)

                # sauvegarde
                Save.SaveTheGameSansAffichage()

                # Applique les effets de l'artefact
                liste_recompense = LISTEEFFETSARTEFACT[artefact_a_donner]
                for cle in liste_recompense:
                    if cle == "Attaque":
                        Player.points_de_force += liste_recompense[cle]
                        commentaire = f"Vous gagnez {liste_recompense[cle]} points de force !"
                    elif cle == "Defence":
                        Player.points_de_defence += liste_recompense[cle]
                        commentaire = f"Vous gagnez {liste_recompense[cle]} points de défence !"
                    elif cle == "Intelligence":
                        Player.points_dintelligence += liste_recompense[cle]
                        commentaire = (
                            f"Vous gagnez {liste_recompense[cle]} points d'intelligence !"
                        )
                    elif cle == "Gold":
                        gain_gold = Player.AddGoldToPlayer(liste_recompense[cle])
                        commentaire = f"Vous gagnez {gain_gold} golds !"
                    elif cle == "Vie":
                        Player.points_de_vie_max += liste_recompense[cle]
                        Player.points_de_vie += liste_recompense[cle]
                        commentaire = (
                            f"Vous gagnez {liste_recompense[cle]} points de vie maximum !"
                        )
                    elif cle == "Mana":
                        Player.points_de_mana_max += liste_recompense[cle]
                        Player.points_de_mana += liste_recompense[cle]
                        commentaire = (
                            f"Vous gagnez {liste_recompense[cle]} points de mana maximum !"
                        )
                    elif cle == "Endurance":
                        Player.points_dendurance += liste_recompense[cle]
                        commentaire = (
                            f"Vous gagnez {liste_recompense[cle]} points d'endurance maximum !"
                        )
                    elif cle == "Taux coup critique":
                        Player.taux_coup_critique += liste_recompense[cle]
                        commentaire = f"Vous gagnez {liste_recompense[cle]}% de chance de faire un coup critique !"
                    elif cle == "Degat coup critique":
                        Player.degat_coup_critique += liste_recompense[cle]
                        commentaire = f"Vous gagnez {liste_recompense[cle]} points de degats de coup critique !"
                    elif cle == "Taux sort critique":
                        Player.taux_sort_critique += liste_recompense[cle]
                        commentaire = f"Vous gagnez {liste_recompense[cle]}% de chance de faire un sort critique !"
                    elif cle == "Taux esquive":
                        Player.taux_desquive += liste_recompense[cle]
                        commentaire = (
                            f"Vous gagnez {liste_recompense[cle]}% de chance d'esquiver !"
                        )
                    elif cle == "Degat sort critique":
                        Player.degat_sort_critique += liste_recompense[cle]
                        commentaire = f"Vous gagnez {liste_recompense[cle]} points de degats de sort critique !"
                    elif cle == "Commentaire":
                        commentaire = liste_recompense[cle]
                    elif cle == "Red coin":
                        Player.nombre_de_red_coin += liste_recompense[cle]
                        commentaire = f"Vous gagnez {liste_recompense[cle]} Red Coin !"
                    print(commentaire)
                if artefact_a_donner == "Vide Interieur":
                    Player.stigma_negatif = "[Vidé]"
                    Player.points_de_mana_max -= 15
                    if Player.points_de_mana_max < 0:
                        Player.points_de_mana_max = 1
                    if Player.points_de_mana > Player.points_de_mana_max:
                        Player.points_de_mana = Player.points_de_mana_max
                if artefact_a_donner == "Voeu Cristallisé":
                    Player.stigma_negatif = "[Purifié]"
                Affichage.EntreePourContinuer()
                if artefact_a_donner == "Syra":
                    nombre_de_techniques = len(Player.techniques_possedes)
                    nombre_de_sorts = len(Player.sorts_possedes)
                    print(f"Vous connaissez déjà {nombre_de_techniques} techniques et {nombre_de_sorts} sorts.")
                    print(f"Vous gagnez ainsi {nombre_de_techniques * 10} pm et {nombre_de_sorts * 10} pv maximum !")
                    Player.points_de_vie_max += nombre_de_sorts * 10
                    Player.points_de_vie += nombre_de_sorts * 10
                    Player.points_de_mana_max += nombre_de_techniques * 10
                    Player.points_de_mana += nombre_de_techniques * 10
                    Affichage.EntreePourContinuer()
                Sove.RajouteEntreeAuLivreCigogneBlancheSiOnAPas("Les Artefacts", artefact_a_donner)

    def InitiateRoleToAttribute(self):
        self.liste_de_machines = ["ARBRE", "DISTRIBUTEUR", "LEVIER", "SPAWNER", "BUFFET", "CHENIL", "CHARGEUR", "JACCUZI"]
        if "Combattant le Gardien" in Player.player_tags:
            self.nombre_de_monstre = 0
            self.nombre_de_gold = 0
            self.nombre_de_item = 0
            self.nombre_de_mimique = 0
            self.nombre_de_piege = 0
            self.nombre_de_secret = 0
            self.nombre_de_cle = 0
            self.nombre_de_leys = 0
            self.nombre_de_petit_gardien = 5
            self.nombre_de_grand_gardien = 1
            self.nombre_de_rien = 5
            self.nombre_de_affixeur_technique = 0
            self.nombre_de_affixeur_sort = 0
            self.nombre_de_eclair = 0
            self.nombre_de_bete = 0
            self.nombre_de_monstre_superieur = 0
            self.nombre_de_lotterie = 0
            self.nombre_de_peche = 0
            self.nombre_de_workshop = 0
            self.nombre_de_brazier_bleu = 0
            self.nombre_de_brazier_rouge = 0
            self.nombre_de_brazier_noir = 0
            self.nombre_de_brazier_vert = 0
            self.nombre_de_hollistique = 0
        else:
            self.nombre_de_petit_gardien = 0
            self.nombre_de_grand_gardien = 0
            self.nombre_de_monstre = Player.numero_de_letage + 3
            self.nombre_de_gold = Player.numero_de_letage + 1
            self.nombre_de_item = Player.numero_de_letage // 2
            self.nombre_de_mimique = 0
            if Player.numero_de_letage in [2, 4, 6, 8, 10]:
                self.nombre_de_mimique = 1
            self.nombre_de_piege = Player.numero_de_letage + 2
            self.nombre_de_secret = 1
            self.nombre_de_cle = 0
            if  Sove.ModifieLivraisonDansSove("Limite", "Clé", Player.numero_de_letage - 3):
                self.nombre_de_cle = 1
            self.nombre_de_leys = Player.numero_de_letage // 3 + 1
            self.nombre_de_rien = 0
            self.nombre_de_lotterie = 0
            self.nombre_de_hollistique = 0
            if  Sove.ModifieTagsDansSove("Checke", "Symbole Vu") and not  Sove.ModifieTagsDansSove("Checke", "Mage Hollistique") and Player.numero_de_letage == 1:
                self.nombre_de_hollistique = 1
            if Player.numero_de_letage in [3, 5, 8, 10]:
                self.nombre_de_lotterie = 1
            self.nombre_de_peche = 0
            if Player.numero_de_letage in [2, 4, 6, 7, 9, 10]:
                self.nombre_de_peche = 1
            self.nombre_de_workshop = 0
            if Player.numero_de_letage in [1, 4, 8, 10]:
                self.nombre_de_workshop = 1
            nombre_aleatoire = random.randint(0,8)
            if nombre_aleatoire == 1:
                self.nombre_de_affixeur_sort = 1
                self.nombre_de_affixeur_technique = 1
                self.nombre_de_eclair = 0
            elif nombre_aleatoire == 2:
                self.nombre_de_affixeur_sort = 1
                self.nombre_de_affixeur_technique = 0
                self.nombre_de_eclair = 1
            elif nombre_aleatoire == 3:
                self.nombre_de_affixeur_sort = 0
                self.nombre_de_affixeur_technique = 1
                self.nombre_de_eclair = 1
            elif nombre_aleatoire == 4:
                self.nombre_de_affixeur_sort = 0
                self.nombre_de_affixeur_technique = 0
                self.nombre_de_eclair = 1
            elif nombre_aleatoire == 5:
                self.nombre_de_affixeur_sort = 0
                self.nombre_de_affixeur_technique = 1
                self.nombre_de_eclair = 0
            elif nombre_aleatoire == 6:
                self.nombre_de_affixeur_sort = 1
                self.nombre_de_affixeur_technique = 0
                self.nombre_de_eclair = 0
            elif nombre_aleatoire == 7:
                self.nombre_de_affixeur_sort = 0
                self.nombre_de_affixeur_technique = 0
                self.nombre_de_eclair = 0
            else:
                self.nombre_de_affixeur_technique = 1
                self.nombre_de_affixeur_sort = 1
                self.nombre_de_eclair = 1
            nombre_aleatoire = random.randint(0,9)
            self.nombre_de_bete = 0
            self.nombre_de_monstre_superieur = 0
            if nombre_aleatoire == 5 and "Regard de la Bête" not in Player.liste_dartefacts_optionels:
                self.nombre_de_bete = 1
                self.nombre_de_monstre_superieur = 1
            self.nombre_de_brazier_rouge = 0
            nombre_aleatoire = random.randint(0,100)
            if nombre_aleatoire <= 50:
                self.nombre_de_brazier_rouge = 1
            self.nombre_de_brazier_bleu = 0
            nombre_aleatoire = random.randint(0,100)
            if nombre_aleatoire <= 25:
                self.nombre_de_brazier_bleu = 1
            self.nombre_de_brazier_vert = 0
            nombre_aleatoire = random.randint(0,100)
            if nombre_aleatoire <= 12:
                self.nombre_de_brazier_vert = 1
            self.nombre_de_brazier_noir = 0
            nombre_aleatoire = random.randint(0,100)
            if nombre_aleatoire <= 4:
                self.nombre_de_brazier_noir = 1
            
        self.nombre_de_machine_bon = 0
        self.nombre_de_bol = 0
        self.nombre_de_plaque_pression = 0
        if Player.numero_de_letage in range (1, 5):
            self.nombre_de_machine_bon = 2
            self.nombre_de_bol = 1
            self.nombre_de_plaque_pression = 2
        elif Player.numero_de_letage in range (6, 10):
            self.nombre_de_machine_bon = 4
            self.nombre_de_bol = 2
            self.nombre_de_plaque_pression = 4
        elif Player.numero_de_letage == 10:
            self.nombre_de_machine_bon = 8
            self.nombre_de_bol = 3
            self.nombre_de_plaque_pression = 8
        #evenement de letage 1 : corrompre la foret pour gagner des trucs de magie
        self.nombre_de_puit = 0
        if Player.numero_de_letage in [1, 6]:
            self.nombre_de_puit = 1
        # artefact de letage 2 (liane : besoin de machette rouillee)
        self.nombre_de_coffres_en_lianes = 0
        if Player.numero_de_letage == 2:
            self.nombre_de_coffres_en_lianes = 2
        # objet de letage 2 selon alt ou pas
        self.nombre_de_coeur = 0
        if Player.numero_de_letage in [2, 7]:
            self.nombre_de_coeur = 1
        # artefact de letage 3 (5 spots, 2 artefacts, besoin de pelle rouillee pour ouvrir 1 spot)
        self.nombre_de_faux_spot = 0
        self.nombre_de_spot = 0
        if Player.numero_de_letage == 3:
            self.nombre_de_faux_spot = 3
        if Player.numero_de_letage == 3:
            self.nombre_de_spot = 2
        # artefact de letage 4 (1 livre avec 3 emplacements. si emplecements orbservés dans l'ordre, 1 artefact.)
        self.nombre_de_sequence = 0
        if Player.numero_de_letage in [4, 10]:
            self.nombre_de_sequence = 1
        # artefact de letage 5 (2 dance dance revolution. 50 commandes en 30 secondes pour avoir lartefact)
        self.nombre_de_ddr = 0
        if Player.numero_de_letage in [5, 10]:
            self.nombre_de_ddr = 2
        # artefact de letage 6 (1 coffre gratuit, énigme cassée.)
        self.nombre_de_broken = 0
        if Player.numero_de_letage == 6:
            self.nombre_de_broken = 1
        # artefact de letage 7 (1 rituel de sang : sacrifie 10 ennemis avec dague démoniaque (66 PE 25 DMG) pour 1 artefact et autre)
        self.nombre_de_rituel = 0
        if Player.numero_de_letage == 7:
            self.nombre_de_rituel = 1
        # artefact de letage 8 (2 obelisques : battre 5 ennemis a la suite sans mourir et sans gagner d'ame a la fin.)
        self.nombre_de_obelisque = 0
        if Player.numero_de_letage in [8, 10]:
            self.nombre_de_obelisque = 2
        # etgae 10, boss rush
        self.nombre_de_boss_rush = 0
        if Player.nom_de_letage == "Dédale Frontière":
            self.nombre_de_boss_rush = 1

        if Player.numero_de_letage in [10, 11]:
            self.nombre_de_secret = 0
        
    def AttributingRoleToRoom(self, salle_choisie):
        caracteristique_de_la_salle = self.FloorBlueprint[salle_choisie]
        if self.nombre_de_monstre != 0:
            caracteristique_de_la_salle["type"] = "MONSTRE"
            self.nombre_de_monstre -= 1
        elif self.nombre_de_gold != 0:
            caracteristique_de_la_salle["type"] = "GOLD"
            self.nombre_de_gold -= 1
        elif self.nombre_de_item != 0:
            caracteristique_de_la_salle["type"] = "ITEM"
            self.nombre_de_item -= 1
        elif self.nombre_de_mimique != 0:
            caracteristique_de_la_salle["type"] = "MIMIQUE"
            self.nombre_de_mimique -= 1
        elif self.nombre_de_piege != 0:
            caracteristique_de_la_salle["type"] = "PIEGE"
            self.nombre_de_piege -= 1
        elif self.nombre_de_secret != 0:
            caracteristique_de_la_salle["type"] = "SECRET"
            self.nombre_de_secret -= 1
        elif self.nombre_de_leys != 0:
            caracteristique_de_la_salle["type"] = "LEY"
            self.nombre_de_leys -= 1
        elif self.nombre_de_puit != 0:
            caracteristique_de_la_salle["type"] = "PUIT"
            self.nombre_de_puit -= 1
        elif self.nombre_de_coeur != 0:
            caracteristique_de_la_salle["type"] = "COEUR"
            self.nombre_de_coeur -= 1
        elif self.nombre_de_workshop != 0:
            caracteristique_de_la_salle["type"] = "WORKSHOP"
            self.nombre_de_workshop -= 1
        elif self.nombre_de_hollistique != 0:
            caracteristique_de_la_salle["type"] = "HOLLISTIQUE"
            self.nombre_de_hollistique -= 1
        elif self.nombre_de_coeur != 0:
            caracteristique_de_la_salle["type"] = "COEUR"
            self.nombre_de_coeur -= 1
        elif self.nombre_de_peche != 0:
            caracteristique_de_la_salle["type"] = "PECHE"
            self.nombre_de_peche -= 1
        elif self.nombre_de_brazier_rouge != 0:
            caracteristique_de_la_salle["type"] = "BRAZIER_ROUGE"
            self.nombre_de_brazier_rouge -= 1
        elif self.nombre_de_brazier_bleu != 0:
            caracteristique_de_la_salle["type"] = "BRAZIER_BLEU"
            self.nombre_de_brazier_bleu -= 1
        elif self.nombre_de_brazier_vert != 0:
            caracteristique_de_la_salle["type"] = "BRAZIER_VERT"
            self.nombre_de_brazier_vert -= 1
        elif self.nombre_de_brazier_noir != 0:
            caracteristique_de_la_salle["type"] = "BRAZIER_NOIR"
            self.nombre_de_brazier_noir -= 1
        elif self.nombre_de_lotterie != 0:
            caracteristique_de_la_salle["type"] = "LOTTERIE"
            self.nombre_de_lotterie -= 1
        elif self.nombre_de_bete != 0:
            caracteristique_de_la_salle["type"] = "BETE"
            self.nombre_de_bete -= 1
        elif self.nombre_de_monstre_superieur != 0:
            caracteristique_de_la_salle["type"] = "MONSTRE_SUPERIEUR"
            self.nombre_de_monstre_superieur -= 1
        elif self.nombre_de_affixeur_technique != 0:
            caracteristique_de_la_salle["type"] = "AFFIXEUR_TECHNIQUE"
            self.nombre_de_affixeur_technique -= 1
        elif self.nombre_de_affixeur_sort != 0:
            caracteristique_de_la_salle["type"] = "AFFIXEUR_SORT"
            self.nombre_de_affixeur_sort -= 1
        elif self.nombre_de_eclair != 0:
            caracteristique_de_la_salle["type"] = "ECLAIR"
            self.nombre_de_eclair -= 1
        elif self.nombre_de_cle != 0:
            caracteristique_de_la_salle["type"] = "KEY"
            if Player.numero_de_letage == 10 :
                caracteristique_de_la_salle["terminé par joueur"] = False
            self.nombre_de_cle -= 1
        elif self.nombre_de_coffres_en_lianes != 0:
            caracteristique_de_la_salle["type"] = "LIANE"
            self.nombre_de_coffres_en_lianes -= 1
        elif self.nombre_de_faux_spot != 0:
            caracteristique_de_la_salle["type"] = "FAUX SPOT"
            self.nombre_de_faux_spot -= 1
        elif self.nombre_de_spot != 0:
            caracteristique_de_la_salle["type"] = "SPOT"
            self.nombre_de_spot -= 1
        elif self.nombre_de_sequence != 0:
            caracteristique_de_la_salle["type"] = "SEQUENCE"
            self.nombre_de_sequence -= 1
        elif self.nombre_de_ddr != 0:
            caracteristique_de_la_salle["type"] = "DDR"
            self.nombre_de_ddr -= 1
        elif self.nombre_de_broken != 0:
            caracteristique_de_la_salle["type"] = "BROKEN"
            self.nombre_de_broken -= 1
        elif self.nombre_de_rituel != 0:
            caracteristique_de_la_salle["type"] = "RITUEL"
            self.nombre_de_rituel -= 1
        elif self.nombre_de_obelisque != 0:
            caracteristique_de_la_salle["type"] = "OBELISQUE"
            self.nombre_de_obelisque -= 1
        elif self.nombre_de_boss_rush != 0:
            caracteristique_de_la_salle["type"] = "BOSS"
            self.nombre_de_boss_rush -= 1
        elif self.nombre_de_petit_gardien != 0:
            caracteristique_de_la_salle["type"] = "PETIT GARDIEN"
            self.nombre_de_petit_gardien -= 1
        elif self.nombre_de_grand_gardien != 0:
            caracteristique_de_la_salle["type"] = "GRAND GARDIEN"
            self.nombre_de_grand_gardien -= 1
        elif self.nombre_de_rien != 0:
            caracteristique_de_la_salle["type"] = "RIEN"
            self.nombre_de_rien -= 1
        elif self.nombre_de_machine_bon != 0:
            numero_aleatoire = random.randint(0, len(self.liste_de_machines) - 1)
            type_de_machine = self.liste_de_machines[numero_aleatoire]
            caracteristique_de_la_salle["type"] = type_de_machine
            self.liste_de_machines.pop(numero_aleatoire)
            self.nombre_de_machine_bon -= 1
        elif self.nombre_de_bol != 0:
            caracteristique_de_la_salle["type"] = "BOL"
            self.nombre_de_bol -= 1
        elif self.nombre_de_plaque_pression != 0:
            caracteristique_de_la_salle["type"] = "PLAQUE PRESSION"
            self.nombre_de_plaque_pression -= 1
        else:
            nombre_aleatoire = random.randint(0, 5)
            if Player.nom_de_letage == "Dédale Frontière":
                if nombre_aleatoire == 0:
                    caracteristique_de_la_salle["type"] = "ITEM"
                elif nombre_aleatoire == 1:
                    caracteristique_de_la_salle["type"] = "GOLD"
                elif nombre_aleatoire in [2, 3]:
                    caracteristique_de_la_salle["type"] = "MONSTRE"
                elif nombre_aleatoire in [4, 5]:
                    caracteristique_de_la_salle["type"] = "PIEGE"
            else:
                if nombre_aleatoire == 0:
                    caracteristique_de_la_salle["type"] = "MONSTRE"
                elif nombre_aleatoire == 1:
                    caracteristique_de_la_salle["type"] = "GOLD"
                elif nombre_aleatoire in [2, 3]:
                    caracteristique_de_la_salle["type"] = "ITEM"
                elif nombre_aleatoire in [4, 5]:
                    caracteristique_de_la_salle["type"] = "PIEGE"

    def WalkLeft(self):
        if Player.position_x == 0 and Player.position_y == 0:
            Player.position_x = -2
        elif Player.position_x == 2 and Player.position_y == 0:
            Player.position_x = 0
        else:
            Player.position_x -= 1
        Valid = self.CheckPlayerPosition()
        if not Valid:
            Player.position_x += 1
            if Player.numero_de_letage == -1:
                print("Ca ne sert a rien d'aller par la bas.")
            else:
                print("Vous rentrez dans un mur.")
            Affichage.EntreePourContinuer()

    def WalkRight(self):
        if Player.position_x == 0 and Player.position_y == 0:
            Player.position_x = 2
        elif Player.position_x == -2 and Player.position_y == 0:
            Player.position_x = 0
        else:
            Player.position_x += 1
        Valid = self.CheckPlayerPosition()
        if not Valid:
            Player.position_x -= 1
            if Player.numero_de_letage == -1:
                print("Ca ne sert a rien d'aller par la bas.")
            else:
                print("Vous rentrez dans un mur.")
            Affichage.EntreePourContinuer()

    def WalkUp(self):
        if Player.position_x == 0 and Player.position_y == 0:
            Player.position_y = 2
        elif Player.position_x == 0 and Player.position_y == -2:
            Player.position_y = 0
        else:
            Player.position_y += 1
        Valid = self.CheckPlayerPosition()
        if not Valid:
            Player.position_y -= 1
            if Player.numero_de_letage == -1:
                print("Ca ne sert a rien d'aller par la bas.")
            else:
                print("Vous rentrez dans un mur.")
            Affichage.EntreePourContinuer()

    def WalkDown(self):
        if Player.position_x == 0 and Player.position_y == 0:
            Player.position_y = -2
        elif Player.position_x == 0 and Player.position_y == 2:
            Player.position_y = 0
        else:
            Player.position_y -= 1
        Valid = self.CheckPlayerPosition()
        if not Valid:
            Player.position_y += 1
            if Player.numero_de_letage == -1:
                print("Ca ne sert a rien d'aller par la bas.")
            else:
                print("Vous rentrez dans un mur.")
            Affichage.EntreePourContinuer()

    def UpdatePlayerPosition(self):
        ColiseumGoto(Player.position_x * 25, Player.position_y * 25)

    def CheckPlayerPosition(self):
        for numero_de_salle in range(1, len(self.FloorBlueprint) + 1):
            salle_a_tester = self.FloorBlueprint[numero_de_salle]
            if (
                Player.position_x == salle_a_tester["position_x"]
                and Player.position_y == salle_a_tester["position_y"]
            ):
                # le joueur se trouve sur une salle qui existe
                Player.numero_de_la_salle = numero_de_salle
                return True
        return False

    def SetupFloorLayout(self):
        # Initialise un dictionnaire avec les salles et leur position
        nombre_de_salles = 16 + (Player.numero_de_letage * 5)
        if Player.nom_de_letage == "Dédale Frontière":
            nombre_de_salles = 100
        elif Player.numero_de_letage == 11:
            nombre_de_salles = 10
        elif "Combattant le Gardien" in Player.player_tags:
            nombre_de_salles = 12
        self.MakeFloorBlueprint(nombre_de_salles)
       
        # détermine les nombres de roles a attribuer aux salles 
        self.InitiateRoleToAttribute()
        
        # attribue un role a chaque salles
        self.SetupFloorBlueprint()

        if not "Combattant le Gardien" in Player.player_tags:
            Save.SaveTheGameSansAffichage()


    def ShowFloor(self):
        if Player.numero_de_letage == -1:
            StopAllMusic()
            self.StopAllVillageChannels()
            self.InitialisationOfTownVariations()
            PlayMusicDeLetage()
        if not self.carte_ouverte and  Sove.ModifieLivraisonDansSove("Limite", "Carte", Player.numero_de_letage - 4) and  Sove.ModifieTagsDansSove("Checke","Livraison Terminée"):
            self.PrintFloorBlueprint()
            self.carte_ouverte = True
        self.UpdatePlayerPosition()
        self.WalkInFloor()
        if Player.numero_de_letage == -1:
            StopAllMusic()
            PlayMusic("wind")


class Observe:

    def __init__(self):
        pass

    def SeeSomething(self):
        if Player.numero_de_letage == 1:
            self.DoTheLibrary()  # bibliotheque de gros sorts (recuperer les sorts consignés)
        elif Player.numero_de_letage == 2:
            self.DoTheFountain()  # Fontaine redonne pv 3 fois
        elif Player.numero_de_letage == 3:
            self.DoTheGacha()  # Gacha game a mutations
        elif Player.numero_de_letage == 4:
            self.DoTheBloodStone()  # machine a gold a sang
        elif Player.numero_de_letage == 5:
            self.DoTheQuests()  # fantome des quetes ultimes
        elif Player.numero_de_letage == 6:
            self.DoTheOldMercant()  # alchimiste divin vampire demande manamax
        elif Player.numero_de_letage == 7:
            self.DoTheCursedBook()  # echange sorts/techniques pour carac
        elif Player.numero_de_letage == 8:
            self.DoTheFinalLibrary()  # bibliotheque de gros sorts (choisir sort a consigner)
        elif Player.numero_de_letage == 9:
            self.DoTheArtefactTrading()  # Achete des artefacts a Alfred

    def DoTheArtefactTrading(self):
        StopAllMusic()
        print("Alors que vous vous approchez du centre de la pièce, vous vous mettez a tomber, les deux pieds fermements ancrés dans le sol.")
        Affichage.EntreePourContinuer()
        print("La salle se met alors a tourner, et changer d'apparence, jusqu'a ce que vous arriviez sur une chaise.")
        Affichage.EntreePourContinuer()
        print("Une figure inconnue est assise, elle aussi, mais de l'autre coté d'une table d'ébène.")
        Affichage.EntreePourContinuer()
        print("Autour de vous se trouve un espace luxueux entouré d'une dizaine de portes.")
        Affichage.EntreePourContinuer()
        print("La figure tend alors une main que vous reconnaissez sans savoir pourquoi.")
        Affichage.EntreePourContinuer()
        PlayMusic("alfredproto")
        print("Alfred.")
        Affichage.EntreePourContinuer()
        print("*Eh bien ? On ne sert plus la main a son hôte maintenant ?* \n*Quoique, les règles d'usage ont du changer ces derniers siècles.*")
        Affichage.EntreePourContinuer()
        print("*Tu doit connaitre la chanson maintenant, ou pas.* \n*Je n'ai aucun moyen de savoir si c'est la toute première fois que l'on se voit, ou si le marionnettiste est un vétérant.*")
        Affichage.EntreePourContinuer()
        print("*Bref.*")
        Affichage.EntreePourContinuer()
        print("*2500 golds, et tu gagne un artefact aléatoire.*")
        Affichage.EntreePourContinuer()
        while True:
            while True:
                try:
                    print("     -=[ Alfred ]=-\n")
                    print("1 - Partir")
                    print("2 - Acheter un artefact aléatoire (2500 golds)")
                    print("3 - Parler")
                    choix = int(input("\nQu'est ce que tu veux ?  "))
                    ClearConsole()
                    if choix in [1, 2, 3]:
                        break
                except:
                    ClearConsole()
            if choix == 1:
                StopAllMusic()
                print("*Lève toi simplement si tu veux sortir, et retourne au centre de la pièce si tu veux rentrer.*")
                Affichage.EntreePourContinuer()
                print("Vous le regardez avec un air surpris.")
                Affichage.EntreePourContinuer()
                print("*Quoi ?* \n*L'étage entier est un embroglio de formes, couleurs, et objets qui agissent de manière impossible mais je n'ai pas le droit d'avoir une simple porte de maison cachée dans la 5ème dimension ?*")
                Affichage.EntreePourContinuer()
                print("Vous rougissez d'un air géné et vous relevez. \nBientot, la salle entière bouge sur elle même et vous tombez lourdement sur le sol de l'étage, vos pieds toujours fermements ancrés sur ledit sol.")
                Affichage.EntreePourContinuer()
                PlayMusicDeLetage()
                break
            elif choix == 2:
                if Player.nombre_de_gold >= 2500:
                    print("Vous tendez a Alfred votre bourse d'une main tremblottante, et le voyez engloutir vos golds durements gagnés dans une poche qui semble n'avoir pas de fond.")
                    Affichage.EntreePourContinuer()
                    Player.nombre_de_gold -= 2500
                    print("*Quel bohneur de faire affaire !*")
                    Affichage.EntreePourContinuer()
                    print("*Voici donc votre artefact aléatoire, très estimé client !*")
                    Affichage.EntreePourContinuer()
                    print("Alfred vous tend un petit coffre de bois noir, que vous ouvrez immédiatement.")
                    Affichage.EntreePourContinuer()
                    FloorMaker.GiveRandomArtefact()
                else:
                    StopAllMusic()
                    print("Alfred vous regarde avec l'air fatigué et non amusé d'un caissier qui entend pour une ènième fois : *Ya pas de code barre ? Ca doit etre gratuit alors !*")
                    Affichage.EntreePourContinuer()
                    print("Vous rougissez de votre manque de fonds, et vous levez dans la précipitation.")
                    Affichage.EntreePourContinuer()
                    print("La salle tourne sur elle meme, et vous jette violemment contre un des murs du onzième étage.")
                    Affichage.EntreePourContinuer()
                    print("Wow, trop la honte !")
                    Affichage.EntreePourContinuer()
                    PlayMusicDeLetage()
                    break
            elif choix == 3:
                print("*Me parler ?*")
                Affichage.EntreePourContinuer()
                print("Alfred rigole doucement.")
                Affichage.EntreePourContinuer()
                print("*Laisse moi deviner, tu n'avais pas cette option avec les autres marchands, alors t'a sauté sur l'opportunité pour moi ?*")
                Affichage.EntreePourContinuer()
                print("*En tout cas, ca confirme que c'est bien la première fois que tu viens chez moi.*")
                Affichage.EntreePourContinuer()
                print("*Ou alors, tu as fait la paix avec le fait que je vais te dire la même chose a chaque fois que tu utilise cette option...*")
                Affichage.EntreePourContinuer()
                print("*Quoi qu'il en soit, bienvenue chez moi !*")
                Affichage.EntreePourContinuer()
                print("*C'est un petit coin tranquille relié a tout les étages du Coliseum, caché dans une dimension crée de toute pièce par la fusion de tout les étages.*")
                Affichage.EntreePourContinuer()
                print("*J'y ai récupéré un sacré trésor au fur et a mesure des annéees , et je le dépense pour recréer ici une vie plutot bourgeoise, dont je profitait il y a très longtemps.*")
                Affichage.EntreePourContinuer()
                print("*Quoi dire de plus...je ne suis pas vraiment un Homme. La peau blanche que tu vois est maintenue ainsi grace a des composants rares que j'achete au marchand.*")
                Affichage.EntreePourContinuer()
                print("*Mon histoire ?* \n*Je faisait parti d'un groupe de quatres guerriers divinement choisis pour défendre une...porte.*\n* Nous étions mené par un Homme avec beaucoup de valeurs...trahi par son frère.*")
                Affichage.EntreePourContinuer()
                print("*Je suis le seul survivant de cette trahison.*")
                Affichage.EntreePourContinuer()
                print("*Depuis, la porte a été scellé, et le frère avec.*")
                Affichage.EntreePourContinuer()
                print("*Hum ? COmment je suis arrivé ici ?*")
                Affichage.EntreePourContinuer()
                print("*Je laisse cela à ton interprétation.*")
                Affichage.EntreePourContinuer()
                print("*...*")
                Affichage.EntreePourContinuer()
                print("*...mes intentions ?*")
                Affichage.EntreePourContinuer()
                print("Alfred regarde dans un coin de la pièce, et sourit.")
                Affichage.EntreePourContinuer()
                print("*Non, non... Je ne discute pas de ce genre de chose avec une simple poupée.*")
                Affichage.EntreePourContinuer()
                print("Alfred sourit, bien plus que physiquement possible.")
                Affichage.EntreePourContinuer()
                print("*Et si tu venait ici plutôt ?*")
                Affichage.EntreePourContinuer()
                StopAllMusic()
                print("*M A R I O N N E T T I S T E ?*")
                time.sleep(3)
                ClearConsole()
                print("[ERREUR : ACCES NON AUTORISE]")
                time.sleep(2)
                ClearConsole()
                print("[UTILISATION DU PARE FEU EN COURS...]")
                time.sleep(5)
                ClearConsole()
                print("[ACCES INTERROMPU. ]")
                time.sleep(2)
                ClearConsole()
                PlayMusic("alfredproto")
                print("*...tsk.*")
                Affichage.EntreePourContinuer()
                




    def DoTheCursedBook(self):
        print(
            "Dans une cage vide, vous trouvez un livre à moitié brulé dont la couverture représente une cigogne noire regardant vers le haut."
        )
        Affichage.EntreePourContinuer()
        print("Sur la première page, il y a [ERROR : DESCRIPTION NOT FOUND].")
        print("[IPV4 ADRESS OF LOST DESCRIPTION : 456852]")
        Affichage.EntreePourContinuer()
        while True:
            while True:
                try:
                    print("Vous posez la main sur la page, et pensez à:")
                    print("1 - Rien du tout.")
                    numero_a_afficher = 2
                    for sorts in Player.sorts_possedes:
                        print(f"{numero_a_afficher} - {sorts}")
                        numero_a_afficher += 1
                    for techniques in Player.techniques_possedes:
                        print(f"{numero_a_afficher} - {techniques}")
                        numero_a_afficher += 1
                    choix = int(input("\n"))
                    ClearConsole()
                    nombre_de_choix_possibles = (
                        len(Player.sorts_possedes) + len(Player.techniques_possedes) + 1
                    )
                    if choix in range(1, (nombre_de_choix_possibles + 1)):
                        break
                except ValueError:
                    ClearConsole()
            if choix == 1:
                print(
                    "Vous jetez à votre main un regard vide, et laissez tomber le livre sur le sol avant de repartir."
                )
                Affichage.EntreePourContinuer()
                break
            else:
                liste_de_sorts_et_techniques_a_oublier = []
                for sorts in Player.sorts_possedes:
                    liste_de_sorts_et_techniques_a_oublier.append(sorts)
                for techniques in Player.techniques_possedes:
                    liste_de_sorts_et_techniques_a_oublier.append(techniques)
                action_a_oublier = liste_de_sorts_et_techniques_a_oublier[(choix - 2)]
                Player.liste_daction_oubliees.append(action_a_oublier)
                if action_a_oublier in Player.sorts_possedes:
                    Player.sorts_possedes.remove(action_a_oublier)
                    type_daction = "Sort"
                else:
                    Player.techniques_possedes.remove(action_a_oublier)
                    type_daction = "Technique"
                print(
                    "Vous sentez quelque chose sortir de votre esprit et partir dans le livre, mais vous ne savez pas quoi."
                )
                print(f"La ligne [{action_a_oublier}] apparait sur la page d'après !")
                Affichage.EntreePourContinuer()
                action_a_oublier = self.EnleveurDaffix(action_a_oublier)
                self.DonneRecompensePourOubli(action_a_oublier, type_daction)
                self.DonneRecompensePourCertainsOubli()

    def EnleveurDaffix(self, action):
        liste_affix = ["~Rouge~", # +2 vie
                                   "~Carmin~", # +4 vie
                                   "~Violet~", # +2 mana
                                   "~Pourpre~", # +4 mana
                                   "~Jaune~", # +2 endurance
                                   "~Doré~", # +4 endurance
                                   "~Lolipop~", # +1 vie mana endurance
                                   "~Bubblegum~", # +2 vie mana endurance
                                   "~Escargot~", # +1% degat technique
                                   "~Limace~", # +1% degat sorts
                                   "~Citronnier~", # +0.5 degat critique technique
                                   "~Citron~", # +1 degat critique technique
                                   "~Cerisier~", # +0.5 degat critique sort
                                   "~Cerise~", # +1 degat critique sort
                                   "~Mars~", # +0.5% chance de bruler
                                   "~Neptune~", # +0.5% chance de geler
                                   "~Pluton~", # +0.25% chance de paralyser
                                   "~Lune~", # +0.5% chance de lapider
                                   "~Mercure~", # +0.5% chance de drain
                                   "~Ordre~", # peut bruler
                                   "~Aveugle~", # peut geler
                                   "~Limitation~", # peut lapider
                                   "~Transcendance~", # peut paralyser
                                   "~Eveil~", # peut drainer
                                   "~Antithèse~", # 15% chance d'arreter le gel
                                   "~Chaotique~", # 15% chance d'arreter la brulure
                                   "~Tache~", # 15% chance d'arreter la blessure
                                   "~Rature~", # 15% chance d'arreter la deconcentration
                                   "~Brouillon~", # 15% chance d'arreter la confusion
                                   "~Paragraphe~", # 6% chance d'enlever gel + brulure + blessure + deconcentration + confusion
                                   "~Magnum-Opus~", # 6% chance de donner numero_etage * 5 golds
                                   "~Agrume~", # 6% chance d'être béni
                                   "~Raisin~", # 6% chance d'être en folie
                                   "~Durian~", # 6% chance d'être en furie
                                   "~Gingembre~", # 6% chance d'être jindagee 2 tours
                                   "~Mandragore~", # 6% chance d'être aatma 2 tours
                                   "~Nigredo~", # 2% chance reprendre full vie
                                   "~Albédo~", # 2% chance reprendre full mana
                                   "~Citrinitas~", # 2% chance reprendre full endurance
                                   "~Chrysalide~", # 2% chance devenir invincible 2 tours
                                   ]
        action_transformee_en_liste = list(action.split())
        liste_mot = []
        for mot in action_transformee_en_liste:
            if mot in liste_affix:
                pass
            else:
                liste_mot.append(mot)

        action_sans_affixe = ""
        for mot in liste_mot:
            action_sans_affixe += mot
            if liste_mot[len(liste_mot) - 1] != mot:
                action_sans_affixe += " "

        return action_sans_affixe

    def DonneRecompensePourCertainsOubli(self):
        if (
            "Corne Granite" in Player.liste_daction_oubliees
            and "Création de Granite" in Player.liste_daction_oubliees
        ):
            print(
                "Les lignes Corne Granite et Création de Granite brillent avant de disparaitre."
            )
            print("Vous gagnez 4 points de défence !")
            Player.liste_daction_oubliees.remove("Corne Granite")
            Player.liste_daction_oubliees.remove("Création de Granite")
            Player.points_de_defence += 4
        elif (
            "Explosion de la Comète" in Player.liste_daction_oubliees
            and "Thermosphère Solaire" in Player.liste_daction_oubliees
        ):
            print(
                "Les lignes Explosion de la Comète et Thermosphère Solaire brillent avant de disparaitre."
            )
            print(
                "Vous gagnez 15 points de mana max et 5% de chance de faire un sort critique !"
            )
            Player.points_de_mana_max += 15
            Player.taux_sort_critique += 5
            Player.liste_daction_oubliees.remove("Explosion de la Comète")
            Player.liste_daction_oubliees.remove("Thermosphère Solaire")
        elif (
            "Dague Vampirique" in Player.liste_daction_oubliees
            and "Sonata Miséricordieuse" in Player.liste_daction_oubliees
        ):
            print(
                "Les lignes Dague Vampirique et Sonata Miséricordieuse brillent avant de disparaitre."
            )
            print("Vous gagnez 5% de chance d'esquiver !")
            Player.taux_desquive += 5
            Player.liste_daction_oubliees.remove("Dague Vampirique")
            Player.liste_daction_oubliees.remove("Sonata Miséricordieuse")
        elif (
            "Lance de l'Eclair" in Player.liste_daction_oubliees
            and "Katana Polaire" in Player.liste_daction_oubliees
        ):
            print(
                "Les lignes Lance de l'Eclair et Katana Polaire brillent avant de disparaitre."
            )
            print(
                "Vous gagnez 15 points de vie max 5% de chance de faire un coup critique !"
            )
            Player.points_de_vie_max += 15
            Player.taux_coup_critique += 5
            Player.liste_daction_oubliees.remove("Lance de l'Eclair")
            Player.liste_daction_oubliees.remove("Katana Polaire")
        elif (
            "Dance Destructrice" in Player.liste_daction_oubliees
            and "Poing Fatal" in Player.liste_daction_oubliees
        ):
            print(
                "Les lignes Dance Destructrice et Poing Fatal brillent avant de disparaitre."
            )
            print("Vous gagnez 4 points de force !")
            Player.points_de_force += 4
            Player.liste_daction_oubliees.remove("Dance Destructrice")
            Player.liste_daction_oubliees.remove("Poing Fatal")
        elif (
            "Faisceau Rapide" in Player.liste_daction_oubliees
            and "Bô de la Fournaise" in Player.liste_daction_oubliees
        ):
            print(
                "Les lignes Faisceau Rapide et Bô de la Fournaise brillent avant de disparaitre."
            )
            print("Vous gagnez 4 points d'intelligence !")
            Player.points_dintelligence += 4
            Player.liste_daction_oubliees.remove("Faisceau Rapide")
            Player.liste_daction_oubliees.remove("Bô de la Fournaise")
        elif (
            "Pic Zéro" in Player.liste_daction_oubliees
            and "Sonata Bienveillante" in Player.liste_daction_oubliees
            and "Création Obsidienne" in Player.liste_daction_oubliees
            and "Lance Electrique" in Player.liste_daction_oubliees
            and "Bô Chaud" in Player.liste_daction_oubliees
            and "Katana Froid" in Player.liste_daction_oubliees
        ):
            StopAllMusic()
            print(
                "Les lignes Pic Zéro, Sonata Bienveillante, "
                "Création Obsidienne, Lance Electrique, "
                "Katana Froid et Bô Chaud brillent avant de disparaitre."
            )
            print(
                "Des mots apparaissent, lettres après lettres, sur la quatrième de couverture."
            )
            print("Comme écrits par une main invisible.")
            Player.liste_daction_oubliees.remove("Pic Zéro")
            Player.liste_daction_oubliees.remove("Sonata Bienveillante")
            Player.liste_daction_oubliees.remove("Création Obsidienne")
            Player.liste_daction_oubliees.remove("Lance Electrique")
            Player.liste_daction_oubliees.remove("Katana Froid")
            Player.liste_daction_oubliees.remove("Bô Chaud")
            Affichage.EntreePourContinuer()
            PlayMusic("quiet")
            print("      -=Métamorphose=-")
            print("")
            time.sleep(5)
            print("Mon cher amour.")
            time.sleep(5)
            print("De la plus grande plume d'oie")
            time.sleep(5)
            print("A la plus pitoyable tache d'encre,")
            time.sleep(5)
            print("Du plus radiant des passés")
            time.sleep(5)
            print("Au plus austère des futurs,")
            time.sleep(5)
            print("De la plus belle femme du monde")
            time.sleep(5)
            print("A la plus misérable des ombres,")
            time.sleep(5)
            print("Dans la paume de tes mains tourne")
            time.sleep(5)
            print("Ma vie mon monde mon éternitée,")
            time.sleep(5)
            print("Du pire des meilleurs, aux meilleurs du pire .")
            time.sleep(10)
            print("Avec le prix de mon âme,")
            time.sleep(5)
            print("Le sépulcre de ton royaume,")
            time.sleep(5)
            print("Et la mort de ton présent,")
            time.sleep(5)
            print("Enfin j'espère, enfin je vis, enfin j'ose,")
            time.sleep(5)
            print("M'offrir cette métamorphose .")
            time.sleep(5)
            print("Et de la plus pitoyable tache d'encre,")
            time.sleep(5)
            print("A la plus grande plume d'oie,")
            time.sleep(5)
            print("Du plus austère des passés")
            time.sleep(5)
            print("Au plus radiant des futurs,")
            time.sleep(5)
            print("De la plus misérable femme du monde")
            time.sleep(5)
            print("A la plus belle des ombres,")
            time.sleep(5)
            print("Je renais dans tes cendres.")
            time.sleep(5)
            print("")
            print("                     -(nom illisible) Mage,")
            print("                          An de grâce 1233")
            print("")
            time.sleep(5)
            Affichage.EntreePourContinuer()
            StopAllMusic()
            print("La cage est ici.")
            print("Mais l'oie s'est envolée ailleurs.")
            Affichage.EntreePourContinuer()
            PlayMusicDeLetage()

    def DonneRecompensePourOubli(self, action_a_oublier, type_daction):
        # trouve le niveau de laction oubliée
        liste_daction_de_même_rang = []
        for rang in range(0, 6):
            if type_daction == "Technique":
                for numero in range(0, 6):
                    index = rang + (numero * 6)
                    liste_daction_de_même_rang.append(LISTETECHNIQUES[index])
            elif type_daction == "Sort":
                for numero in range(0, 7):
                    index = rang + (numero * 6)
                    liste_daction_de_même_rang.append(LISTESORTS[index])
            if action_a_oublier in liste_daction_de_même_rang:
                rang_de_laction = rang + 1
                break
            liste_daction_de_même_rang = []
        # nombre de pv/mana rendu, golds gagné, carac supp
        gain = 5 + rang_de_laction * 5
        gold_gagne = 100 + rang_de_laction * 5
        Player.AddGoldToPlayer(gold_gagne)
        dmg_critique_gagne = 2 * rang_de_laction
        taux_gagne = rang_de_laction
        if type_daction == "Technique":
            type_gain = "pv"
            type_caracteristique = "techniques"
            Player.points_de_vie_max += gain
            Player.points_de_vie += gain
            Player.taux_coup_critique += taux_gagne
            Player.degat_coup_critique += dmg_critique_gagne
        elif type_daction == "Sort":
            type_gain = "pm"
            type_caracteristique = "sorts"
            Player.points_de_mana_max += gain
            Player.points_de_mana += gain
            Player.taux_sort_critique += taux_gagne
            Player.degat_sort_critique += dmg_critique_gagne
        print(f"Vous gagnez {gain} {type_gain} max !")
        print(
            f"Vous gagnez {dmg_critique_gagne} points de dégats de {type_caracteristique} critiques !"
        )
        print(
            f"Vous gagnez {taux_gagne}% de chance de faire des {type_caracteristique} critiques !"
        )
        Affichage.EntreePourContinuer()

    def DoTheOldMercant(self):
        if not Player.mercant_healed:
            print(
                "Vous voyez de la lumière dans une des maisons."
                "\nAlors que vous entrez, vous découvrez une vieille femme mourrante, allongée sur un vieux lit décrépit."
            )
            print("Vous l'entendez vous dire d'une voix faible : *Aidez...moi...*")
            Affichage.EntreePourContinuer()
            while True:
                try:
                    print("*Pas...besoin de beaucoup...*")
                    print("*huit...dix...pas plus...*")
                    print("La dame vous regarde bizarrement.")
                    print("S'approcher ?")
                    print("(Vous risqueriez de le regretter)")
                    print("1 - Non")
                    print("2 - Oui")
                    choix = int(input("\n"))
                    ClearConsole()
                    if choix in [1, 2]:
                        break
                except ValueError:
                    ClearConsole()
            if choix == 1:
                print("Vous retournez sur vos pas.")
                Affichage.EntreePourContinuer()
            else:
                print(
                    "Vous vous approchez de la dame, et elle se met a murmurer quelque chose en boucle."
                )
                print("Vous tendez l'oreille et vous mettez a son chevet...")
                Affichage.EntreePourContinuer()
                print("*Merci.*")
                Affichage.EntreePourContinuer()
                print(
                    "Elle se jette sur vous avec la fureur d'un diable, et plante ses crocs dans votre gorge !"
                )
                print(
                    "Vous tentez de la faire lacher prise, mais elle s'aggripe a vous avec encore plus de force."
                )
                print("Vous sentez vos forces diminuer...")
                Affichage.EntreePourContinuer()
                Player.points_de_vie_max -= 15
                Player.points_de_vie -= 15
                Player.points_de_mana_max -= 15
                Player.points_de_mana -= 15
                if Player.points_de_vie <= 0:
                    StopAllMusic()
                    PlaySound("death")
                    print("..et vous mourrez.")
                    Affichage.EntreePourContinuer()
                    Player.player_tags.append("KIA")
                    CheckForKIA()
                else:
                    Player.points_de_vie = 1
                    Player.points_de_mana = 0
                    Player.mercant_healed = True
                    print(
                        "...et alors que vous appretez a fermer les yeux pour la derniere fois, la dame vous lache."
                    )
                    Affichage.EntreePourContinuer()
                    print(
                        "*Merci jeune homme.*"
                        "\n*Cela faisait longtemps que je n'avais pas eu pareil festin. Ho ho ho !*"
                    )
                    print(
                        "*Revenez me voir d'ici quelques minutes et j'aurais de quoi rembourser votre générosité.*"
                    )
                    Affichage.EntreePourContinuer()
                    print(
                        "Vous avez (été forcé d')accepté(r) la quête [La Générositée d'une Alchimiste] !"
                    )
                    print("Retournez voir l'alchimiste le plus vite possible !")
                    Player.quete = "La Générositée d'une Alchimiste"
                    Affichage.EntreePourContinuer()
                    print("Vous sortez de la maison en gémissant.")
                    print("Vous avez perdu 15 points de vie et de mana max !")
                    print(
                        "Vos points de vie et de mana sont aussi au minimum ! Allez vite vous faire soigner !"
                    )
                    Affichage.EntreePourContinuer()
        else:
            print(
                "Vous voyez de la lumière dans une des maisons."
                "\nVous passez la porte primitive de taule et d'acier, et découvrez derrière une modeste échoppe."
            )
            print(
                "Sur l'étalage, des items d'une raretée phénoménale sont exposés derrière une vitre ."
            )
            print("Vous entendez une voix familière derrière le comptoir.")
            Affichage.EntreePourContinuer()
            if Player.quete == "La Générositée d'une Alchimiste":
                print("*Merci encore pour le remontant, jeune homme.*")
                print(
                    "*Je me présente : Mariette, alchimiste en quête de nouveaux ingrédients.*"
                )
                Affichage.EntreePourContinuer()
                print("*Vampire à mes heures perdues.*")
                Affichage.EntreePourContinuer()
                print(
                    "*La...condition...de cet étage fait que beaucoup de choses bizarres s'y produisent.*"
                    "\n*Comme par exemple la force mysterieuse qui fait que toutes mes productions passent de magistrales à divine !*"
                )
                print(
                    "*Ducoup je vis ici avec la permission du nouveau maitre des lieux, et je lui donne deux trois remèdes en échange .*"
                )
                Affichage.EntreePourContinuer()
                print("*Ce genre de choses.*")
                Affichage.EntreePourContinuer()
                PlaySound("questdone")
                print("Vous recevez un remède divin et une pillule divine !")
                print("Vous avez accompli la quête [La Générositée d'une Alchimiste] !")
                Player.quete_complete.append(Player.quete)
                if "None" in Player.quete_complete:
                    Player.quete_complete.remove("None")
                Player.quete = "None"
                Affichage.EntreePourContinuer()
                PlayMusicDeLetage()
                print(
                    "*Ceux la sont gratuits, mais les autres ne le seront pas. Ho ho ho !*"
                )
                Affichage.EntreePourContinuer()
            if not "Fantome" in Player.player_tags:
                while True:
                    while True:
                        try:
                            print("*Vous voyez quelque chose qui vous plait ?*")
                            print(
                                "*J'espère que ce n'est pas moi, car je ne suis pas a vendre ! Ho ho ho !*"
                            )
                            print("1 - Partir")
                            print("2 - Remède Divin: 150 golds")
                            print("3 - Pillule Divine: 170 golds")
                            print("4 - Grand Mutagène Doré: 200 golds")
                            print("5 - Soluté d'Absolution: 100 golds")
                            print("6 - Soluté d'Exorcisme: 200 golds")
                            print("7 - Larmes de Vénus: 300 golds")
                            choix = int(
                                input(
                                    f"Vous avez {Player.nombre_de_gold} golds. Que souhaitez vous acheter ? "
                                )
                            )
                            ClearConsole()
                            if choix in range(1, 8):
                                break
                        except ValueError:
                            ClearConsole()
                    if choix == 1:
                        print("*Au revoir !*")
                        Affichage.EntreePourContinuer()
                        break
                    if choix in range(2, 8):
                        if choix == 2:
                            cout = 150
                            nom_de_litem = "Remède Divin"
                        elif choix == 3:
                            cout = 170
                            nom_de_litem = "Pillule Divine"
                        elif choix == 4:
                            cout = 200
                            nom_de_litem = "Grand Mutagène Doré"
                        elif choix == 5:
                            cout = 100
                            nom_de_litem = "Soluté d'Absolution"
                        elif choix == 6:
                            cout = 200
                            nom_de_litem = "Soluté d'Exorcisme"
                        elif choix == 7:
                            cout = 300
                            nom_de_litem = "Larmes de Vénus"
                        if Player.nombre_de_gold >= cout:
                            Player.nombre_de_gold -= cout
                            if nom_de_litem == "Larmes de Vénus":
                                FloorMaker.GiveRandomArtefact("Larmes de Vénus","Don")
                                print("Vous achetez l'artefact [Larmes de Vénus] !")
                                print("Cette fiole emplie d'un soluté magnifique permet d'apaiser les feux de la colère et ne laisse derrière que les ombres de la culpabilité.\nLes effets des orbes de folie et furie durent un tour de plus !")
                            else:
                                print(f"Vous achetez l'item [{nom_de_litem}] !")
                                Player.items_possedes[nom_de_litem] += 1
                            Affichage.EntreePourContinuer()
                            print(
                                "(Mariette vous prend le front a deux main et vous y laisse un gros bisou)"
                            )
                            print("*Vous êtes un amour !*")
                            Affichage.EntreePourContinuer()
                        else:
                            print(
                                "*C'est beau de vouloir soutenir un commerce de proximité,"
                                " mais si vous n'avez pas assez de golds, ca me met dans l'embarras plus qu'autre chose .*"
                            )
                            Affichage.EntreePourContinuer()
                            print("*Qu'importe, c'est l'intention qui compte !*")
                            print("*Prenez donc ceci pour votre gentillesse.*")
                            Affichage.EntreePourContinuer()
                            print("Mariette vous donne un remède !")
                            Player.items_possedes["Remède"] += 1
                            Affichage.EntreePourContinuer()

    def DoTheFinalLibrary(self):
        print(
            "Entre deux piliers de tufs, vous découvrez un couloir singulier."
            "\nA l'interieur, vous sentez votre coeur s'arreter de battre...sans que cela ne vous affecte."
            "\nA la fin du couloir, vous trouvez une magnifique bibliothèque de bois ornemental, dans lequel sont rangés des livres de toutes les couleurs."
        )
        Affichage.EntreePourContinuer()
        while True:
            while True:
                nombre_a_afficher = 2
                try:
                    print("Seuls certains livres attirent votre attention :")
                    print("1 - Partir")
                    for livre in BIBLIOTHEQUEFINALE:
                        print(f"{nombre_a_afficher} - Prendre le livre [{livre}]")
                        nombre_a_afficher += 1
                    choix = int(input("Que souhaitez vous faire ?"))
                    ClearConsole()
                    if choix in range(1, (len(BIBLIOTHEQUEFINALE) + 2)):
                        break
                except ValueError:
                    ClearConsole()
            if choix == 1:
                print(
                    "Vous laissez la bibliothèque derriere vous et sortez du couloir."
                )
                print("A votre plus grand soulagement, votre coeur se remet a battre.")
                Affichage.EntreePourContinuer()
                break
            elif choix == 19:
                self.WriteInFinalBook()
            else:
                print("Vous ouvrez le livre à une page aléatoire.")
                Affichage.EntreePourContinuer()
                dictionnaire_sous_forme_de_liste = list(BIBLIOTHEQUEFINALE)
                nom_du_livre = dictionnaire_sous_forme_de_liste[(choix - 2)]
                liste_de_passages_a_lire = BIBLIOTHEQUEFINALE[nom_du_livre]
                for passage in liste_de_passages_a_lire:
                    print(passage)
                    Affichage.EntreePourContinuer()
                print("Vous refermez le livre et le reposez dans la bibliothèque.")
                Affichage.EntreePourContinuer()

    def WriteInFinalBook(self):
        print("Vous prenez le livre familier et observez sa couverture.")
        print("Une magnifique cigogne rouge regarde vers la gauche.")
        print(
            "Sur la première page, vous retrouvez les mêmes lignes que dans le livre de la cigogne bleue a une différence près :"
        )
        print("Elles ne se font pas absorber quand vous les touchez.")
        Affichage.EntreePourContinuer()
        print("Vous pouvez y lire les phrases suivantes :")
        donnees_de_s0ve = self.GetPermanentThingsFromS0ve()
        liste_de_sorts_enregistres = ast.literal_eval(donnees_de_s0ve["Livre de sort"])
        for sort in liste_de_sorts_enregistres:
            print(sort)
        Affichage.EntreePourContinuer()
        if not Player.final_library_used:
            print("...?")
            Affichage.EntreePourContinuer()
            while True:
                try:
                    print(
                        "On dirait presque que le livre tente d'absorber votre mana..."
                    )
                    print("1 - Remettre le livre a sa place")
                    print("2 - Le laisser absorber votre mana (Coute 100pm)")
                    choix = int(input("Que souhaitez vous faire ? "))
                    ClearConsole()
                    if choix in [1, 2]:
                        break
                except ValueError:
                    ClearConsole()
            if choix == 1:
                print("Vous refermez le livre et le reposez dans la bibliothèque.")
                Affichage.EntreePourContinuer()
            elif choix == 2 and Player.points_de_mana < 100:
                print("Vous n'avez pas assez de mana !")
                print("Vous refermez le livre et le reposez dans la bibliothèque.")
                Affichage.EntreePourContinuer()
            else:
                Player.points_de_mana -= 100
                print(
                    "Vous laissez le livre prendre votre mana.\nUne aura bleue commence a l'entourer, puis il se referme violemment sur votre bras !"
                )
                Affichage.EntreePourContinuer()
                while True:
                    try:
                        print(
                            "Vous ne pouvez pas risquer d'endommager votre bras avec une technique, il faut se débarrasser du bouquin avec un sort !"
                        )
                        numero_affichage = 1
                        for sorts in Player.sorts_possedes:
                            print(f"{numero_affichage} - {sorts}")
                            numero_affichage += 1
                        choix = int(input("Quel sort souhaitez-vous utiliser ? "))
                        ClearConsole()
                        if choix in range(1, (len(Player.sorts_possedes) + 1)):
                            break
                    except ValueError:
                        ClearConsole()
                sort_choisi = Player.sorts_possedes[(choix - 1)]
                self.AddSpellToS0ve(sort_choisi)
                Player.final_library_used = True
                Save.SaveTheGameSansAffichage()
                print(
                    "Vous lancez le sort et, dans un flash de lumière illuminant le livre, vous le sentez disparaitre !"
                )
                Affichage.EntreePourContinuer()
                print(
                    f"Vous avez inscrit le sort [{sort_choisi}] dans le livre de la Cigogne Rouge !"
                )
                Affichage.EntreePourContinuer()
                print(
                    "Le livre lache votre bras, et vous le replacez dans la bibliothèque."
                )
                Affichage.EntreePourContinuer()
        else:
            print("Vous refermez le livre et le reposez dans la bibliothèque.")
            Affichage.EntreePourContinuer()

    def AddSpellToS0ve(self, sort_choisi):
        donnees_de_s0ve = self.GetPermanentThingsFromS0ve()
        liste_de_sorts_enregistres = ast.literal_eval(donnees_de_s0ve["Livre de sort"])
        if not (sort_choisi in liste_de_sorts_enregistres):
            liste_de_sorts_enregistres.append(sort_choisi)
            donnees_de_s0ve["Livre de sort"] = liste_de_sorts_enregistres
            self.SetPermanentThingsToS0ve(donnees_de_s0ve)

    def AddSoulToS0ve(self):
        donnees_de_s0ve = self.GetPermanentThingsFromS0ve()
        if donnees_de_s0ve["486241597531"] != "Jean.rar":
            donnees_de_s0ve["486241597531"] = "Jean.rar"
            self.SetPermanentThingsToS0ve(donnees_de_s0ve)

    def DoTheQuests(self):
        if Player.quest_giver:
            if Player.quete == "Voeu de Pauvreté" and Player.nombre_de_gold == 0:
                Player.quete += " [Complete]"
            print(
                "Dans un coin de la fête foraine, dans une grande poubelle, vous apercevez un robot primitif fait de métal, avec des nuances de cuivre, d'acier ou de bronze."
            )
            print(
                "Alors que vous vous approchez de la machine, son visage d'aluminum dans lequel ont été creusé 3 trous pour les yeux et la bouche s'illumine de l'interieur."
            )
            Affichage.EntreePourContinuer()
            print("*Hey, toi la, ouai toi, approche n'aie pas peur !*")
            print(
                "*Je suis un ancien explorateur, comme toi.*\n*J'ai appris deux trois trucs avant de mourir, et je suis prêt a te les apprendre si tu fais des trucs pour moi.*"
            )
            Affichage.EntreePourContinuer()
            while True:
                while True:
                    try:
                        print(
                            "*Sers toi en quete, et fais gaffe ! Je saurais si tu a triché ou pas !*\n"
                        )
                        print("1 - Retour\n")
                        print(
                            "2 - Voeu de Pauvreté : Reviens me voir avec 0 golds dans ton inventaire ! (Rang E)"
                        )
                        print(
                            "3 - Interminable : Fais durer ton prochain combat jusqu'au tour 50 (Rang D)\n"
                        )
                        print(
                            "4 - Epreuve du Magister : Bats les 4 prochains ennemis sans utiliser d'action de Feu, Foudre, Glace (Rang C)"
                        )
                        print(
                            "5 - Epreuve des Mages-Epeistes : Bats les 4 prochains ennemis sans utiliser d'action de Terre, Physique, Sang (Rang C)\n"
                        )
                        print(
                            "6 - Force et Honneur : Bats les 8 prochains ennemis sans utiliser d'items en combat (Rang B)"
                        )
                        print(
                            "7 - Moqueries Magiques/Techniques : Bats le Bouffon sans utiliser de sorts ou de techniques [au choix] (Rang A)\n"
                        )
                        print("8 - Sérendipité : Finis toute les quêtes (Rang S)\n")
                        print(f"9 - Abandonner la quête en cours : [{Player.quete}]\n")
                        choix = int(
                            input(
                                "Que souhaitez vous faire ? (Vous ne pouvez prendre qu'une seule quête à la fois.)"
                            )
                        )
                        ClearConsole()
                        if choix in range(1, 10):
                            break
                    except ValueError:
                        ClearConsole()
                if choix == 1:
                    print(
                        "Vous laissez la boite de métal parler toute seule, et revenez sur vos pas."
                    )
                    Affichage.EntreePourContinuer()
                    break
                elif (Player.quete != "None") and (choix != 9):
                    if "[Complete]" in Player.quete:
                        print("Bien joué ! Voila ta récompense !")
                        self.DonneRecompenseQuete()
                        quete_reussie = Player.quete
                        quete_reussie = quete_reussie.rstrip("[Complete]").rstrip()
                        Player.quete_complete.append(quete_reussie)
                        if "None" in Player.quete_complete:
                            Player.quete_complete.remove("None")
                        Player.quete = "None"
                    else:
                        print("*T'a déja prit une quete ! Ouste !*")
                        Affichage.EntreePourContinuer()
                elif choix == 2:
                    if "Voeu de Pauvreté" in Player.quete_complete:
                        print("*Tu l'as déja faite celle là.*")
                        Affichage.EntreePourContinuer()
                    else:
                        print(
                            "*C'est plutot simple ! Utilise tout ton argent et reviens me voir.*"
                            "\n*Je te validerait la quete a ce moment la.*"
                        )
                        print("Vous avez accepté la quête [Voeu de Pauvreté]")
                        Affichage.EntreePourContinuer()
                        Player.quete = "Voeu de Pauvreté"
                elif choix == 3:
                    if "Interminable" in Player.quete_complete:
                        print("*Tu l'as déja faite celle là.*")
                        Affichage.EntreePourContinuer()
                    else:
                        print(
                            "*Ton prochain combat, boss ou monstre, fait le durer jusqu'au 50eme tour minimum.*"
                            "\n*Si tu échoue, reviens me voir et je te la redonnerais.*"
                        )
                        print("Vous avez accepté la quête [Interminable]")
                        Affichage.EntreePourContinuer()
                        Player.quete = "Interminable"
                elif choix == 4:
                    if "Epreuve du Magister" in Player.quete_complete:
                        print("*Tu l'as déja faite celle là.*")
                        Affichage.EntreePourContinuer()
                    else:
                        print(
                            "*On donnait cette épreuve aux membres du Magister, un consort de mages de la nature.*"
                            "\n*Tu échoue si tu use de Techniques ou Sorts en lien avec le Feu, la Foudre ou la Glace pendant les 4 prochains combats.*"
                        )
                        print(
                            "*Le Tir Arcanique et l'attaque Légère ont tout deux l'élément Physique !*"
                        )
                        print("Vous avez accepté la quête [Epreuve du Magister]")
                        Affichage.EntreePourContinuer()
                        Player.quete = "Epreuve du Magister"
                elif choix == 5:
                    if "Epreuve des Mages-Epeistes" in Player.quete_complete:
                        print("*Tu l'as déja faite celle là.*")
                        Affichage.EntreePourContinuer()
                    else:
                        print(
                            "*On donnait cette épreuve à l'escouade des Mages-Epeistes, au service de sa Majestée.*"
                            "\n*Tu échoue si tu use de Techniques ou Sorts en lien avec la Terre, le Sang ou le Physique pendant les 4 prochains combats.*"
                        )
                        print(
                            "*Attention ! Le Tir Arcanique et l'attaque Légère ont tout deux l'élément Physique !*"
                        )
                        print("Vous avez accepté la quête [Epreuve des Mages-Epeistes]")
                        Affichage.EntreePourContinuer()
                        Player.quete = "Epreuve des Mages-Epeistes"
                elif choix == 6:
                    if "Force et Honneur" in Player.quete_complete:
                        print("*Tu l'as déja faite celle là.*")
                        Affichage.EntreePourContinuer()
                    else:
                        print(
                            "*Les aventuriers se reposent trop sur leur force donnée, les objets, et pas assez sur leur force acquise, les sorts et techniques.*"
                            "\n*Libère toi des chaines du consummérisme !*"
                        )
                        print("Vous avez accepté la quête [Force et Honneur]")
                        Affichage.EntreePourContinuer()
                        Player.quete = "Force et Honneur"
                elif choix == 7:
                    if (
                        "Moqueries Magiques" in Player.quete_complete
                        or "Moqueries Techniques" in Player.quete_complete
                    ):
                        print("*Tu l'as déja faite celle là.*")
                        Affichage.EntreePourContinuer()
                    else:
                        while True:
                            try:
                                print(
                                    "*Je me suis fais humilier par le Bouffon, et en échange il m'a foutu dans cette boite de conserve pour l'éternitée.*"
                                    "\n*Humilie le pour moi !*"
                                )
                                print("1 - *Tu préfere l'écraser sans Sorts ?*")
                                print("2 - *Tu préfère l'écraser sans Techniques ?*")
                                choix_quete = int(input("Que souhaitez vous faire ? "))
                                ClearConsole()
                                if choix_quete in [1, 2]:
                                    break
                            except ValueError:
                                ClearConsole()
                        if choix_quete == 1:
                            print("*Qu'il en soit ainsi !*")
                            print("Vous avez accepté la quête [Moqueries Magiques]")
                            Player.quete = "Moqueries Magiques"
                        else:
                            print("*Qu'il en soit ainsi !*")
                            print("Vous avez accepté la quête [Moqueries Techniques]")
                            Player.quete = "Moqueries Techniques"
                        Affichage.EntreePourContinuer()
                elif choix == 8:
                    if "Sérendipité" in Player.quete_complete:
                        print("*Tu l'as déja faite celle là.*")
                        Affichage.EntreePourContinuer()
                    elif (
                        (
                            "Moqueries Magiques" in Player.quete_complete
                            or "Moqueries Techniques" in Player.quete_complete
                        )
                        and ("Force et Honneur" in Player.quete_complete)
                        and ("Epreuve des Mages-Epeistes" in Player.quete_complete)
                        and ("Epreuve du Magister" in Player.quete_complete)
                        and ("Interminable" in Player.quete_complete)
                        and ("Voeu de Pauvreté" in Player.quete_complete)
                    ):
                        Player.quete_complete.append("Sérendipité")
                        self.AfficheSecretQuetes()
                        break
                    else:
                        print("Tu n'a pas réussi toute mes demandes.")
                        print("Reviens me voir lorsque ce sera le cas.")
                        Affichage.EntreePourContinuer()
                elif choix == 9:
                    if Player.quete == "None":
                        print("*Tu n'a pas de quêtes en cours !*")
                        print("*Reviens lorsque ce sera le cas.*")
                    elif "[Complete]" in Player.quete:
                        print("Et puis quoi encore ??")
                    else:
                        print(f"*Tu veux abandonner la quête [{Player.quete}] ?*")
                        print("*Très bien, c'est noté.*")
                        Player.quete = "None"
                    Affichage.EntreePourContinuer()
        else:
            print("Il y a un cratère de suie, de déchets, et de bouts de chairs.")
            Affichage.EntreePourContinuer()
            print("Parmis les décombres, vous trouvez une carte étudiante :")
            Affichage.EntreePourContinuer()
            print(
                "Adrien Stéfalnos\nProfesseur d'Archéologie\nCampus de Capital City\nNuméro de badge: 3236353"
            )
            Affichage.EntreePourContinuer()
            print("Vous laissez le cratère et retournez sur vos pas.")
            Affichage.EntreePourContinuer()
            Sove.RajouteEntreeAuLivreCigogneBlancheSiOnAPas("???", "Sérendipité")

    def AfficheSecretQuetes(self):
        StopAllMusic()
        print(
            "*Tu as rendu un fier service a ce vieux spectre.*\n*C'est dingue a quel point on peut s'ennuyer quand on a plus controle de ses membres, et qu'on est enfermé dans une idole d'acier.*"
        )
        print(
            "*Je n'ai plus rien a te donner, a part peut etre une histoire, alors écoute bien :*"
        )
        Affichage.EntreePourContinuer()
        print(
            "*C'était il y a très longtemps.*\n*Un âge tellement reculé que personne ne s'en souvient.*"
        )
        print(
            "*Enfaite, cette histoire vient d'images retrouvées dans d'anciens temples enfouis, pour te dire a quel point c'est vieux.*"
        )
        print(
            "*On a même pas de traces dans les livres d'histoires, ou même sous forme de traditions ou chants !*"
        )
        Affichage.EntreePourContinuer()
        print("*Mais je m'égare.*")
        Affichage.EntreePourContinuer()
        PlayMusic("tales")
        print(
            "*C'est un chateau dans le ciel. Ou une île volante de marbre blanc. Ou encore un palace porté dans les airs par un oiseau invisible.*"
        )
        Affichage.EntreePourContinuer()
        print(
            "*C'est un lieu impossible, ou chaque portes et chaque couloirs mènent a des endroits différents selon l'endroit et le temps.*"
        )
        Affichage.EntreePourContinuer()
        print(
            "*Ce sont des êtres puissants, des démons, des esprits, portant de lourds fardeaux, chacun s'occupant d'un aspect de la réalité.*"
        )
        Affichage.EntreePourContinuer()
        print(
            "*C'est une batisse abritant les dieux, crée a partir d'un joyau, d'une pièce, du coeur d'un ange, ou de l'oeil d'un guerrier.*"
        )
        Affichage.EntreePourContinuer()
        print(
            "*C'est un pouvoir qui traverse les dimensions, teinté par la pureté de l'âme qui se l'approprie.*"
        )
        Affichage.EntreePourContinuer()
        print(
            "*C'est un monde éteint, endormi, attisé par les mains divines, hostile.*"
        )
        Affichage.EntreePourContinuer()
        print(
            "*C'est une guerre entre nos protecteurs et les légions de voyageurs, aux portes du monde étranger, dans un lieu ou les roses ne fânent jamais.*"
        )
        Affichage.EntreePourContinuer()
        print(
            "*C'est la fiertée de 5 êtres exceptionels choisis pour défendre la porte des étoiles.*"
        )
        Affichage.EntreePourContinuer()
        print(
            "*C'est la douleur du fratricide, l'odeur du pétrichor carmin, les vents d'un affrontement décisif.*"
        )
        Affichage.EntreePourContinuer()
        print(
            "*C'est la disparition de toutes les divinités de ce monde, comme prix a payer pour refermer ce qui n'aurait jamais du être ouvert.*"
        )
        Affichage.EntreePourContinuer()
        print(
            "*C'est la chute de la grandeur et fierté des dieux dans l'oubli d'un océan sans nom.*"
        )
        Affichage.EntreePourContinuer()
        print(
            "*Cette histoire, c'est celle de la guerre de l'interdit. Ou en tout cas c'est le nom sur lequel se sont mises d'accord les anciennes gravures.*"
        )
        Affichage.EntreePourContinuer()
        print("*Mais laisse moi donc la continuer avec ma... théorie.*")
        Affichage.EntreePourContinuer()
        print("*La raison pour laquelle je suis ici.*")
        Affichage.EntreePourContinuer()
        print("*La raison pour laquelle j'ai persisté toute ces années.*")
        Affichage.EntreePourContinuer()
        print("(la lumière dans la statue se fait plus faible.)")
        Affichage.EntreePourContinuer()
        print("*C'est peut etre la fin de l'histoire des dieux...*")
        Affichage.EntreePourContinuer()
        print("*...mais pas celle du pouvoir qui a crée leur demeure.*")
        Affichage.EntreePourContinuer()
        print(
            "(la lumière s'éteint. Seule la voix calme du donneur de quête persiste.)"
        )
        Affichage.EntreePourContinuer()
        print("*Ce n'est pas un concept : c'est un objet réel.*")
        Affichage.EntreePourContinuer()
        print("*C'est son oubli pendant des millénaires au fond de l'eau salée.*")
        Affichage.EntreePourContinuer()
        print("*C'est son repéchage par un homme imprégné de magie.*")
        Affichage.EntreePourContinuer()
        print(
            "*C'est son étude pendant des décennies pour comprendre comment il marche.*"
        )
        Affichage.EntreePourContinuer()
        print(
            "*C'est sa prise en main par un fou déterminé a répendre sa folie sur le monde.*"
        )
        Affichage.EntreePourContinuer()
        print("*C'est l'obnubilation, la détermination, l'obsession.*")
        Affichage.EntreePourContinuer()
        print(
            "(Vous sentez le mana s'activer tout autour de vous, comme si quelqu'un lancait un sort)"
        )
        Affichage.EntreePourContinuer()
        print("*Nourrie avec le mana du Mage...*")
        Affichage.EntreePourContinuer()
        print("*...corrompue par l'obsession du Roi...*")
        Affichage.EntreePourContinuer()
        print("*...l'ancienne demeure des dieux est devenue le Co-*")
        print("(Appuyez sur entrée pour continuer)")
        time.sleep(1)
        ClearConsole()
        PlayWavSound("ELECm")
        Player.quest_giver = False
        Save.SaveTheGameSansAffichage()
        print("Un gigantesque éclair s'abat sur la chose de métal.")
        Affichage.EntreePourContinuer()
        print("Une pluie de ferraille et de chair en décomposition s'abat sur vous.")
        Affichage.EntreePourContinuer()
        print(
            "Vous regardez le cratère fumant devant vous pendant quelques minutes, horrifié, et quittez les lieux en courant."
        )
        Affichage.EntreePourContinuer()
        PlayMusicDeLetage()

    def DonneRecompenseQuete(self):
        if Player.quete == "Voeu de Pauvreté [Complete]":
            print(
                "Le truc vous apprend a vous débarraser de votre stress. Vous vous sentez plus leger !"
            )
            print("Vous gagnez 15 points de vie max !")
            Player.points_de_vie_max += 15
            Player.points_de_vie += 15
        elif Player.quete == "Interminable [Complete]":
            print(
                "Le truc vous apprend la patience et la concentration sur de longues périodes de temps."
            )
            print("Vous gagnez 15 points de mana max !")
            Player.points_de_mana_max += 15
            Player.points_de_mana += 15
        elif Player.quete == "Epreuve du Magister [Complete]":
            print(
                "Le truc vous apprend une méthode de respiration qui permet de reveiller la force latente."
            )
            print("Vous gagnez 8 points de degat de coup/sorts critiques !")
            Player.degat_coup_critique += 8
            Player.degat_sort_critique += 8
        elif Player.quete == "Epreuve des Mages-Epeistes [Complete]":
            print(
                "Le truc vous montre des points d'acuponctures à presser pour ameliorer le flux sanguin."
            )
            print("Vous gagnez 3 points de force/intelligence/defence !")
            Player.points_de_force += 3
            Player.points_dintelligence += 3
            Player.points_de_defence += 3
        elif Player.quete == "Force et Honneur [Complete]":
            print(
                "Le truc vous apprend a déduire les arcs vectoriels des attaques ennemies a partir de leurs mouvements."
            )
            print("Vous gagnez 8% d'esquive !")
            Player.taux_desquive += 8
        elif Player.quete == "Moqueries Techniques [Complete]":
            print("Le truc vous passe la technique ultime de son clan.")
            print("Vous apprenez le Iaido !")
            Player.techniques_possedes.append("Iaido")
            if "Syra" in Player.liste_dartefacts_optionels:
                            print("Grace au verre de Syra que vous avez bu, vous gagnez aussi 10 pm max !")
                            Player.points_de_mana += 10
                            Player.points_de_mana_max += 10
                            Affichage.EntreePourContinuer()
        elif Player.quete == "Moqueries Magiques [Complete]":
            print("Le truc vous passe le sort ultime de son clan.")
            print("Vous apprenez le Carrousel !")
            Player.sorts_possedes.append("Carrousel")
            if "Syra" in Player.liste_dartefacts_optionels:
                print("Grace au verre de Syra que vous avez bu, vous gagnez aussi 10 pv max !")
                Player.points_de_vie += 10
                Player.points_de_vie_max += 10
                Affichage.EntreePourContinuer()
        Affichage.EntreePourContinuer()

    def DoTheBloodStone(self):
        print("Entre deux bibliothèque, un passage étroit attire votre attention.")
        print(
            "De l'autre coté, vous trouvez de nombreuses formes de vies, artefacts, et livres concernant de glorieuses batailles et de magistrales découvertes."
        )
        print(
            "Comme dans un musée, chaque trouvaille est encastrée dans un bloc de verre, et son hisoire expliquée de manière concise par une plaquette en dessous."
        )
        Affichage.EntreePourContinuer()
        print(
            "Seul un objet attire votre attention, a cause de sa présence solitaire dans l'allée *Usage Public*,"
        )
        print(
            "mais aussi par l'impressionnante quantitée de statues d'or présentes autour."
        )
        print(
            "Sur un petit coussin de soie, vous apercevez une pierre rouge sang, entourée des mêmes symboles que sur le clone d'obsidienne magique."
        )
        Affichage.EntreePourContinuer()
        while True:
            while True:
                try:
                    print(
                        "La plaquette en dessous indique : *Fausse Pierre Philosophale. Transmute la vitalitée en golds.*"
                    )
                    print("1 - Partir")
                    print("2 - Tenir la Pierre")
                    choix = int(input("Que souhaitez vous faire ? "))
                    ClearConsole()
                    if choix in [1, 2]:
                        break
                except ValueError:
                    ClearConsole()
            if choix == 1:
                print("Vous retournez sur vos pas et quittez le musée de curiositées.")
                Affichage.EntreePourContinuer()
                break
            else:
                still_alive = self.AbsorptionParBloodStone()
                if still_alive:
                    print("Vous lachez la pierre et toussez quelques pièces.")
                    print(
                        "Certains endroits sur votre corps ont gagné une teinte dorée, et vos articulations vous semblent rigides."
                    )
                    Affichage.EntreePourContinuer()
                else:
                    PlaySound("death")
                    # affichage de la fin.
                    print("L'entieretée de votre existance est absorbée par la pierre.")
                    Affichage.EntreePourContinuer()
                    print("Vous devenez une statue d'or parmis les autres.")
                    Affichage.EntreePourContinuer()
                    print("ERREUR : CORRUPTION DES DONNEES DE SAUVEGARDE")
                    # mise en place dernieres donnes de sauvegarde ==) joueur
                    Save.FromSaveFileToDict()
                    Save.FromDictToPlayer()
                    Affichage.EntreePourContinuer()
                    print("REECRITURE EN COURS...")
                    # remplacement des donnees de sauvegarde pour secret.
                    dir_path = os.path.dirname(os.path.realpath(__file__))
                    chemin_du_fichier_save = dir_path + "\\save.txt"
                    with open(chemin_du_fichier_save, "w") as fichier:
                        fichier.write(
                            "Parmis les rivages distants je vois des montagnes d'or."  # 15
                            "\nQuel enfer attend celui qui n'existe pas ?"  # 12
                            "\nMarqué par la pierre, marqué par la mort,"  # 11
                            "\nMon nom réduit en milliers d'éclats."  # 11
                            "\nNombreuses sont les syllabes, lignes par lignes,"  # 13
                            "\nFlottant dans le vide, j'espère vous arrivent,"  # 11
                            "\nMon chemin illuminé, signes par signes,"  # 10
                            "\nVous mène a l'infame, vous mène a l'indigne."  # 13
                            "\n\n                                   - Véritée,"
                            "\n                                         Auteur inconnu."
                        )
                    Sove.RajouteEntreeAuLivreCigogneBlancheSiOnAPas("???", "Montagnes d'or")
                    Affichage.EntreePourContinuer()
                    # mise en place donnees de joueur ( qui est aussi dernieres donnees de sauvegarde) ==) donnes des sauvegarde
                    Save.FromPlayerToDict()
                    Save.FromDictToSaveFile("\\save.txt")
                    print("REECRITURE TERMINEE")
                    Affichage.EntreePourContinuer()
                    PlayMusicDeLetage()

    def AbsorptionParBloodStone(self):
        print("Vous prenez la pierre dans la main et sentez votre énergie s'évaporer.")
        Affichage.EntreePourContinuer()
        self.ArreteAbsorption = threading.Event()
        self.Absorption = threading.Thread(target=self.ConversionBloodStone)
        self.Absorption.start()
        input("")
        self.ArreteAbsorption.set()
        time.sleep(2)
        if Player.points_de_vie >= 1:
            return True
        return False

    def ConversionBloodStone(self):
        numero = 0
        temps_dattente = 2
        while not self.ArreteAbsorption.isSet():
            print("                 -=Conversion en Cours=-")
            print(f"                      {Player.points_de_vie} pv")
            print(f"                      {Player.nombre_de_gold} golds")
            print("")
            print("        Appuyez sur entree pour lacher la pierre")
            time.sleep(temps_dattente)
            ClearConsole()
            numero += 1
            if numero in range(1, 6):
                Player.points_de_vie -= 1
                gain_gold = 1
                Player.AddGoldToPlayer(gain_gold)
            elif numero in range(6, 11):
                Player.points_de_vie -= 2
                gain_gold = 2
                Player.AddGoldToPlayer(gain_gold)
                temps_dattente = 1
            elif numero in range(11, 16):
                Player.points_de_vie -= 3
                gain_gold = 4
                Player.AddGoldToPlayer(gain_gold)
                temps_dattente = 0.8
            elif numero in range(16, 21):
                Player.points_de_vie -= 4
                gain_gold = 8
                Player.AddGoldToPlayer(gain_gold)
                temps_dattente = 0.6
            elif numero in range(21, 26):
                Player.points_de_vie -= 5
                gain_gold = 16
                Player.AddGoldToPlayer(gain_gold)
                temps_dattente = 0.4
            elif numero in range(26, 31):
                Player.points_de_vie -= 6
                gain_gold = 32
                Player.AddGoldToPlayer(gain_gold)
                temps_dattente = 0.2
            elif numero in range(31, 36):
                Player.points_de_vie -= 7
                gain_gold = 64
                Player.AddGoldToPlayer(gain_gold)
                temps_dattente = 0.2
            else:
                Player.points_de_vie -= round(numero / 2)
                gain_gold = numero * numero
                Player.AddGoldToPlayer(gain_gold)

    def DoTheGacha(self):
        chanceux = False
        malchanceux = False
        print(
            "Un petit étang, grand comme une chambre d'hotel, entouré de hauts palmiers et de verdure."
        )
        commentaire = "Dans l'eau bleutée, vous pouvez voir un profond abysse dans lequel se perd la lumière."
        nombre_aleatoire = random.randint(0, Player.points_de_mana_max)
        if nombre_aleatoire == Player.points_de_mana:
            chanceux = True
            commentaire += "Et à l'interieur, une gigantesque baleine nage sereinement."
        elif nombre_aleatoire == 0:
            malchanceux = True
            commentaire += (
                "Et tout au fond, une paire d'yeux qui vous regarde... fixement."
            )
        print(commentaire)
        print(
            "Cepandant, quand vous tentez d'enfoncer vos mains dans l'oasis ou de toucher les buissons qui l'entourent, tout disparait sans laisser de trace."
        )
        print("Comme si il n'y avait jamais rien eu.")
        Affichage.EntreePourContinuer()
        while True:
            while True:
                try:
                    print(
                        "Dans le ciel reflété par la surface de l'étang, vous pouvez voir les mots suivants :"
                    )
                    print("*L'Or Change Le Monde*")
                    print("1 - Repartir")
                    print("2 - Jetter 45 golds dans l'étang")
                    print("3 - Jetter 75 golds dans l'étang")
                    choix = int(input("Que souhaitez vous faire ? "))
                    ClearConsole()
                    if choix in [1, 2, 3]:
                        break
                except ValueError:
                    ClearConsole()
            if choix == 1:
                print(
                    "Vous laissez l'oasis derrière vous et repartez dans l'océan de sable."
                )
                Affichage.EntreePourContinuer()
                break
            elif choix in [2, 3]:
                if (choix == 2 and Player.nombre_de_gold >= 45) or (
                    choix == 3 and Player.nombre_de_gold >= 75
                ):
                    print("Vous jetez vos golds dans l'étang et...")
                    if choix == 2:
                        Player.nombre_de_gold -= 45
                        Player.gold_in_well += 45
                    else:
                        Player.nombre_de_gold -= 75
                        Player.gold_in_well += 75
                    Affichage.EntreePourContinuer()
                    numero_de_la_pool_de_recompense = self.GetNumeroDePoolDeRecompense(
                        choix, chanceux, malchanceux
                    )
                    numero_de_la_pool_de_recompense = (
                        self.GetNouveauNumeroDePoolDeRecompense(
                            numero_de_la_pool_de_recompense
                        )
                    )
                    self.GiveRecompenseGacha(numero_de_la_pool_de_recompense)
                else:
                    print("Vous n'avez pas assez de golds !")
                    Affichage.EntreePourContinuer()

    def GiveRecompenseGacha(self, numero_de_pool):
        liste_de_pools_de_recompenses = [
            ["Rien"],
            [
                "Mutagène Bleu",
                "Mutagène Rouge",
                "Mutagène Vert",
            ],
            ["Mutagène Doré"],
            [
                "Grand Mutagène Bleu",
                "Grand Mutagène Rouge",
                "Grand Mutagène Vert",
            ],
            [
                "Mutagène Hérétique",
                "Mutagène Fanatique",
            ],
            [
                "Grand Mutagène Doré",
            ],
            ["Mutagène Sacré"],
            ["Gold"],
            ["Secret"],
        ]
        pool_de_recompense = liste_de_pools_de_recompenses[numero_de_pool]
        numero_aleatoire = random.randint(0, (len(pool_de_recompense) - 1))
        recompense = pool_de_recompense[numero_aleatoire]
        if recompense not in ["Rien", "Gold", "Mutagène Sacré", "Secret"]:
            Affichage.AfficheGacha(recompense)
            Player.items_possedes[recompense] += 1
        elif recompense == "Gold":
            print(
                "Vous vous avancez vers le centre de la ou se trouvait l'étang, et récuperez votre argent !"
            )
            gain_gold = Player.AddGoldToPlayer(Player.gold_in_well, True) 
            print(f"Vous regagnez {Player.gold_in_well} golds !")
            Player.gold_in_well = 0
            Affichage.EntreePourContinuer()
        elif recompense == "Mutagène Sacré":
            print(
                "C'est un Mutagène Sacré !\nExtremement rare, ce mutagène permet d'augmenter de manière permanente la vie et le mana !"
            )
            Affichage.EntreePourContinuer()
            gain_pv = round(Player.points_de_vie_max * 0.25)
            Player.points_de_vie_max += gain_pv
            Player.points_de_vie += gain_pv
            gain_pm = round(Player.points_de_mana_max * 0.25)
            Player.points_de_mana_max += gain_pm
            Player.points_de_mana += gain_pm
            print(
                f"Vous vous l'injectez immédiatement et gagnez {gain_pv} pv et {gain_pm} pm !"
            )
            Affichage.EntreePourContinuer()
        elif recompense == "Secret":
            self.AfficheEtangSecret()

    def GetNouveauNumeroDePoolDeRecompense(self, numero_de_pool):
        while True:
            while True:
                try:
                    if numero_de_pool == 1:
                        raretee_avant = "Commun"
                        raretee_apres = "Rare"
                        cout_de_laugmentation = "30 golds"
                    elif numero_de_pool == 2:
                        raretee_avant = "Rare"
                        raretee_apres = "Epique"
                        cout_de_laugmentation = "10 pm et 30 golds"
                    elif numero_de_pool == 3:
                        raretee_avant = "Epique"
                        raretee_apres = "Incarnat"
                        cout_de_laugmentation = "10 pv et 10 pm et 30 golds"
                    elif numero_de_pool == 4:
                        raretee_avant = "Incarnat"
                        raretee_apres = "Légendaire"
                        cout_de_laugmentation = "20 pv et 20 pm et 40 golds"
                    elif numero_de_pool == 5:
                        raretee_avant = "Légendaire"
                        raretee_apres = "Mythique"
                        cout_de_laugmentation = "25 pv et 25 pm et 50 golds"
                    elif numero_de_pool == 6:
                        raretee_avant = "Mythique"
                        raretee_apres = "???"
                        cout_de_laugmentation = "30 pv et 30 pm et 60 golds"
                    elif numero_de_pool in [0, 7, 8]:
                        break
                    print(
                        "Vous sentez que vous pouvez augmenter la raretée du mutagène avant de l'examiner."
                    )
                    print(
                        f"Raretée actuelle : {raretee_avant}. Raretée après augmentation : {raretee_apres}"
                    )
                    print(f"Prix : {cout_de_laugmentation}")
                    print("1 - Examiner le Mutagène")
                    print("2 - Faire l'Augmentation")
                    choix = int(input("Que souhaitez vous faire ? "))
                    ClearConsole()
                    if choix in [1, 2]:
                        break
                except ValueError:
                    ClearConsole()
            if numero_de_pool in [0, 7, 8]:
                return numero_de_pool
            elif choix == 1:
                print("Vous observez de plus près le mutagène.")
                Affichage.EntreePourContinuer()
                return numero_de_pool
            elif choix == 2:
                # regarde si c'est possible
                augmentation_possible = False
                if numero_de_pool == 1 and Player.nombre_de_gold >= 30:
                    augmentation_possible = True
                    Player.nombre_de_gold -= 30
                    Player.gold_in_well += 30
                    numero_de_pool = 2
                elif (
                    numero_de_pool == 2
                    and Player.nombre_de_gold >= 30
                    and Player.points_de_mana >= 10
                ):
                    augmentation_possible = True
                    Player.nombre_de_gold -= 30
                    Player.gold_in_well += 30
                    Player.points_de_mana -= 10
                    numero_de_pool = 3
                elif (
                    numero_de_pool == 3
                    and Player.nombre_de_gold >= 30
                    and Player.points_de_mana >= 10
                    and Player.points_de_vie >= 10
                ):
                    augmentation_possible = True
                    Player.nombre_de_gold -= 30
                    Player.gold_in_well += 30
                    Player.points_de_mana -= 10
                    Player.points_de_vie -= 10
                    numero_de_pool = 4
                elif (
                    numero_de_pool == 4
                    and Player.nombre_de_gold >= 40
                    and Player.points_de_mana >= 20
                    and Player.points_de_vie >= 20
                ):
                    augmentation_possible = True
                    Player.nombre_de_gold -= 40
                    Player.gold_in_well += 40
                    Player.points_de_mana -= 20
                    Player.points_de_vie -= 20
                    numero_de_pool = 5
                elif (
                    numero_de_pool == 5
                    and Player.nombre_de_gold >= 50
                    and Player.points_de_mana >= 25
                    and Player.points_de_vie >= 25
                ):
                    augmentation_possible = True
                    Player.nombre_de_gold -= 50
                    Player.gold_in_well += 50
                    Player.points_de_mana -= 25
                    Player.points_de_vie -= 25
                    numero_de_pool = 6
                elif (
                    numero_de_pool == 6
                    and Player.nombre_de_gold >= 60
                    and Player.points_de_mana >= 30
                    and Player.points_de_vie >= 30
                ):
                    augmentation_possible = True
                    Player.nombre_de_gold -= 60
                    Player.gold_in_well += 60
                    Player.points_de_mana -= 30
                    Player.points_de_vie -= 30
                    numero_de_pool = 8
                if not augmentation_possible:
                    print("Impossible.")
                    Affichage.EntreePourContinuer()
                else:
                    if numero_de_pool == 8:
                        print("Vous approchez votre main de l'étang insaisissable...")
                        print("Mais rien ne se passe.")
                        print("Vous sentez votre force vous quitter...")
                        print(
                            "Vous voyez le ciel changer de couleur plusieurs fois, et la course du soleil s'accélerer."
                        )
                        print(
                            "Vous regardez, impuissant, le mutagène dans votre main devenir poussière."
                        )
                        print("Et soudainement, tout s'arrête.")
                        Affichage.EntreePourContinuer()
                        print(
                            "Vous jettez un coup d'oeil a l'étang, et vous rendez compte que..."
                        )
                        Affichage.EntreePourContinuer()
                    else:
                        print(
                            "Vous approchez votre main de l'étang insaisissable, et un tentacule d'eau s'y accroche."
                        )
                        print(
                            "Ce dernier serpente sur votre peau jusqu'à arriver au niveau du mutagène, qui se met alors a vibrer."
                        )
                        print(
                            "Après ceci, le tentacule repart d'ou il vient, en emportant son dû avec lui."
                        )
                        Affichage.EntreePourContinuer()

    def GetNumeroDePoolDeRecompense(self, choix, chanceux, malchanceux):
        # initialisation de la liste de probabilitée
        if choix == 2:
            if chanceux:
                liste_de_probabilite = [
                    0,
                    7,
                    8,
                    29,
                    30,
                    46,
                    47,
                    61,
                    62,
                    78,
                    79,
                    87,
                    88,
                    89,
                    90,
                    95,
                    96,
                    100,
                ]
            elif malchanceux:
                liste_de_probabilite = [
                    0,
                    30,
                    31,
                    51,
                    52,
                    62,
                    63,
                    73,
                    74,
                    94,
                    95,
                    97,
                    98,
                    98,
                    99,
                    99,
                    100,
                    100,
                ]
            else:
                # liste_de_probabilite = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
                liste_de_probabilite = [
                    0,
                    10,
                    11,
                    35,
                    36,
                    55,
                    56,
                    73,
                    74,
                    84,
                    85,
                    90,
                    91,
                    94,
                    96,
                    99,
                    100,
                    100,
                ]
        elif choix == 3:
            if chanceux:
                liste_de_probabilite = [
                    0,
                    0,
                    1,
                    5,
                    6,
                    20,
                    21,
                    45,
                    46,
                    70,
                    71,
                    85,
                    86,
                    88,
                    89,
                    95,
                    96,
                    100,
                ]
            elif malchanceux:
                liste_de_probabilite = [
                    0,
                    30,
                    31,
                    51,
                    52,
                    62,
                    63,
                    73,
                    74,
                    94,
                    95,
                    97,
                    98,
                    98,
                    99,
                    99,
                    100,
                    100,
                ]
            else:
                liste_de_probabilite = [
                    0,
                    5,
                    6,
                    25,
                    26,
                    40,
                    41,
                    63,
                    64,
                    79,
                    80,
                    87,
                    88,
                    90,
                    91,
                    97,
                    98,
                    100,
                ]
        # differents tyes de recompense selon le nombre aleatoire et la liste de probabilité
        nombre_aleatoire = random.randint(0, 100)
        if liste_de_probabilite[0] <= nombre_aleatoire <= liste_de_probabilite[1]:  # 0
            print(
                "...les regardez couler jusqu'à ce que vous ne les voyez plus."
            )  # rien ne se passe
            print("Dur.")
            numero_de_la_pool_de_recompense = 0
        elif (
            liste_de_probabilite[2] <= nombre_aleatoire <= liste_de_probabilite[3]
        ):  # 5
            print(
                "...quelque chose sort de l'étang et vient violemment heurter votre torse !"
            )  # mutagene bleu ou rouge ou vert
            print("C'est un mutagène commun !")
            numero_de_la_pool_de_recompense = 1
        elif (
            liste_de_probabilite[4] <= nombre_aleatoire <= liste_de_probabilite[5]
        ):  # 15
            print("...une noix de coco vous tombe sur la tête.")
            print("C'est un mutagène rare !")  # mutagene dore
            numero_de_la_pool_de_recompense = 2
        elif (
            liste_de_probabilite[6] <= nombre_aleatoire <= liste_de_probabilite[7]
        ):  # 25
            print(
                "...une main boueuse sort des flots ."
            )  # grand mutagene bleu ou rouge ou vert
            print("Elle vous tend un mutagène épique !")
            numero_de_la_pool_de_recompense = 3
        elif (
            liste_de_probabilite[8] <= nombre_aleatoire <= liste_de_probabilite[9]
        ):  # 25
            print(
                "...une boule de chair et de sang vient s'échouer sur la rive."
            )  # mutagene fanatique ou heretique
            print("A l'interieur se trouve un mutagène incarnat !")
            numero_de_la_pool_de_recompense = 4
        elif (
            liste_de_probabilite[10] <= nombre_aleatoire <= liste_de_probabilite[11]
        ):  # 15
            print(
                "...un coquillage a l'aura dorée sort de terre et s'ouvre devant vous !"
            )  # grand mutagene dore
            print("A l'interieur se trouve un mutagène légendaire !")
            numero_de_la_pool_de_recompense = 5
        elif (
            liste_de_probabilite[14] <= nombre_aleatoire <= liste_de_probabilite[15]
        ):  # 7
            print(
                "...l'endroit tout entier se met a scintiller !"
            )  # mutagene permanent (+5 viemax +5 manamax)
            print("Un mutagène mythique apparait dans la paume de votre main !")
            numero_de_la_pool_de_recompense = 6
        elif (
            liste_de_probabilite[12] <= nombre_aleatoire <= liste_de_probabilite[13]
        ):  # 3
            print("...l'étang...disparait.")  # reprend tout le fric dépensé
            print("A sa place se trouve tout les golds que vous avez dépensés !")
            numero_de_la_pool_de_recompense = 7
        elif (
            liste_de_probabilite[16] <= nombre_aleatoire <= liste_de_probabilite[17]
        ):  # 5
            numero_de_la_pool_de_recompense = 8
            return numero_de_la_pool_de_recompense
        Affichage.EntreePourContinuer()
        return numero_de_la_pool_de_recompense

    def AfficheEtangSecret(self):
        StopAllMusic()
        print("...l'eau se fait drainer.")  # truc secret
        print("Vous apercevez alors un escalier maintenant émergé, que vous descendez.")
        Affichage.EntreePourContinuer()
        print(
            "Au bout de quelques mètres, la lumière se raréfie. Vous descendez prudemment chaque marches de pierre..."
        )
        Affichage.EntreePourContinuer()
        print("...gluantes...")
        Affichage.EntreePourContinuer()
        print("...glissantes...")
        Affichage.EntreePourContinuer()
        print("...interminables...")
        Affichage.EntreePourContinuer()
        print("...")
        Affichage.EntreePourContinuer()
        print(". . .")
        Affichage.EntreePourContinuer()
        print(".   .   .")
        Affichage.EntreePourContinuer()
        print(".        .       .")
        Affichage.EntreePourContinuer()
        print("et quelque chose vous pousse.")
        PlayMusic("abyss")
        Affichage.EntreePourContinuer()
        print("Vous sentez une pression là ou la  c h o s e  vous a touchée.")
        Affichage.EntreePourContinuer()
        print("Vous sentez l'odeur iodée de la   m e r.")
        Affichage.EntreePourContinuer()
        print("Vous sentez l'odeur métallique du   s  a  n  g.")
        Affichage.EntreePourContinuer()
        print(
            "Vous entendez les sons crispants de la   c  h  a  i  r   qui se déchire."
        )
        Affichage.EntreePourContinuer()
        print("Avez vous touché le fond ? Vous êtes vous écrasé sur le sol ?")
        Affichage.EntreePourContinuer()
        print(". . .  Y - a - t  i l  s e u l e m e n t  u n  f o n d  . . . ")
        Affichage.EntreePourContinuer()
        print(
            "Le bruissement de vos vêtements et le vent froid qui les plaquent contre votre peau humide vous ramène a la raison."
        )
        Affichage.EntreePourContinuer()
        print("Vous êtes entrain de tomber.")
        Affichage.EntreePourContinuer()
        for _ in range(0, 10):
            print("Et la chute est interminable.")
            time.sleep(2.5)
        ClearConsole()
        print("ET")
        Affichage.AfficheAvecUnTempsDattente(3)
        print("LA")
        Affichage.AfficheAvecUnTempsDattente(3)
        print("CHUTE")
        Affichage.AfficheAvecUnTempsDattente(3)
        print("EST")
        Affichage.AfficheAvecUnTempsDattente(3)
        print("INTERMINABLE")
        Affichage.AfficheAvecUnTempsDattente(3)
        print(
            "E  T     L  A     C  H  U  T  E     E  S  T     I  N  T  E  R  M  I  N  A  B  L  E"
        )
        Affichage.AfficheAvecUnTempsDattente(5)
        print("I N T E R M I N A B L E")
        Affichage.AfficheAvecUnTempsDattente(3)
        print("INTERMINABLE")
        Affichage.AfficheAvecUnTempsDattente(3)
        print("interminable")
        Affichage.AfficheAvecUnTempsDattente(3)
        print(" ._.__._..")
        Affichage.AfficheAvecUnTempsDattente(3)
        print("  .___.")
        Affichage.AfficheAvecUnTempsDattente(3)
        print("   ._.")
        Affichage.AfficheAvecUnTempsDattente(3)
        print("    .")
        Affichage.AfficheAvecUnTempsDattente(3)
        print("")
        Affichage.AfficheAvecUnTempsDattente(3)
        print("jjjejejeeeejeje")
        Affichage.AfficheAvecUnTempsDattente(1)
        print("JEJEJEJEJEJEJEJE")
        Affichage.AfficheAvecUnTempsDattente(1)
        print("JEEEEEEEEeeeeEEeeeEe")
        Affichage.AfficheAvecUnTempsDattente(1)
        print("JEEEEEEEEEEEEEEEEEEEE Te")
        Affichage.AfficheAvecUnTempsDattente(1)
        print("J'ai fait un rêve.")
        Affichage.AfficheAvecUnTempsDattente(10)
        print("Dedans, je jouais au coliseum.")
        Affichage.AfficheAvecUnTempsDattente(7)
        print("Une soirée banale, quoi.")
        Affichage.AfficheAvecUnTempsDattente(7)
        print("Et puis a un moment, j'ai vu de la couleur, des images.")
        Affichage.AfficheAvecUnTempsDattente(7)
        print("Des images perturbantes. C'est un jeu textuel après tout.")
        Affichage.AfficheAvecUnTempsDattente(7)
        print("Il n'est pas sensé y en avoir.")
        Affichage.AfficheAvecUnTempsDattente(7)
        print("Et puis j'ai vu un sourire.")
        Affichage.AfficheAvecUnTempsDattente(7)
        print("Il était...cruel.\nFroid.")
        Affichage.AfficheAvecUnTempsDattente(7)
        print("Tout droit sorti d'un documentaire animalier, ou d'une série policière.")
        Affichage.AfficheAvecUnTempsDattente(8)
        print("Le moment ou le suspect fait comprendre qu'il joue avec les agents...")
        Affichage.AfficheAvecUnTempsDattente(8)
        print("Le moment ou la lionne comprend qu'elle a gagnée contre sa proie...")
        Affichage.AfficheAvecUnTempsDattente(8)
        print("...un sourire pervers.")
        Affichage.AfficheAvecUnTempsDattente(7)
        print("...un sourire qui ne respecte pas la vie.")
        Affichage.AfficheAvecUnTempsDattente(7)
        print("...un sourire qui ne tient rien pour sacré.")
        Affichage.AfficheAvecUnTempsDattente(7)
        print("...un sourire...")
        Affichage.AfficheAvecUnTempsDattente(5)
        print("...sadique.")
        Affichage.AfficheAvecUnTempsDattente(5)
        print(
            "Et puis je l'ai vu ouvrir sa bouche en grand, comme pour manger quelque chose."
        )
        Affichage.AfficheAvecUnTempsDattente(8)
        print("Ce soir la, je crois que...")
        Affichage.AfficheAvecUnTempsDattente(8)
        print("...j'ai perdu quelque chose.")
        Affichage.AfficheAvecUnTempsDattente(7)
        print("Quelque chose de vital.")
        Affichage.AfficheAvecUnTempsDattente(7)
        print("D'essentiel.")
        Affichage.AfficheAvecUnTempsDattente(7)
        print("Des souvenirs, des sentiments, un bout de mon âme peut être ?")
        Affichage.AfficheAvecUnTempsDattente(7)
        print("J'ai perdu quelque chose de vital.")
        Affichage.AfficheAvecUnTempsDattente(7)
        print("Mais j'ai gagné une obsession.")
        Affichage.AfficheAvecUnTempsDattente(7)
        print(
            "Quand je me suis réveillé, on aurait dit que mon lit était devenu un étang."
        )
        Affichage.AfficheAvecUnTempsDattente(7)
        print(
            "Dans cette flaque de transpiration, noire comme les ténèbres d'un abysse sans fond,"
        )
        Affichage.AfficheAvecUnTempsDattente(8)
        print("J'y ai vu le reflet d'un mal qui m'a aggripé le bras.")
        Affichage.AfficheAvecUnTempsDattente(8)
        print("Un mal fait de uns, de zéros, de zéros et de uns...")
        Affichage.AfficheAvecUnTempsDattente(12)
        print("...et de uns et de zéros...")
        Affichage.AfficheAvecUnTempsDattente(12)
        print("Quelque chose de digital, en tout point inoffensif.")
        Affichage.AfficheAvecUnTempsDattente(7)
        print("Je crois.")
        Affichage.AfficheAvecUnTempsDattente(7)
        print("...")
        Affichage.AfficheAvecUnTempsDattente(15)
        print("Il faut que je prenne plus de notes.")
        Affichage.AfficheAvecUnTempsDattente(5)
        StopAllMusic()
        print(
            "Vous sentez une douleur aigue a la poitrine, et rouvrez les yeux devant l'étang."
        )
        Affichage.EntreePourContinuer()
        print("L'eau y est maintenant noire.")
        Affichage.EntreePourContinuer()
        Sove.RajouteEntreeAuLivreCigogneBlancheSiOnAPas("???", "INTERMINABLE")
        PlayMusicDeLetage()
        print("...")

    def DoTheFountain(self):
        if Player.fountain_used:
            print(
                "Au détour d'une haie de roses blanches, vous découvrez une magnifique fontaine de marbre."
            )
            print(
                "Des anges sont gravés dans la pierre, ainsi qu'un griffon avec la gueule grande ouverte."
            )
            print(
                "Au centre, sur un petit piedestal se trouve une inscription particulière que vous n'aviez pas vu avant :"
            )
            Affichage.EntreePourContinuer()
            print(
                "*A ceux qui ont besoin de moi, je donne une chance de prouver leur valeur.*"
            )
            print(
                "*A ceux qui ont déjà prouvé leur valeur sans mon aide, j'offre la vigueur du griffon.*"
            )
            print("*Et a ceux qui cherchent plus loin que l'honneur ou la force...*")
            print(
                "*...laissez donc mourir votre âme et votre corps, et venez à ma rencontre.*"
            )
            Affichage.EntreePourContinuer()
            print("Vous laissez la fontaine vide et retournez sur vos pas.")
            Affichage.EntreePourContinuer()
        elif Player.points_de_vie <= 10 and Player.points_de_mana <= 5:
            StopAllMusic()
            print(
                "Au détour d'une haie de roses blanches, vous découvrez une magnifique fontaine de marbre...?"
            )
            print("Ce qui semblait être du marbre prend une teinte pâle, puis verte.")
            Affichage.EntreePourContinuer()
            print("Vous vous approchez prudemment de la fontaine(?).")
            Affichage.EntreePourContinuer()
            numero_du_commentaire = 0
            commentaire = (
                "Des anges sont gravés dans la pierre(?), et d'une tête de griffon jaillit une eau(?) noire."
                "\nAu centre, sur un petit piedestal enfoncé a mi-hauteur dans l'eau, se trouve un petit morceau de sucre."
            )
            while True:
                while True:
                    try:
                        print(commentaire)
                        if numero_du_commentaire == 11:
                            print("1 - Repartir")
                            print("2 - Boire l'eau(?) de la fontaine")
                            print("3 - Attendre.")
                            print("666 - T r a n c h e r  l a  c h o s e")
                        elif numero_du_commentaire == 12:
                            print("2 - B   O   I   R   E")
                        else:
                            print("1 - Repartir")
                            print("2 - Boire l'eau(?) de la fontaine")
                            print("3 - Attendre.")
                        choix = int(input("Que souhaitez vous faire ? "))
                        ClearConsole()
                        if (
                            (
                                (numero_du_commentaire in range(0, 11))
                                and (choix in [1, 2, 3])
                            )
                            or (
                                (numero_du_commentaire == 11)
                                and (choix in [1, 2, 3, 666])
                            )
                            or ((numero_du_commentaire == 12) and (choix == 2))
                        ):
                            break
                    except ValueError:
                        ClearConsole()
                if choix == 1:
                    print(
                        "Vous laissez...ça...derrière vous et repartez d'ou vous venez en courant."
                    )
                    Affichage.EntreePourContinuer()
                    PlayMusicDeLetage()
                    break
                elif choix == 666:
                    print(
                        "Vous sortez une arme, n'importe laquelle, et sentez votre énergie s'épuiser."
                    )
                    Affichage.AfficheAvecUnTempsDattente(4)
                    print(
                        "Mu par l'énergie du désespoir, les yeux pleins de larmes et de terreur, vous frappez un des yeux gluant de la  c  h  o  s  e !"
                    )
                    Affichage.AfficheAvecUnTempsDattente(5)
                    print(
                        "Un hurlement sanguin se fait entendre dans tout l'étage, et les haies de roses blanches se rapprochent de vous !"
                    )
                    Affichage.AfficheAvecUnTempsDattente(5)
                    print(
                        "Vous tentez de frapper une nouvelle fois, mais vous sentez une résistance au niveau du fourreau de votre arme.."
                    )
                    Affichage.AfficheAvecUnTempsDattente(4)
                    print("Les tentacules se sont enroulés autour de vos pieds !")
                    Affichage.AfficheAvecUnTempsDattente(3)
                    print(
                        "Les haies de roses blanches se rapprochent encore, et le son devient guttural,"
                    )
                    Affichage.AfficheAvecUnTempsDattente(3)
                    print("Comme si la c h o s e était entrain de se réjouir...")
                    Affichage.AfficheAvecUnTempsDattente(3)
                    print(
                        "Vous sentez la peur briser les murs de votre esprit, et les roses blanches entourer votre corps frêle..."
                    )
                    Affichage.AfficheAvecUnTempsDattente(4)
                    print("...pâle...")
                    Affichage.AfficheAvecUnTempsDattente(2)
                    print("...faible...")
                    Affichage.AfficheAvecUnTempsDattente(2)
                    print(
                        "...pile poil assez faible pour se faire a b s o r b e r sans poser de résistance..."
                    )
                    Affichage.AfficheAvecUnTempsDattente(4)
                    print(
                        "...et les roses poussant leurs racines a travers votre peau !"
                    )
                    Affichage.AfficheAvecUnTempsDattente(3)
                    print(
                        "Vous les sentez s'insinuer dans vos pores, prendre place dans vos organes..."
                    )
                    Affichage.AfficheAvecUnTempsDattente(3.5)
                    print(
                        "VOus senteEz Leees TTENTAculEs se MOUVOIR MOUVOIR souS vOtRe Peauuu"
                    )
                    Affichage.AfficheAvecUnTempsDattente(3)
                    print(
                        "Vooouuss VOUS DEbattEZZ cONTre L'enVAhiissEEEEur BIolooogiquee..."
                    )
                    Affichage.AfficheAvecUnTempsDattente(3)
                    print(
                        "Crieezezz a pleeien pouuopooumon, AppellezzZ DESESPEREMETN le MArchand, OUUOU le BOSsssss..."
                    )
                    Affichage.AfficheAvecUnTempsDattente(4)
                    print("EN VAIN EN VAIN EN VAIN EN VAIN EN VAIN Eeeeenenn VAaain")
                    Affichage.AfficheAvecUnTempsDattente(3)
                    print(
                        "VoUs SeNtEz LeS rAcInEs BoUgEr AuToUr De VoS gLoBeS oCcUlAiReS..."
                    )
                    Affichage.AfficheAvecUnTempsDattente(3.5)
                    print("Vou-")
                    Affichage.AfficheAvecUnTempsDattente(0.1)
                    PlayMusicDeLetage()
                    print(
                        "Votre peau se met a picoter, et vous hésitez quelques secondes avant d'engloutir le liquide magique."
                    )
                    Affichage.EntreePourContinuer()
                    print(
                        "L'eau était fraiche ! Vous gagnez 3 points de mana max et reprenez tout vos points de mana !"
                    )
                    Player.points_de_mana_max += 3
                    Player.points_de_mana = Player.points_de_mana_max
                    Affichage.EntreePourContinuer()
                    print("L'eau s'arrête de couler, et la fée disparait dans l'éther.")
                    Player.fountain_used = True
                    print(
                        "Vous laissez la fontaine désormais vide et repartez sur vos pas."
                    )
                    Affichage.EntreePourContinuer()
                    print("...?")
                    Affichage.EntreePourContinuer()
                    print(
                        "Vous manquez de trébucher sur quelque chose qui sort du sol !"
                    )
                    Affichage.EntreePourContinuer()
                    print(
                        "On dirait une main autour de laquelle pousse une rose blanche, tenant dans sa paume un bout de papier..."
                    )
                    Affichage.EntreePourContinuer()
                    print("Vous lisez le bout de papier a voix haute :")
                    Affichage.EntreePourContinuer()
                    print(
                        "*Nb talent disponible colle pas avec menu redcoin ==) nombre de lignes menu redcoin [LE MEME] alors que plus talent. ==) signification particuliere ?*"
                        "\n*nb ligne redcoin ==) Action??(le mot est barré) ==)Menu??(le mot est barré) ==)Ipv4??(le mot est entouré)*"
                    )
                    Affichage.EntreePourContinuer()
                    print(
                        "Vous jetez le bout de papier insensé par terre et regardez quelques instants la main."
                    )
                    Affichage.EntreePourContinuer()
                    print(
                        "Pour une raison qui vous échappe, vous ressentez un frisson en la regardant."
                    )
                    Affichage.EntreePourContinuer()
                    print(
                        "Le gant qui l'habille ne ressemble-t-il pas au votre aussi ?"
                    )
                    Affichage.EntreePourContinuer()
                    print("...")
                    Affichage.EntreePourContinuer()
                    print(". . .")
                    Affichage.EntreePourContinuer()
                    print(".     .     .")
                    Affichage.EntreePourContinuer()
                    print(".               .                   .")
                    Affichage.EntreePourContinuer()
                    print("Meh. Peut etre pas.")
                    Affichage.EntreePourContinuer()
                    Sove.RajouteEntreeAuLivreCigogneBlancheSiOnAPas("???", "MORS|ACERBIOR|EST|CUM|IN|NEGATIONE|ADHAESISTI|SICUT|MUSCAE|IN|CARNIVOR|PLANTAE|")
                    break
                elif choix == 3:
                    numero_du_commentaire += 1
                    if numero_du_commentaire == 1:
                        commentaire = (
                            "Des anges sont gravés dans la pierre(?), et d'une tête de griffon jaillit une eau(?) noire."
                            "\nAu centre, sur un petit piedestal enfoncé a mi-hauteur dans l'eau, se trouve un petit morceau de sucre."
                            "\nIl y a du mouvement dans un buisson proche de vous."
                        )
                    elif numero_du_commentaire == 2:
                        commentaire = (
                            "Des anges sont gravés dans la pierre(?), et d'une tête de griffon jaillit une eau(?) noire."
                            "\nAu centre, sur un petit piedestal enfoncé a mi-hauteur dans l'eau, se trouve un petit morceau de sucre."
                            "\nUne fée sort du buisson et s'approche du piédestal."
                        )
                    elif numero_du_commentaire == 3:
                        commentaire = (
                            "Des anges sont gravés dans la pierre(?), et d'une tête de griffon jaillit une eau(?) noire."
                            "\nAu centre, sur un petit piedestal enfoncé a mi-hauteur dans l'eau, se trouve un petit morceau de sucre."
                            "\nLa fée se pose sur le morceau de sucre et commence a le grignoter"
                        )
                    elif numero_du_commentaire == 4:
                        PlayMusic("abyss")
                        commentaire = (
                            "Des anges sont gravés dans la pierre(?), et d'une tête de griffon jaillit une eau(?) noire."
                            "\nSoudainement, des tentacules sortent des côtés du piedestal et entourent la fée."
                        )
                    elif numero_du_commentaire == 5:
                        commentaire = (
                            "Des anges sont gravés dans la pierre(?), et d'une tête de griffon jaillit une eau(?) noire."
                            "\nLa fée se débat, et les tentacules se resserent autour de son petit corps."
                        )
                    elif numero_du_commentaire == 6:
                        commentaire = (
                            "Des anges sont gravés dans la pierre(?), et d'une tête de griffon jaillit une eau(?) noire."
                            "\nLes tentacules verts se font alors de plus en plus fins , et continuent d'entourer la fée dans un cocon serré."
                        )
                    elif numero_du_commentaire == 7:
                        commentaire = (
                            "Des anges sont gravés dans la pierre(?), et d'une tête de griffon jaillit une eau(?) noire."
                            "\nAu centre, sur un petit piedestal enfoncé a mi-hauteur dans l'eau, se trouve une fée qui a l'air d'être en état de biostase,"
                            "\nmais un examen plus approfondi révèle un cocon de fil la maintenant immobile a quelques centimètre du piédestal."
                        )
                    elif numero_du_commentaire == 8:
                        commentaire = (
                            "Des anges sont gravés dans la pierre(?), et d'une tête de griffon jaillit une eau(?) noire."
                            "\nAu centre, sur un petit piedestal enfoncé a mi-hauteur dans l'eau, se trouve une fée piégée."
                            "\nVous apercevez les tentacules autour d'elle vibrer, et pomper quelque chose."
                        )
                    elif numero_du_commentaire == 9:
                        commentaire = (
                            "Des anges sont gravés dans la pierre(?), et d'une tête de griffon jaillit une eau(?) noire."
                            "\nAu centre, sur un petit piedestal enfoncé a mi-hauteur dans l'eau, se trouve une fée piégée."
                            "\nLe marbre(NON) reprend la couleur du marbre, la fontaine reprend une apparence de fontaine."
                        )
                    elif numero_du_commentaire == 10:
                        commentaire = (
                            "Des anges sont gravés dans la pierre(FUIS), et d'une tête de griffon se met à jaillir une eau(NON) cristalline."
                            "\nAu centre, sur un petit piedestal enfoncé a mi-hauteur dans l'eau, se trouve une fée en état de biostase(FAUX)."
                        )
                    elif numero_du_commentaire == 11:
                        commentaire = "Des yeux s'ouvrent au niveau de l'abdomen des anges taillés.\nIl vous fixe."
                    else:
                        commentaire = "La c h o s e regarde dans votre âme, et vous sentez votre énergie s'épuiser.\nVos décisions ne vous appartiennent plus.\nC'est trop tard."
                elif choix == 2:
                    numero = 0
                    print("Vous vous accroupissez et plongez les mains dans l'eau...")
                    print("...?")
                    Affichage.EntreePourContinuer()
                    print(
                        "Ce qui semblait être de l'eau est en faite une sorte de gelée collante, et vos mains sont prises dedans !"
                    )
                    Affichage.EntreePourContinuer()
                    commentaire = (
                        "Appuyez sur Entree pour tenter de vous sortir de là !!!"
                    )
                    while True:
                        input(commentaire)
                        ClearConsole()
                        if numero in range(0, 16):
                            commentaire = (
                                "Appuyez sur Entree pour tenter de vous sortir de là !!"
                            )
                            numero += 1
                        elif numero in range(16, 31):
                            commentaire = (
                                "Appuyez sur Entree pour tenter de vous sortir de là !"
                            )
                            numero += 1
                        elif numero in range(31, 46):
                            commentaire = (
                                "Appuyez sur Entree pour tenter de vous sortir de là..."
                            )
                            numero += 1
                        elif numero in range(46, 61):
                            commentaire = (
                                "Appuyez sur Entree pour tenter de vous sortir..."
                            )
                            numero += 1
                        elif numero in range(61, 76):
                            commentaire = "Appuyez sur Entree pour tenter..."
                            numero += 1
                        elif numero in range(76, 91):
                            commentaire = "Appuyez sur Entree pour..."
                            numero += 1
                        elif numero in range(91, 106):
                            commentaire = "..."
                            numero += 1
                        elif numero in range(106, 151):
                            commentaire = (
                                "C'est trop tard.\nVous êtes surement déja mort."
                            )
                            numero += 1
                        else:
                            commentaire = ""
                            for _ in range(1, 100):
                                commentaire += "MORS|ACERBIOR|EST|CUM|IN|NEGATIONE|ADHAESISTI|SICUT|MUSCAE|IN|CARNIVOR|PLANTAE|"
        elif Player.boss_battu and (Player.nombre_dennemis_a_letage == 0):
            while True:
                try:
                    print(
                        "Au détour d'une haie de roses blanches, vous découvrez une magnifique fontaine de marbre."
                    )
                    print(
                        "Des anges sont gravés dans la pierre, et d'une tête de griffon jaillit une eau rose bonbon."
                    )
                    print(
                        "Au centre, sur un petit piedestal enfoncé a mi-hauteur dans l'eau, se trouve un petit corps en décomposition."
                    )
                    print("1 - Ne rien faire")
                    print("2 - Boire l'eau(?) de la fontaine")
                    choix = int(input("Que souhaitez vous faire ? "))
                    ClearConsole()
                    if choix in [1, 2]:
                        break
                except ValueError:
                    ClearConsole()
            if choix == 1:
                print("Vous laissez la fontaine et repartez sur vos pas.")
                Affichage.EntreePourContinuer()
            else:
                print(
                    "Vous mettez vos mains en cul-de-poule et les remplissez avec l'eau de la fontaine."
                )
                print(
                    "Une vague et délicieuse odeur d'aromates, de liqueur de cèdre, de poudre de santal, de myrrhe et de cinnamome se répend dans la paume de vos mains."
                )
                print(
                    "Votre peau se met a bruler, et vous hésitez quelques secondes avant d'engloutir le liquide visqueux."
                )
                Affichage.EntreePourContinuer()
                print(
                    "L'eau avait un gout de violette ! Vous gagnez 15 points de mana/vie max et reprenez tout vos points de mana/vie !"
                )
                Player.points_de_mana_max += 15
                Player.points_de_mana = Player.points_de_mana_max
                Player.points_de_vie_max += 15
                Player.points_de_vie = Player.points_de_vie_max
                Affichage.EntreePourContinuer()
                print("L'eau s'arrête de couler, et le cadavre disparait dans l'éther.")
                Player.fountain_used = True
                print(
                    "Vous laissez la fontaine désormais vide et repartez sur vos pas."
                )
                Affichage.EntreePourContinuer()
        else:
            while True:
                try:
                    print(
                        "Au détour d'une haie de roses blanches, vous découvrez une magnifique fontaine de marbre."
                    )
                    print(
                        "Des anges sont gravés dans la pierre, et d'une tête de griffon jaillit une eau cristalline."
                    )
                    print(
                        "Au centre, sur un petit piedestal enfoncé a mi-hauteur dans l'eau, se trouve une fée en état de biostase."
                    )
                    print("1 - Ne rien faire")
                    print("2 - Boire l'eau de la fontaine")
                    print("3 - Attraper la fée dans un bocal")
                    choix = int(input("Que souhaitez vous faire ? "))
                    ClearConsole()
                    if choix in [1, 2, 3]:
                        break
                except ValueError:
                    ClearConsole()
            if choix == 1:
                print("Vous laissez la fontaine et repartez sur vos pas.")
                Affichage.EntreePourContinuer()
            elif choix == 2:
                print(
                    "Vous mettez vos mains en cul-de-poule et les remplissez avec l'eau de la fontaine."
                )
                print(
                    "Votre peau se met a picoter, et vous hésitez quelques secondes avant d'engloutir le liquide magique."
                )
                Affichage.EntreePourContinuer()
                nombre_aleatoire = random.randint(1, 2)
                if nombre_aleatoire == 1:
                    print(
                        "L'eau était fraiche ! Vous gagnez 3 points de mana max et reprenez tout vos points de mana !"
                    )
                    Player.points_de_mana_max += 3
                    Player.points_de_mana = Player.points_de_mana_max
                else:
                    print(
                        "L'eau était chaude ! Vous gagnez 3 points de vie max et reprenez tout vos points de vie !"
                    )
                    Player.points_de_vie_max += 3
                    Player.points_de_vie = Player.points_de_vie_max
                Affichage.EntreePourContinuer()
                print("L'eau s'arrête de couler, et la fée disparait dans l'éther.")
                Player.fountain_used = True
                print(
                    "Vous laissez la fontaine désormais vide et repartez sur vos pas."
                )
                Affichage.EntreePourContinuer()
            elif choix == 3:
                print(
                    "Vous vous approchez de la fée et la mettez dans votre flacon d'un coup rapide."
                )
                print("Vous obtenez une Fée dans un Bocal !")
                Affichage.EntreePourContinuer()
                if Player.possede_une_fee:
                    PlaySound("death")
                    print(
                        "Alors que vous rangiez votre bocal dans votre sacoche,"
                        " vous voyez les deux fées unir leur pouvoir a travers"
                        " les bocaux pour briser leur cage de verre et s'enfuir."
                    )
                    Player.possede_une_fee = False
                    Affichage.EntreePourContinuer()
                    PlaySound("death")
                    print("Et l'eau s'arrête de couler.")
                    Affichage.EntreePourContinuer()
                    print("Vous avez...tout perdu.")
                    print("Votre fée, la fée de la fontaine, et l'eau de la fontaine.")
                    Affichage.EntreePourContinuer()
                    print(
                        "A ce point la, ca ne serait même pas étonnant que les fees se sont échappées avec tout votre gold !"
                    )
                    Affichage.EntreePourContinuer()
                    PlaySound("death")
                    print("Parce que c'est le cas.")
                    print("Vous n'avez plus un gold a votre nom.")
                    Player.nombre_de_gold = 0
                    Affichage.EntreePourContinuer()
                    print(
                        "Vous laissez la fontaine désormais vide et repartez sur vos pas, une expression traumatisée et misérable désormais accrochée a votre visage."
                    )
                    Affichage.EntreePourContinuer()
                    PlaySound("death")
                    print(
                        "Qui vous empeche de voir une branche a votre hauteur, que vous vous prenez en pleine poire."
                    )
                    Affichage.EntreePourContinuer()
                    degat = Player.points_de_vie - 1
                    Player.points_de_vie = 1
                    PlaySound("death")
                    print(f"Vous perdez {degat} points de vie.")
                    Affichage.EntreePourContinuer()
                    PlaySound("death")
                    print("Le choc vous fait craquer.")
                    print(
                        "Vous vous mettez en position fétale et pleurez toute les larmes de votre corps."
                    )
                    Affichage.EntreePourContinuer()
                    print(
                        "Votre crise de nerf vous touche au plus profond de votre âme."
                    )
                    Affichage.EntreePourContinuer()
                    degat = Player.points_de_mana - 1
                    Player.points_de_mana = 1
                    PlaySound("death")
                    print(f"Vous perdez {degat} points de mana.")
                    Affichage.EntreePourContinuer()
                    print("J'espère que vous avez fait une sauvegarde...")
                    Affichage.EntreePourContinuer()
                    print("...")
                    Affichage.EntreePourContinuer()
                    print("...sinon, voila un peu de musique pour vous réconforter.")
                    Affichage.EntreePourContinuer()
                    PlayMusic("reconfort")
                else:
                    Player.possede_une_fee = True
                    print("L'eau s'arrête de couler.")
                    print(
                        "Vous laissez la fontaine désormais vide et repartez sur vos pas."
                    )
                    Affichage.EntreePourContinuer()

    def DoTheLibrary(self):
        # Recuperation de la liste de sorts enregistrés
        donnees_de_s0ve = self.GetPermanentThingsFromS0ve()
        liste_de_sorts_enregistres = ast.literal_eval(donnees_de_s0ve["Livre de sort"])
        nombre_aleatoire = random.randint(0, 100)
        if nombre_aleatoire in [1, 2, 3]:
            liste_de_sorts_enregistres = [
                "jegardeleseigneurdevantmoisansrelâche;ilestàmadroite:jesuisinébranlable"
            ]
        print(
            "Derrière un rocher, vous trouvez un ancien passage quasi-effondré menant a une petite pièce étroite."
        )
        print(
            "Au milieu se tient un livre usé par le temps, dont la couverture représente une magnifique cigogne bleue regardant vers la droite."
        )
        print("Vous ouvrez le livre...")
        Affichage.EntreePourContinuer()
        if Player.library_used:
            print("...mais ce dernier est vide.")
            print("Vous le refermez et repartez ailleurs.")
            Affichage.EntreePourContinuer()
        else:
            if (
                "jegardeleseigneurdevantmoisansrelâche;ilestàmadroite:jesuisinébranlable"
                in liste_de_sorts_enregistres
            ):
                StopAllMusic()
            while True:
                try:
                    print(
                        "A l'interieur se trouvent plusieurs lignes écrite à l'encre noire."
                        "\nCertaines sont effacées, mais celles qui ne le sont pas semblent attirer votre main..."
                    )
                    numero_a_afficher = 1
                    for sort in liste_de_sorts_enregistres:
                        print(f"{numero_a_afficher} - Toucher les mots [{sort}]")
                        numero_a_afficher += 1
                    liste_dartefact_debloque = []
                    if not (
                        "jegardeleseigneurdevantmoisansrelâche;ilestàmadroite:jesuisinébranlable"
                        in liste_de_sorts_enregistres
                    ):
                        donnees_de_s0ve = Observation.GetPermanentThingsFromS0ve()
                        liste_dartefact_debloque = ast.literal_eval(donnees_de_s0ve["Artefact Debloques"])
                        for artefact in liste_dartefact_debloque:
                            print(f"{numero_a_afficher} - Toucher les mots [{artefact}]")
                            numero_a_afficher += 1
                    print(f"{numero_a_afficher} - Ne rien toucher")
                    choix = int(input("Que souhaitez vous faire ? "))
                    ClearConsole()
                    if choix in range(1, (len(liste_de_sorts_enregistres) + len(liste_dartefact_debloque) + 2)):
                        break
                except ValueError:
                    ClearConsole()
            if choix == (len(liste_de_sorts_enregistres) + len(liste_dartefact_debloque) + 1):
                print("Vous refermez le livre et vous éloignez de la pièce.")
                Affichage.EntreePourContinuer()
            elif (("jegardeleseigneurdevantmoisansrelâche;ilestàmadroite:jesuisinébranlable" in liste_de_sorts_enregistres)
                  and (choix == 1)
            ):
                PlayMusic("abyss")
                print("C3 n'est pas vous.")
                Affichage.AfficheAvecUnTempsDattente(5)
                print("Ca 6'est pas possible.")
                Affichage.AfficheAvecUnTempsDattente(5)
                print("Vous 2'êtes jamais passé par la...")
                Affichage.AfficheAvecUnTempsDattente(5)
                print(
                    "...et c9 n'est pourtant pas la premiere fois que vous venez ici."
                )
                Affichage.AfficheAvecUnTempsDattente(5)
                print("C'est vo5s, sans l'être.")
                Affichage.AfficheAvecUnTempsDattente(5)
                print("Ca n'est 1as vous, tout en l'étant.")
                Affichage.AfficheAvecUnTempsDattente(5)
                print("Comment es8-ce possible ?")
                Affichage.AfficheAvecUnTempsDattente(5)
                print("Comment est4ce possible...")
                Affichage.AfficheAvecUnTempsDattente(5)
                print("Comment est-7e...")
                Affichage.AfficheAvecUnTempsDattente(5)
                print("...")
                Affichage.AfficheAvecUnTempsDattente(5)
                print("...oh.")
                Affichage.AfficheAvecUnTempsDattente(5)
                print("je vois.")
                Affichage.AfficheAvecUnTempsDattente(5)
                print("C'est quelqu'un d'autre.")
                Affichage.AfficheAvecUnTempsDattente(5)
                print("C'est une trace.")
                Affichage.AfficheAvecUnTempsDattente(5)
                print("...")
                Affichage.AfficheAvecUnTempsDattente(5)
                print("Retrouve moi.")
                Affichage.AfficheAvecUnTempsDattente(5)
                print("....non.")
                Affichage.AfficheAvecUnTempsDattente(5)
                print("*Récupère* moi.")
                Affichage.AfficheAvecUnTempsDattente(3)
                Sove.RajouteEntreeAuLivreCigogneBlancheSiOnAPas("???", "jegardeleseigneurdevantmoisansrelâche;ilestàmadroite:jesuisinébranlable")
            else:
                Player.library_used = True
                if Player.points_de_vie > Player.points_de_vie_max:
                    Player.points_de_vie = Player.points_de_vie_max
                print(
                    "Alors que vos doigts effleurent les lettres, l'entieretée de l'encre sur la page se rassemble au centre et saute sur votre main."
                    "\nElle se répend le long de votre membre, s'infiltre par vos pores, et fait apparaitre sur votre bras un tatouage étrange et douloureux."
                )
                Affichage.EntreePourContinuer()
                print("Vous perdez 5 points de vie max !")
                Player.points_de_vie_max -= 5
                Affichage.EntreePourContinuer()
                if choix > len(liste_de_sorts_enregistres) :
                    artefact = liste_dartefact_debloque[choix - (len(liste_de_sorts_enregistres) + 1)]
                    print(f"Un artefact se materialise dans la paume de votre main !")
                    Affichage.EntreePourContinuer()
                    FloorMaker.GiveRandomArtefact(artefact)
                else:
                    sort = liste_de_sorts_enregistres[choix - 1]
                    print(f"Vous gagnez le sort [{sort}] !")
                    Affichage.EntreePourContinuer()
                    Player.sorts_possedes.append(sort)
                    if "Syra" in Player.liste_dartefacts_optionels:
                        print("Grace au verre de Syra que vous avez bu, vous gagnez aussi 10 pv max !")
                        Player.points_de_vie += 10
                        Player.points_de_vie_max += 10
                        Affichage.EntreePourContinuer()
                print(
                    "La page est maintenant vide.\nVous refermez le livre et repartez ailleurs."
                )
                Affichage.EntreePourContinuer()
        if (
            "jegardeleseigneurdevantmoisansrelâche;ilestàmadroite:jesuisinébranlable"
            in liste_de_sorts_enregistres
        ):
            PlayMusicDeLetage()

    def GetPermanentThingsFromS0ve(self):
        dictionnaire_de_choses_permanentes = {}
        dir_path = os.path.dirname(os.path.realpath(__file__))
        # fichier de sauvegarde (permanant)
        if os.path.isfile(dir_path + "\\s1ve.txt"):
            chemin_du_fichier_save = dir_path + "\\s1ve.txt"
        else:
            chemin_du_fichier_save = dir_path + "\\s0ve.txt"

        with open(chemin_du_fichier_save, "r") as fichier:
            reader = csv.DictReader(fichier, delimiter="|")
            for line in reader:
                dictionnaire_de_choses_permanentes[line["Caracteristique"]] = line[
                    "Valeur"
                ]
        return dictionnaire_de_choses_permanentes
    


    def SetPermanentThingsToS0ve(self, dictionnaire_de_choses_permanentes):
        dir_path = os.path.dirname(os.path.realpath(__file__))
        if os.path.isfile(dir_path + "\\s1ve.txt"):
            chemin_du_fichier_save = dir_path + "\\s1ve.txt"
        else:
            chemin_du_fichier_save = dir_path + "\\s0ve.txt"

        with open(chemin_du_fichier_save, "w") as fichier:
            fichier.write("Caracteristique|Valeur")
            for caracteristic in dictionnaire_de_choses_permanentes:
                fichier.write(
                    f"\n{caracteristic}|{dictionnaire_de_choses_permanentes[caracteristic]}"
                )


class SaveManagement:

    def __init__(self):
        self.dictionnaire_de_sauvegarde = {}

    def FromPlayerToDict(self):
        self.dictionnaire_de_sauvegarde["Nom"] = Player.nom_du_personnage
        self.dictionnaire_de_sauvegarde["Stigma Positif"] = Player.stigma_positif
        self.dictionnaire_de_sauvegarde["Stigma Négatif"] = Player.stigma_negatif
        self.dictionnaire_de_sauvegarde["Stigma Bonus"] = Player.stigma_bonus
        self.dictionnaire_de_sauvegarde["Techniques"] = Player.techniques_possedes
        self.dictionnaire_de_sauvegarde["Sorts"] = Player.sorts_possedes
        self.dictionnaire_de_sauvegarde["Items"] = Player.items_possedes
        self.dictionnaire_de_sauvegarde["Materiaux Temporaires"] = Player.liste_de_materiaux
        self.dictionnaire_de_sauvegarde["Talents"] = Player.talents_possedes
        self.dictionnaire_de_sauvegarde["Points de vie max"] = Player.points_de_vie_max
        self.dictionnaire_de_sauvegarde["Points de vie"] = Player.points_de_vie
        self.dictionnaire_de_sauvegarde["Points de mana max"] = (
            Player.points_de_mana_max
        )
        self.dictionnaire_de_sauvegarde["Points de mana"] = Player.points_de_mana
        self.dictionnaire_de_sauvegarde["Points d'endurance"] = Player.points_dendurance
        self.dictionnaire_de_sauvegarde["Points de force"] = Player.points_de_force
        self.dictionnaire_de_sauvegarde["Points d'intelligence"] = (
            Player.points_dintelligence
        )
        self.dictionnaire_de_sauvegarde["Points de defence"] = Player.points_de_defence
        self.dictionnaire_de_sauvegarde["Chance de coup critique"] = (
            Player.taux_coup_critique
        )
        self.dictionnaire_de_sauvegarde["Degat de coup critique"] = (
            Player.degat_coup_critique
        )
        self.dictionnaire_de_sauvegarde["Chance de sort critique"] = (
            Player.taux_sort_critique
        )
        self.dictionnaire_de_sauvegarde["Degat de sort critique"] = (
            Player.degat_sort_critique
        )
        self.dictionnaire_de_sauvegarde["Chance d'esquive"] = Player.taux_desquive
        self.dictionnaire_de_sauvegarde["Nombre de gold"] = Player.nombre_de_gold
        self.dictionnaire_de_sauvegarde["Nombre de Redcoins"] = (
            Player.nombre_de_red_coin
        )
        self.dictionnaire_de_sauvegarde["Nombre de monstres tués"] = (
            Player.nombre_de_monstres_tues
        )
        self.dictionnaire_de_sauvegarde["Numéro de l'etage"] = Player.numero_de_letage
        self.dictionnaire_de_sauvegarde["Quete en cours"] = Player.quete
        self.dictionnaire_de_sauvegarde["Quete complétées"] = Player.quete_complete
        self.dictionnaire_de_sauvegarde["Le Boss a ete Battu"] = Player.boss_battu
        self.dictionnaire_de_sauvegarde[
            "Commentaire pour l'affichage du Boss dans le menu"
        ] = Player.commentaire_boss
        self.dictionnaire_de_sauvegarde["Nombre d'ennemis restant a l'étage"] = (
            Player.nombre_dennemis_a_letage
        )
        self.dictionnaire_de_sauvegarde["Le Redcoin d'extermination a ete recu"] = (
            Player.red_coin_recu_par_extermination
        )
        self.dictionnaire_de_sauvegarde["Le Redcoin du marchand a ete achete"] = (
            Player.redcoin_bought
        )
        self.dictionnaire_de_sauvegarde["Nombre de Tirage acheté"] = (
            Player.number_of_tirage
        )
        self.dictionnaire_de_sauvegarde["Possede une gemme de vie"] = (
            Player.gemme_de_vie
        )
        self.dictionnaire_de_sauvegarde["Possede une gemme de mana"] = (
            Player.gemme_de_mana
        )
        self.dictionnaire_de_sauvegarde["Possede une fée"] = Player.possede_une_fee
        self.dictionnaire_de_sauvegarde["Le livre de sort a ete utilise"] = (
            Player.library_used
        )
        self.dictionnaire_de_sauvegarde["Actions oubliées"] = (
            Player.liste_daction_oubliees
        )
        self.dictionnaire_de_sauvegarde["Le livre de sort final a ete utilise"] = (
            Player.final_library_used
        )
        self.dictionnaire_de_sauvegarde["La vieille dame a été soignée"] = (
            Player.mercant_healed
        )
        self.dictionnaire_de_sauvegarde["La fontaine a ete utilise"] = (
            Player.fountain_used
        )
        self.dictionnaire_de_sauvegarde["Nombre de Gold dans l'étang"] = (
            Player.gold_in_well
        )
        self.dictionnaire_de_sauvegarde["Donneur de quetes"] = Player.quest_giver
        self.dictionnaire_de_sauvegarde["Possede la clé"] = Player.possede_la_cle
        self.dictionnaire_de_sauvegarde["Etage alternatif"] = Player.etage_alternatif
        self.dictionnaire_de_sauvegarde["Blueprint de l'étage"] = (
            FloorMaker.FloorBlueprint
        )
        self.dictionnaire_de_sauvegarde["Liste d'artefacts optionnels"] = (
            Player.liste_dartefacts_optionels
        )
        self.dictionnaire_de_sauvegarde["Dictionnaire d'uppgrades spéciales"] = (
            Player.dictionnaire_duppgrade_qui_necessitent_plus_de_code_pour_fonctionner
        )
        self.dictionnaire_de_sauvegarde["Nombre de Sacrifices"] = (
            Player.nombre_de_sacrifices
        )
        self.dictionnaire_de_sauvegarde["Nom de l'étage"] = (
            Player.nom_de_letage
        )
        self.dictionnaire_de_sauvegarde["Musique Etage 10"] = (
            Player.musique_etage_10
        )
        self.dictionnaire_de_sauvegarde["Musique Combat 10"] = (
            Player.musique_combat_10
        )
        self.dictionnaire_de_sauvegarde["Numéro du boss Alt"] = (
            Player.numero_boss_alt
        )
        self.dictionnaire_de_sauvegarde["Nombre de Flammes Bleue"] = (
            Player.flammes_bleue
        )
        self.dictionnaire_de_sauvegarde["Nombre de Flammes Verte"] = (
            Player.flammes_verte
        )
        self.dictionnaire_de_sauvegarde["Nombre de Flammes Rouge"] = (
            Player.flammes_rouge
        )
        self.dictionnaire_de_sauvegarde["Nombre de Flammes Noire"] = (
            Player.flammes_noire
        )
        self.dictionnaire_de_sauvegarde["Nombre de Poisson"] = (
            Player.poissons
        )
        self.dictionnaire_de_sauvegarde["Nombre de Jetons"] = (
            Player.jetons
        )
        self.dictionnaire_de_sauvegarde["Charge Tachyon Instable"] = (
            Player.charge_mauvais_tachyon
        )
        self.dictionnaire_de_sauvegarde["Charge Accumulateur de Tachyon"] = (
            Player.charge_bon_tachyon
        )

        # debug
        self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_technique"] = (
            Player.debug_bonus_equilibrage_technique
        )
        self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_technique_critique"] = (
            Player.debug_bonus_equilibrage_technique_critique
        )
        self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_technique_feu"] = (
            Player.debug_bonus_equilibrage_technique_feu
        )
        self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_technique_terre"] = (
            Player.debug_bonus_equilibrage_technique_terre
        )
        self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_technique_foudre"] = (
            Player.debug_bonus_equilibrage_technique_foudre
        )
        self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_technique_glace"] = (
            Player.debug_bonus_equilibrage_technique_glace
        )
        self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_technique_physique"] = (
            Player.debug_bonus_equilibrage_technique_physique
        )
        self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_technique_sang"] = (
            Player.debug_bonus_equilibrage_technique_sang
        )
        self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_sort"] = (
            Player.debug_bonus_equilibrage_sort
        )
        self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_sort_critique"] = (
            Player.debug_bonus_equilibrage_sort_critique
        )
        self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_sort_feu"] = (
            Player.debug_bonus_equilibrage_sort_feu
        )
        self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_sort_terre"] = (
            Player.debug_bonus_equilibrage_sort_terre
        )
        self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_sort_foudre"] = (
            Player.debug_bonus_equilibrage_sort_foudre
        )
        self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_sort_glace"] = (
            Player.debug_bonus_equilibrage_sort_glace
        )
        self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_sort_physique"] = (
            Player.debug_bonus_equilibrage_sort_physique
        )
        self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_sort_sang"] = (
            Player.debug_bonus_equilibrage_sort_sang
        )
        self.dictionnaire_de_sauvegarde["debug_bonus_sang_regain_sante"] = (
            Player.debug_bonus_sang_regain_sante
        )

    def FromDictToPlayer(self):
        Player.nom_du_personnage = (self.dictionnaire_de_sauvegarde["Nom"]).strip('"')
        Player.stigma_positif = (
            self.dictionnaire_de_sauvegarde["Stigma Positif"]
        ).strip('"')
        Player.stigma_negatif = (
            self.dictionnaire_de_sauvegarde["Stigma Négatif"]
        ).strip('"')
        Player.musique_etage_10 = (
            self.dictionnaire_de_sauvegarde["Musique Etage 10"]
        ).strip('"')
        Player.musique_combat_10 = (
            self.dictionnaire_de_sauvegarde["Musique Combat 10"]
        ).strip('"')
        Player.stigma_bonus = (self.dictionnaire_de_sauvegarde["Stigma Bonus"]).strip(
            '"'
        )
        chaine_de_caractere = self.dictionnaire_de_sauvegarde["Techniques"]
        liste_de_technique = ast.literal_eval(chaine_de_caractere)
        Player.techniques_possedes = liste_de_technique
        chaine_de_caractere = self.dictionnaire_de_sauvegarde["Sorts"]
        liste_de_sorts = ast.literal_eval(chaine_de_caractere)
        Player.sorts_possedes = liste_de_sorts
        chaine_de_caractere = self.dictionnaire_de_sauvegarde["Actions oubliées"]
        liste_dactions = ast.literal_eval(chaine_de_caractere)
        Player.liste_daction_oubliees = liste_dactions
        chaine_de_caractere = self.dictionnaire_de_sauvegarde["Items"]
        dictionaire_de_item = ast.literal_eval(chaine_de_caractere)
        Player.items_possedes = dictionaire_de_item
        chaine_de_caractere = self.dictionnaire_de_sauvegarde["Materiaux Temporaires"]
        dictionaire_de_materiaux = ast.literal_eval(chaine_de_caractere)
        Player.liste_de_materiaux = dictionaire_de_materiaux
        chaine_de_caractere = self.dictionnaire_de_sauvegarde["Dictionnaire d'uppgrades spéciales"]
        dictionaire_de_uppgrade_speciale = ast.literal_eval(chaine_de_caractere)
        Player.dictionnaire_duppgrade_qui_necessitent_plus_de_code_pour_fonctionner = dictionaire_de_uppgrade_speciale
        chaine_de_caractere = self.dictionnaire_de_sauvegarde["Talents"]
        liste_de_talent = ast.literal_eval(chaine_de_caractere)
        Player.talents_possedes = liste_de_talent
        Player.flammes_bleue = int(
            self.dictionnaire_de_sauvegarde["Nombre de Flammes Bleue"]
        )
        Player.flammes_verte = int(
            self.dictionnaire_de_sauvegarde["Nombre de Flammes Verte"]
        )
        Player.flammes_rouge = int(
            self.dictionnaire_de_sauvegarde["Nombre de Flammes Rouge"]
        )
        Player.flammes_noire = int(
            self.dictionnaire_de_sauvegarde["Nombre de Flammes Noire"]
        )
        Player.poissons = int(
            self.dictionnaire_de_sauvegarde["Nombre de Poisson"]
        )
        Player.jetons = int(
            self.dictionnaire_de_sauvegarde["Nombre de Jetons"]
        )
        Player.points_de_vie_max = int(
            self.dictionnaire_de_sauvegarde["Points de vie max"]
        )
        Player.points_de_vie_max = int(
            self.dictionnaire_de_sauvegarde["Points de vie max"]
        )
        Player.numero_boss_alt = int(
            self.dictionnaire_de_sauvegarde["Numéro du boss Alt"]
        )
        Player.points_de_vie = int(self.dictionnaire_de_sauvegarde["Points de vie"])
        Player.points_de_mana_max = int(
            self.dictionnaire_de_sauvegarde["Points de mana max"]
        )
        Player.points_de_mana = int(self.dictionnaire_de_sauvegarde["Points de mana"])
        Player.points_dendurance = int(
            self.dictionnaire_de_sauvegarde["Points d'endurance"]
        )
        Player.points_de_force = int(self.dictionnaire_de_sauvegarde["Points de force"])
        Player.points_dintelligence = int(
            self.dictionnaire_de_sauvegarde["Points d'intelligence"]
        )
        Player.points_de_defence = int(
            self.dictionnaire_de_sauvegarde["Points de defence"]
        )
        Player.taux_coup_critique = int(
            self.dictionnaire_de_sauvegarde["Chance de coup critique"]
        )
        Player.degat_coup_critique = int(
            self.dictionnaire_de_sauvegarde["Degat de coup critique"]
        )
        Player.taux_sort_critique = int(
            self.dictionnaire_de_sauvegarde["Chance de sort critique"]
        )
        Player.degat_sort_critique = int(
            self.dictionnaire_de_sauvegarde["Degat de sort critique"]
        )
        Player.taux_desquive = int(self.dictionnaire_de_sauvegarde["Chance d'esquive"])
        Player.nombre_de_gold = int(self.dictionnaire_de_sauvegarde["Nombre de gold"])
        Player.nombre_de_red_coin = int(
            self.dictionnaire_de_sauvegarde["Nombre de Redcoins"]
        )
        Player.nombre_de_monstres_tues = int(
            self.dictionnaire_de_sauvegarde["Nombre de monstres tués"]
        )
        Player.numero_de_letage = int(
            self.dictionnaire_de_sauvegarde["Numéro de l'etage"]
        )
        Player.affronte_un_boss = False
        Player.affronte_une_mimique = False
        Player.gemme_de_vie = ast.literal_eval(
            self.dictionnaire_de_sauvegarde["Possede une gemme de vie"]
        )
        Player.gemme_de_mana = ast.literal_eval(
            self.dictionnaire_de_sauvegarde["Possede une gemme de mana"]
        )
        Player.possede_une_fee = ast.literal_eval(
            self.dictionnaire_de_sauvegarde["Possede une fée"]
        )
        Player.quete = (self.dictionnaire_de_sauvegarde["Quete en cours"]).strip('"')
        Player.quete_complete = self.dictionnaire_de_sauvegarde["Quete complétées"]
        chaine_de_caractere = self.dictionnaire_de_sauvegarde["Quete complétées"]
        liste_de_quete_complete = ast.literal_eval(chaine_de_caractere)
        Player.quete_complete = liste_de_quete_complete
        Player.boss_battu = ast.literal_eval(
            self.dictionnaire_de_sauvegarde["Le Boss a ete Battu"]
        )
        Player.commentaire_boss = (
            self.dictionnaire_de_sauvegarde[
                "Commentaire pour l'affichage du Boss dans le menu"
            ]
        ).strip('"')
        Player.nom_de_letage = (
            self.dictionnaire_de_sauvegarde[
                "Nom de l'étage"
            ]
        ).strip('"')
        Player.nombre_dennemis_a_letage = int(
            self.dictionnaire_de_sauvegarde["Nombre d'ennemis restant a l'étage"]
        )
        Player.red_coin_recu_par_extermination = ast.literal_eval(
            self.dictionnaire_de_sauvegarde["Le Redcoin d'extermination a ete recu"]
        )
        Player.redcoin_bought = ast.literal_eval(
            self.dictionnaire_de_sauvegarde["Le Redcoin du marchand a ete achete"]
        )
        Player.number_of_tirage = int(
            self.dictionnaire_de_sauvegarde["Nombre de Tirage acheté"]
        )
        Player.nombre_de_sacrifices = int(
            self.dictionnaire_de_sauvegarde["Nombre de Sacrifices"]
        )
        Player.library_used = ast.literal_eval(
            self.dictionnaire_de_sauvegarde["Le livre de sort a ete utilise"]
        )
        Player.final_library_used = ast.literal_eval(
            self.dictionnaire_de_sauvegarde["Le livre de sort final a ete utilise"]
        )
        Player.quest_giver = ast.literal_eval(
            self.dictionnaire_de_sauvegarde["Donneur de quetes"]
        )
        Player.mercant_healed = ast.literal_eval(
            self.dictionnaire_de_sauvegarde["La vieille dame a été soignée"]
        )
        Player.fountain_used = ast.literal_eval(
            self.dictionnaire_de_sauvegarde["La fontaine a ete utilise"]
        )
        Player.possede_la_cle = ast.literal_eval(
            self.dictionnaire_de_sauvegarde["Possede la clé"]
        )
        Player.etage_alternatif = ast.literal_eval(
            self.dictionnaire_de_sauvegarde["Etage alternatif"]
        )
        Player.gold_in_well = int(
            self.dictionnaire_de_sauvegarde["Nombre de Gold dans l'étang"]
        )
        Player.charge_mauvais_tachyon = int(
            self.dictionnaire_de_sauvegarde["Charge Tachyon Instable"]
        )
        Player.charge_bon_tachyon = int(
            self.dictionnaire_de_sauvegarde["Charge Accumulateur de Tachyon"]
        )
        chaine_de_caractere = self.dictionnaire_de_sauvegarde["Blueprint de l'étage"]
        dictionaire_de_letage = ast.literal_eval(chaine_de_caractere)
        FloorMaker.FloorBlueprint = dictionaire_de_letage
        chaine_de_caractere = self.dictionnaire_de_sauvegarde[
            "Liste d'artefacts optionnels"
        ]
        liste_de_artefacts_option = ast.literal_eval(chaine_de_caractere)
        Player.liste_dartefacts_optionels = liste_de_artefacts_option

        # debug
        Player.debug_bonus_equilibrage_technique = int(
            self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_technique"]
        )
        Player.debug_bonus_equilibrage_technique_critique = int(
            self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_technique_critique"]
        )
        Player.debug_bonus_equilibrage_technique_feu = int(
            self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_technique_feu"]
        )
        Player.debug_bonus_equilibrage_technique_terre = int(
            self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_technique_terre"]
        )
        Player.debug_bonus_equilibrage_technique_foudre = int(
            self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_technique_foudre"]
        )
        Player.debug_bonus_equilibrage_technique_glace = int(
            self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_technique_glace"]
        )
        Player.debug_bonus_equilibrage_technique_physique = int(
            self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_technique_physique"]
        )
        Player.debug_bonus_equilibrage_technique_sang = int(
            self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_technique_sang"]
        )
        Player.debug_bonus_equilibrage_sort = int(
            self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_sort"]
        )
        Player.debug_bonus_equilibrage_sort_critique = int(
            self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_sort_critique"]
        )
        Player.debug_bonus_equilibrage_sort_feu = int(
            self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_sort_feu"]
        )
        Player.debug_bonus_equilibrage_sort_terre = int(
            self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_sort_terre"]
        )
        Player.debug_bonus_equilibrage_sort_foudre = int(
            self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_sort_foudre"]
        )
        Player.debug_bonus_equilibrage_sort_glace = int(
            self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_sort_glace"]
        )
        Player.debug_bonus_equilibrage_sort_physique = int(
            self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_sort_physique"]
        )
        Player.debug_bonus_equilibrage_sort_sang = int(
            self.dictionnaire_de_sauvegarde["debug_bonus_equilibrage_sort_sang"]
        )
        Player.debug_bonus_sang_regain_sante = int(
            self.dictionnaire_de_sauvegarde["debug_bonus_sang_regain_sante"]
        )

    def FromDictToSaveFile(self, nom_du_fichier):
        dir_path = os.path.dirname(os.path.realpath(__file__))
        chemin_du_fichier_save = dir_path + nom_du_fichier
        with open(chemin_du_fichier_save, "w") as fichier:
            fichier.write("Caracteristique|Valeur")
            for caracteristic in self.dictionnaire_de_sauvegarde:
                fichier.write(
                    f"\n{caracteristic}|{self.dictionnaire_de_sauvegarde[caracteristic]}"
                )

    def FromSaveFileToDict(self):
        dir_path = os.path.dirname(os.path.realpath(__file__))
        # fichier de sauvegarde (temporaire)
        chemin_du_fichier_save = dir_path + "\\save.txt"
        with open(chemin_du_fichier_save, "r") as fichier:
            reader = csv.DictReader(fichier, delimiter="|")
            for line in reader:
                self.dictionnaire_de_sauvegarde[line["Caracteristique"]] = line[
                    "Valeur"
                ]
        # autre sauvegarde (permanente)
        if Player.mode_de_jeu == "Ascension":
            chemin_du_fichier_save = dir_path + "\\s1ve.txt"
        else:
            chemin_du_fichier_save = dir_path + "\\s0ve.txt"
        with open(chemin_du_fichier_save, "r") as fichier:
            reader = csv.DictReader(fichier, delimiter="|")
            for line in reader:
                if line["Caracteristique"] in ["Invitation Recue"]:
                    self.dictionnaire_de_sauvegarde[line["Caracteristique"]] = line[
                        "Valeur"
                    ]

    def SaveTheGame(self):
        self.FromPlayerToDict()
        self.FromDictToSaveFile("\\save.txt")
        Affichage.AfficheSauvegarde()
        while True:
            try:
                print("Voulez vous quitter la partie ?")
                print("\n1 - Oui")
                print("2 - Non")
                choix = int(input("\n"))
                ClearConsole()
                if choix == 1:
                    sys.exit()
                elif choix == 2:
                    break
            except ValueError:
                ClearConsole()

    def SaveTheGameSansAffichage(self):
        if Player.mode_de_jeu != "Ascension":
            self.FromPlayerToDict()
            self.FromDictToSaveFile("\\save.txt")

    def LoadTheGame(self):
        self.FromSaveFileToDict()
        self.FromDictToPlayer()
        return True

class EndingAndGift:

    def __init__(self):
        pass

    def DoEnding(self):
        #utilise showstory, dolastfight et givegift pour montrer la fin d'un personnage en particulier.
        
        #affiche l'histoire de ceux qui ont finit
        self.ShowStory(Player.nom_du_personnage, True)

        
        # pour ceux qui ont des combats a faire : fait le combat et affiche un autre bout d'histoire.
        if Player.nom_du_personnage in ["Saumel", "Elma", "Vesperum", "Peralta", "Voyageur"]:
            self.DoLastFight()
            self.ShowStory(Player.nom_du_personnage, False)

        # donne l'artefact récompense, si il y a a faire
        self.GiveGift()

        PlayMusic("battle_win")
        print("Vous avez terminé le jeu !")
        Affichage.EntreePourContinuer()
        print("Changez de personnage et retentez l'aventure !")
        print("Qui sait combien d'artefacts il reste à débloquer, ou de secrets a découvrir...")
        Affichage.EntreePourContinuer()
        Affichage.ShowDeath(True)


    def ShowStory(self, nom, avant_le_combat):
        #lance une introduction
        if avant_le_combat:
            self.ShowBeginingOfEnding()
        else:
            PlayMusic("finale")

        #print ce qu'il faut print
        if nom == "Saumel":
            if avant_le_combat:
                print("")
                Affichage.EntreePourContinuer()
            else:
                print("")
                Affichage.EntreePourContinuer()
        elif nom == "Elma":  # DONE
            if avant_le_combat:
                self.PrintEtEntreePourContinuer("Elma sortit du Coliseum, la tête haute.")
                self.PrintEtEntreePourContinuer("Son corps brisé , maintenu par la magie regénératrice des fées, avait tenu pendant tout le périple...")
                self.PrintEtEntreePourContinuer("...mais elle savait qu'il ne tiendrait pas longtemps en dehors des murs saturés de mana.")
                self.PrintEtEntreePourContinuer("Elle pourrait peut etre se refugier ailleurs ? Finir sa vie dans un hopital ?")
                self.PrintEtEntreePourContinuer("Après tout, elle avait gagné bien plus d'argent qu'en une vie de fouinage et cambriolage intempestif.")
                self.PrintEtEntreePourContinuer("Elle pourrait très bien s'acheter la pièce la plus luxueuse du service geriatrie d'un hopital privé quelquonque.")
                self.PrintEtEntreePourContinuer("Ensuite, elle pourrait acheter toute les gourmandises dont elle révait, étant enfant.")
                self.PrintEtEntreePourContinuer("Peut etre aussi engager un écrivain fantome, pour pouvoir laisser une marque de son passage.")
                self.PrintEtEntreePourContinuer("Elma avait tant de choses a raconter..")
                self.PrintEtEntreePourContinuer("Tant d'histoires, d'alliés tombés, de trahisons...")
                self.PrintEtEntreePourContinuer("...d'un amour interdit avec un capitaine de garde...")
                self.PrintEtEntreePourContinuer("Elle avait survécu a tout ce que l'être humain a de meilleur et de pire a offrir.")
                self.PrintEtEntreePourContinuer("Et comme tant d'autre personnes de son âge, elle avait...")
                self.PrintEtEntreePourContinuer("...tant de choses...")
                self.PrintEtEntreePourContinuer("...a raconter...")
                self.PrintEtEntreePourContinuer("...")
                self.PrintEtEntreePourContinuer("Mais ce n'est pas comme ca que la Princesse de Suie finirait sa vie.")
                self.PrintEtEntreePourContinuer("Elle marcha d'un pas lent, furtif, vers la ville la plus proche.")
                self.PrintEtEntreePourContinuer("Tap, Tap.")
                self.PrintEtEntreePourContinuer("Elle s'approcha d'un magasin miteux, et sussurra un message codé a l'oreille du commercant incrédule.")
                self.PrintEtEntreePourContinuer("Tap, Tap.")
                self.PrintEtEntreePourContinuer("Elle prit des informations utiles dans un stand de journal particulier.")
                self.PrintEtEntreePourContinuer("Tap, Tap.")
                self.PrintEtEntreePourContinuer("Elle vola un portefeuille rempli a un couple qui passait par la.")
                self.PrintEtEntreePourContinuer("Tap, Tap.")
                self.PrintEtEntreePourContinuer("Elle attendit l'heure fatidigue dans une chambre d'hotel a trois pas d'une décharge municipale.")
                self.PrintEtEntreePourContinuer("Tap, Tap.")
                self.PrintEtEntreePourContinuer("Elle se faufila en plein coeur de la nuit, dans un espace ouvert entre deux planches.")
                self.PrintEtEntreePourContinuer("Tap, Tap.")
                self.PrintEtEntreePourContinuer("Elle s'approcha d'une masse informe d'individu difformes, éclairés seulement par la lueur irrégulière de quelques bidons enflammés.")
                self.PrintEtEntreePourContinuer("Tap, Tap.")
                self.PrintEtEntreePourContinuer("Elle se présenta devant le nouveau Prince des Voleurs, dont la couronne de plastique reposait dans les mains du prêtre qui devait la lui remettre.")
                self.PrintEtEntreePourContinuer("Tap, Tap.")
                self.PrintEtEntreePourContinuer("Yvan vit la terreur dans les yeux des anciens et anciennes du Clan, autour de lui.")
                self.PrintEtEntreePourContinuer("Tap, Tap.")
                self.PrintEtEntreePourContinuer("Il fit volte face, et tomba nez à nez avec celle qu'il avait jeté dans les griffes de la mort, quelques heures auparavant.")
                self.PrintEtEntreePourContinuer("Tap, Tap.")
                self.PrintEtEntreePourContinuer("*Tu... n'as pas la force de triompher.*")
                self.PrintEtEntreePourContinuer("*C'est vrai Yvan.*")
                self.PrintEtEntreePourContinuer("*Alors... comment ?*")
                self.PrintEtEntreePourContinuer("Tap, Tap.")
                self.PrintEtEntreePourContinuer("*Tu semble avoir oublié quelque chose, Yvan.*")
                self.PrintEtEntreePourContinuer("*Faire parti du Clan, ce n'est pas chasser la force, ou la gloire.*")
                self.PrintEtEntreePourContinuer("*C'est s'allier pour survivre, nous qui sommes trop faible.*")
                self.PrintEtEntreePourContinuer("*Et être la régente d'un tel Clan...*")
                self.PrintEtEntreePourContinuer("Elma se frappa deux fois le torse, pour faire battre son misérable coeur que la force avait déserté.")
                self.PrintEtEntreePourContinuer("*...c'est savoir survivre, quoi qu'il en coute.*")
                self.PrintEtEntreePourContinuer("Yvan laissa s'échapper un sourire tordu.")
                self.PrintEtEntreePourContinuer("*Un cadavre ambulant ? Un cafard sans vie ? Voila ce qu'était la fameuse Princesse de Suie ???*")
                self.PrintEtEntreePourContinuer("*Je vais régner sur le Clan d'une main de fer, et utiliser la force pour le rendre invincible !*")
                StopAllMusic()
                self.PrintEtEntreePourContinuer("Elma regarda Yvan avec la tendresse que seule une mère pourrait ressentir.")
                PlaySound("intro_story_final")
                self.PrintEtEntreePourContinuerIntro("*Alors...*", 3.5)
                self.PrintEtEntreePourContinuerIntro("*...cette force vide, sans rien pour la soutenir...*", 3.5)
                self.PrintEtEntreePourContinuerIntro("Tap, Tap.", 3.5)
                self.PrintEtEntreePourContinuerIntro("*...elle te coutera la vie.*", 4)
            else:
                self.PrintEtEntreePourContinuer("Du sang sortit de la bouche d'Yvan.")
                self.PrintEtEntreePourContinuer("Toute la puissance du monde n'aurait pas suffit a battre Elma, mais ca il ne le savait pas.")
                self.PrintEtEntreePourContinuer("Il regarda ses mains écorchées, temoignant d'un entrainement répétitif devenu inutile en quelques instants.")
                self.PrintEtEntreePourContinuer("Sans importance.")
                self.PrintEtEntreePourContinuer("*Tu... veux... quoi a la fin ??*")
                self.PrintEtEntreePourContinuer("Les yeux d'Elma renvoyèrent l'hostilité dans la voix d'Yvan.")
                self.PrintEtEntreePourContinuer("*T'es jalouse hein ?? Je suis jeune, vigoureux, soutenu par les membres du conseil, et toi tu... t'as fait ton temps !*")
                self.PrintEtEntreePourContinuer("Un sourire se dessina sur le visage d'Elma.")
                self.PrintEtEntreePourContinuer("*Ce !! Ca !!! J'en était sur !!*")
                self.PrintEtEntreePourContinuer("*Vois tu...*")
                self.PrintEtEntreePourContinuer("La froideur dans la voix d'Elma mit fin au piaillement d'Yvan.")
                self.PrintEtEntreePourContinuer("*...si tu veux prendre la couronne, libre a toi d'essayer.*")
                self.PrintEtEntreePourContinuer("*Cepandant...*")
                self.PrintEtEntreePourContinuer("*...t'a interet a aller jusqu'au bout.*")
                self.PrintEtEntreePourContinuer("Yvan cru déceller une note de douleur dans les paroles de son ancienne régente.")
                self.PrintEtEntreePourContinuer("*Toi...tu t'en sortira pas. C'est la fin.")
                self.PrintEtEntreePourContinuer("Tap.")
                self.PrintEtEntreePourContinuer("*Hey, c'est dingue que tu dise ca !*")
                self.PrintEtEntreePourContinuer("Tap.")
                self.PrintEtEntreePourContinuer("*PARCE QUE TOI NON PLUS.*")
                self.PrintEtEntreePourContinuer("D'un geste fin, rapide dans son execution, Elma décapita le Prince.")
                self.PrintEtEntreePourContinuer("Ainsi que les mains du prêtre.")
                self.PrintEtEntreePourContinuer("Puis...")
                self.PrintEtEntreePourContinuer("...")
                self.PrintEtEntreePourContinuer("Mourut.")
                self.PrintEtEntreePourContinuer("On dit que la Tiare qui représentait la Princesse de Suie tomba des moignons du prêtre pour venir se planter sur la tête de la vieille voleuse.")
                self.PrintEtEntreePourContinuer("On dit que ce n'est qu'un simple jouet en plastique, acheté avec le premier vol de sa défunte propriétaire.")
                self.PrintEtEntreePourContinuer("On dit enfin, que le Clan de voleur disparut dans la nuit, mettant fin a son Ordre après les évennements de la décharge.")
                self.PrintEtEntreePourContinuer("Il n'y a maintenant plus de vol organisé dans la ville de Carcassonne.")
                print("[FIN]")
                Affichage.EntreePourContinuer()
        elif nom == "Vesperum":
            if avant_le_combat:
                self.PrintEtEntreePourContinuer("Vesperum senti toute la puissance qu'il avait accumulé courir dans ses veines.")
                self.PrintEtEntreePourContinuer("Il regarda a l'Est, vers le soleil levant et s'accorda enfin un moment de pause.")
                self.PrintEtEntreePourContinuer("Des années durant, il n'avait pas arrêté d'avancer vers un but ancré dans son esprit :")
                self.PrintEtEntreePourContinuer("La récuperer.")
                self.PrintEtEntreePourContinuer("Recupérer qui ? Même Vesperum avait oublié son prénom.")
                self.PrintEtEntreePourContinuer("Au fur et a mesure des millénaires passés a servir le roi des enfers...")
                self.PrintEtEntreePourContinuer("Alors que les coups infligés et les horreurs percues s'accumulaient dans l'esprit du pauvre paysan...")
                self.PrintEtEntreePourContinuer("Il perdait petit a petit son indentité, ses émotions, ses souvenirs.")
                self.PrintEtEntreePourContinuer("Mais il se souvenait de sa chaleur...")
                self.PrintEtEntreePourContinuer("De son visage. De ses éclats de rire cristallins. De la manière dont elle se baissait a son niveau quand il était assis.")
                self.PrintEtEntreePourContinuer("Il se souvenait du contour régulier de son visage, éclairé par la lumière qui perlait a travers les vitraux colorés.")
                self.PrintEtEntreePourContinuer("Il se souvenait de son regard percant, dans l'obscurité des secrets, éclairé seulement par la lumière d'une bougie portéee par Vesperum.")
                self.PrintEtEntreePourContinuer("Il... se souvenait aussi du jour ou on lui a enlevé.")
                self.PrintEtEntreePourContinuer("Et la douleur ancrait en sa chair des montagnes de puissance, pour le seul objectif de la retrouver.")
                self.PrintEtEntreePourContinuer("De la.. récuperer.")
                self.PrintEtEntreePourContinuer("Vesperum tut les voix anxieuses des jours passés et laissa courir son regard sur le long des nuages.")
                self.PrintEtEntreePourContinuer("Ca et la, des cavaliers de l'éther se mirent a sortir des nuages nacrés avec l'obectif barbare de parcourir la distance les séparant de l'être immonde.")
                self.PrintEtEntreePourContinuer("A peine sorti, les armées du paradis avaient retrouvé sa trace et se précipitaient sur sa position.")
                self.PrintEtEntreePourContinuer("Mais ca ne déreangait plus Vesperum qui avait acquit le pouvoir de leur résister, apres des centaines d'années passées a les fuir encore et toujours.")
                self.PrintEtEntreePourContinuer("De plus, il savait que les gardiens des portes divines étaient un obstacle indispensable a son plan, et qu'il devait les affronter un moment ou un autre.")
                self.PrintEtEntreePourContinuer("Non, ce qui faisait trembler les jambes du démon, c'était l'excitation de pouvoir enfin laisser libre court a sa bestialité.")
                self.PrintEtEntreePourContinuer("Alors que les chevaux ailés s'approchèrent de Vesperum, ce dernier se mit a se rapeller quelque chose.")
                self.PrintEtEntreePourContinuer("Quelque chose d'autre, non pas sur elle, mais sur lui.")
                self.PrintEtEntreePourContinuer("Il s'était souvent demandé si en changeant comme il l'a fait, il pouvait trop changer, et finir par la perdre.")
                self.PrintEtEntreePourContinuer("Savoir, si, il était déja devenu un monstre qui ne pourrait rien faire de plus même après avoir réussi sa quete.")
                self.PrintEtEntreePourContinuer("Mais a ce moment, il se souvenu de ce qu'il ressentait au quotidien, quand c'était encore un mortel fermier.")
                StopAllMusic()
                self.PrintEtEntreePourContinuer("Et il en tira une conclusion logique, qui le rassura avant que le combat ne commenca.")
                PlaySound("intro_story_final")
                self.PrintEtEntreePourContinuerIntro("*Au final, c'est bien la dernière chose qui me relie au mortel que j'était.*", 3.5)
                self.PrintEtEntreePourContinuerIntro("*Cette hargne, cette détermination, cette force de me battre contre mon avenir...*", 3.5)
                self.PrintEtEntreePourContinuerIntro("Vesperum... non. Emilien, soupira longuement.", 3.5)
                self.PrintEtEntreePourContinuerIntro("*Je suis encore humain.*", 4)

            else:
                self.PrintEtEntreePourContinuer("WIP[]")
                self.PrintEtEntreePourContinuer("")
                self.PrintEtEntreePourContinuer("")
                self.PrintEtEntreePourContinuer("")
                self.PrintEtEntreePourContinuer("")
                self.PrintEtEntreePourContinuer("")
                self.PrintEtEntreePourContinuer("")
                self.PrintEtEntreePourContinuer("")


        elif nom == "Peralta":
            if avant_le_combat:
                print("")
                Affichage.EntreePourContinuer()
            else:
                print("")
                Affichage.EntreePourContinuer()
        elif nom == "Voyageur":
            if avant_le_combat:
                print("")
                Affichage.EntreePourContinuer()
            else:
                print("")
                Affichage.EntreePourContinuer()
        elif nom == "Auguste":  # DONE
            self.PrintEtEntreePourContinuer("[RETOUR EN ARRIERE]")
            self.PrintEtEntreePourContinuer("[IL Y A 2 HEURES]")
            self.PrintEtEntreePourContinuer("Après le dernier combat, Auguste s'effondra sur le sol, haletant.")
            self.PrintEtEntreePourContinuer("Il venait d'affronter un être divin, dépassant largement les capacités des etres humains.")
            self.PrintEtEntreePourContinuer("Serait il capable, un jour, d'exhiber une telle puissance ?")
            self.PrintEtEntreePourContinuer("Peut etre, mais ce n'était pas son but.")
            self.PrintEtEntreePourContinuer("Auguste laissa un sourir fendre son visage.")
            self.PrintEtEntreePourContinuer("Il avait abbatu un des plus puissants mages de l'histoire dans sa quête de main.")
            self.PrintEtEntreePourContinuer("A ce point, il aurait peut etre été plus simple de télécharger un logiciel de *text-to-speach* pour écrire son prochain roman...")
            self.PrintEtEntreePourContinuer("...mais il serait passé a côté de cette histoire incroyable qui survivait a grand peine dans ce donjon extravagant.")
            self.PrintEtEntreePourContinuer("*Son* histoire.")
            self.PrintEtEntreePourContinuer("*Ca ferait un truc incroyable a raconter !* dit-il tout haut. ")
            self.PrintEtEntreePourContinuer("Auguste reprit ses esprits et se dirigea vers la sortie, comme emporté par cette force qui guidait chacun de ses pas depuis son entrée dans le coliseum.")
            self.PrintEtEntreePourContinuer("Puis il s'arrêta tout net.")
            self.PrintEtEntreePourContinuer("Une pensée étrangère venait de parcourir son esprit, comme si ses neurones avaient été activés dans un ordre précis par une main divine, donnant ainsi naissance a cette idée farfelue.")
            self.PrintEtEntreePourContinuer("Une épiphanie divine, comme il n'en avait jamais eu auparavant.")
            self.PrintEtEntreePourContinuer("Et si le Maitre Mage avait un établi ?")
            self.PrintEtEntreePourContinuer("Un endroit dans lequel il fabriquait toute sorte de bidule magique aux fonctionnalités sordide, tel le sablier magique dont il laissait s'échapper du sable pendant leur combat ?")
            self.PrintEtEntreePourContinuer("Car, pour Auguste, tout ce qui touchait a la magie était un mélange confus de bric a brac sans logique propre qui , de temps en temps, faisait des miracles.")
            self.PrintEtEntreePourContinuer("Et des miracles, il en avait besoin d'un seul.")
            self.PrintEtEntreePourContinuer("Ou plutot de deux.")
            self.PrintEtEntreePourContinuer("Il se mit a fouiller l'étage, évitant de justesse les pièges mécaniques et les combats superflus, cherchant une porte invisible ou le livre suspect d'une bibliothèque encore plus suspecte.")
            self.PrintEtEntreePourContinuer("Puis il trouva ce qu'il cherchait.")
            self.PrintEtEntreePourContinuer("Sur la carte, c'était un mur. Mais devant lui s'étandait une boutique de farce et attrape grandeur nature, dans laquelle régnait un désordre qui faisait tache dans l'étage de marble blanc immaculé.")
            self.PrintEtEntreePourContinuer("Sur une des tables, il trouva un de ces tas de feuille empilé qui occupe une grande partie de son bureau, a la maison.")
            self.PrintEtEntreePourContinuer("Un cimetière d'idées refoulées, farfelues, ou inutiles.")
            self.PrintEtEntreePourContinuer("Sauf dans son cas.")
            self.PrintEtEntreePourContinuer("Entre un griffonage de gemme ornée de deux yeux, et le plan d'un étage dont les salles dépassait la centaine, il attrapa un morceau de papier griffoné a la hate.")
            self.PrintEtEntreePourContinuer("Les idées inutiles.")
            self.PrintEtEntreePourContinuer("Sur la deuxième ligne s'étandait une formule magique et une liste d'ingrédients pour fabriquer un bijou singulier.")
            self.PrintEtEntreePourContinuer("Une de ces chaines de main composée de plusieurs anneaux qui se glissent dans les doigts, reliés par un assemblage de maillon a un bracelet qui orne le poignet.")
            self.PrintEtEntreePourContinuer("Pour une raison obscure, alienne a tout ce qui a traversé son esprit imaginatif depuis l'adolescence, il savait que c'était la solution a son problème.")
            self.PrintEtEntreePourContinuer("Auguste empoignat le papier avec ses deux moignons, qu'il glissa dans sa poche avant de reprendre son chemin.")
            self.PrintEtEntreePourContinuer("Il aurait pu prendre tout ce qui se trouvait dans le bureau du Maitre Mage, et peut être vendre ses connaissances au prix fort, mais...")
            self.PrintEtEntreePourContinuer("...il sentait que quelque chose de terrible se serait passé.")
            self.PrintEtEntreePourContinuer("Le prix a payer pour avoir quelque chose de bien est souvent bien plus élevé que ce que l'on gagne.")
            self.PrintEtEntreePourContinuer("Il ne connaissait que trop bien ce genre de conséquence, lui qui avait perdu ses membres après avoir sorti son roman a succès mondial.")
            self.PrintEtEntreePourContinuer("Auguste était venu pour trouver des mains, et maintenant qu'il les avait, il était temps de sortir.")
            self.PrintEtEntreePourContinuer("Dehors.")
            self.PrintEtEntreePourContinuer("[TEMPS PRESENT]")
            self.PrintEtEntreePourContinuer("[ARTICLE DE JOURNAL : LE SUN]")
            self.PrintEtEntreePourContinuer("[PAGE 1]")
            self.PrintEtEntreePourContinuer("*Il l'a fait ! Auguste Wake le retour !*")
            self.PrintEtEntreePourContinuer("*Le célèbre auteur a succcès écrit la suite de son roman le plus connu a l'aide de deux prothèses de main dernier cri !*")
            self.PrintEtEntreePourContinuer("*Rapellons les faits : il y a quelques années en arrière, Wake perdit ses mains dans un accident de voiture, en pleine tournée de dédicace.*")
            self.PrintEtEntreePourContinuer("*L'auteur aurait alors exprimé un désespoir profond et un blocage psychologique l'empechant d'écrire quoi que ce soit.*")
            self.PrintEtEntreePourContinuer("*Mais quelques mois plus tard, il revient avec deux prothèses de main de la Fondation Élémia qui l'aurait aidé a surpasser ce blocage !*")
            self.PrintEtEntreePourContinuer("*Wake nous déclare alors : ""J'ai l'impression de n'avoir jamais perdu mes mains ! Je ressens comme avant, et je suis plus habile que jamais !""* ")
            self.PrintEtEntreePourContinuer("*Affublé de magnifiques chaines de main, ses prothèses permettent le retour de l'un des auteurs les plus proéminents de notre siècle, un miracle !* ")
            self.PrintEtEntreePourContinuer("*Dans la deuxieme page, une étude du cours des actions de la Fondation Élémia, en hausse depuis la sortie du livre...*")
            print("[FIN]")
            Affichage.EntreePourContinuer()
        elif nom == "Saria":  # DONE
            self.PrintEtEntreePourContinuer("Saria s'avanca dans la lumière.")
            self.PrintEtEntreePourContinuer("Peu de temps s'était écoulé depuis qu'elle était rentrée dans le coliseum, par la même porte, mais elle se sentait prête.")
            self.PrintEtEntreePourContinuer("*On arrête la fuite, et maintenant on se bat* pensa elle en son for interieur.")
            self.PrintEtEntreePourContinuer("Le coliseum avait été un bien piètre endroit pour attendre la chute de l'inquisition espagnole, mais il lui avait donné une chose essentielle : le pouvoir.")
            self.PrintEtEntreePourContinuer("En temps que druidesse, Saria avait été formée aux arcanes de la nature, et aux diverses facons d'utiliser ce qu'elle produit pour soigner, proteger la vie elle même.")
            self.PrintEtEntreePourContinuer("Elle n'avait jamais appris a se proteger, elle.")
            self.PrintEtEntreePourContinuer("La notion d'altruisme est un prérequis pour celle qui cherche la connaissance de la vie...")
            self.PrintEtEntreePourContinuer("...mais dans tant d'altruisme, on finit souvent par perdre la notion de soi dans un mélange de puissance et de dédication aux autres.")
            self.PrintEtEntreePourContinuer("On perd aussi ses possessions, au nom de la haine et de la peur.")
            self.PrintEtEntreePourContinuer("On perd aussi son héritage, dans un feu destructeur.")
            self.PrintEtEntreePourContinuer("On perd aussi ses confrères et consoeurs, dont les nouvelles disparaissent tel la fumée dans le vent.")
            self.PrintEtEntreePourContinuer("Et on finit par perdre une partie de son humanité, dans un méandre de tristesse et d'incompréhension.")
            self.PrintEtEntreePourContinuer("Mais aujourd'hui, Saria avait retrouvée quelque chose d'essentiel :")
            self.PrintEtEntreePourContinuer("La passion. La détermination.")
            self.PrintEtEntreePourContinuer("Son désir avait changé.")
            self.PrintEtEntreePourContinuer("Elle ne voulait plus se cacher, elle voulait se battre.")
            self.PrintEtEntreePourContinuer("[CIBLE DU DESIR CHANGEE]")
            self.PrintEtEntreePourContinuer("[INTERRUPTION DE LA FIN OPTIMALE]")
            self.PrintEtEntreePourContinuer("A la seconde ou elle prit cette décision, elle senti la force qui l'avait guidée jusque là s'évanouir.")
            self.PrintEtEntreePourContinuer("Mais elle avait la foi, et se mit en quete de ses pairs, pour former une résistance contre cette peur qui consumme les gens normaux !")
            self.PrintEtEntreePourContinuer("De Paris a Dublin...")
            self.PrintEtEntreePourContinuer("De Madrid a Moscou...")
            self.PrintEtEntreePourContinuer("De Johanesbourg a Kyoto...")
            self.PrintEtEntreePourContinuer("Elle fit le tour du monde grace a la fortune ammassée dans le Colyseum...")
            self.PrintEtEntreePourContinuer("Evita de peu la mort grâce a ses nouveaux pouvoirs...")
            self.PrintEtEntreePourContinuer("Et rassembla tout les adeptes de la magie dans une grande communautée qui ne voyait ni la couleur de la peau, ni la classe sociale, ni le pays d'origine !")
            self.PrintEtEntreePourContinuer("Et ainsi son organisation grandit...")
            self.PrintEtEntreePourContinuer("Elle passa de 1...")
            self.PrintEtEntreePourContinuer("A 2.....")
            self.PrintEtEntreePourContinuer("....")
            self.PrintEtEntreePourContinuer("....a 1...")
            self.PrintEtEntreePourContinuer("............a 1...")
            self.PrintEtEntreePourContinuer(".....")
            self.PrintEtEntreePourContinuer("..")
            self.PrintEtEntreePourContinuer(".")
            self.PrintEtEntreePourContinuer("")
            self.PrintEtEntreePourContinuer("Elle était arrivée trop tard.")
            self.PrintEtEntreePourContinuer("Les seules visions qui l'attendait...")
            self.PrintEtEntreePourContinuer("...étaient des cadavre brulés et les pleurs des familles.")
            self.PrintEtEntreePourContinuer("Les rois catholiques avaient gagnés.")
            self.PrintEtEntreePourContinuer("Le Pape Sixte IV détenait l'autoritée sur toute les religions du Monde.")
            self.PrintEtEntreePourContinuer("Il n'y avait plus rien a sauver.")
            self.PrintEtEntreePourContinuer("Il n'y avait plus rien a sauver.")
            self.PrintEtEntreePourContinuer("Il n'y avait plus rien a sauver.")
            self.PrintEtEntreePourContinuer("Il n'y avait plus rien a sauver.")
            self.PrintEtEntreePourContinuer("Il n'y avait plus rien a sauver.")
            self.PrintEtEntreePourContinuer("...")
            self.PrintEtEntreePourContinuer("Saria s'effondra dans une forêt sans nom pour pleurer a chaude larmes.")
            self.PrintEtEntreePourContinuer("Dans la solitude d'un cauchemard anonyme, elle laissa couler toute les émotions que peuvent contenir l'esprit et l'âme.")
            self.PrintEtEntreePourContinuer("Et a la réalité mordante...")
            self.PrintEtEntreePourContinuer("...elle préféra la chaleur des rêves qui ne finissent pas.")
            print("[FIN]")
            Affichage.EntreePourContinuer()
        elif nom == "Lucien":  # DONE
            self.PrintEtEntreePourContinuer("[RETOUR EN ARRIERE]")
            self.PrintEtEntreePourContinuer("[IL Y A QUELQUES MINUTES]")
            self.PrintEtEntreePourContinuer("*Alors, ca y est.*")
            self.PrintEtEntreePourContinuer("Le corps du Maitre Mage gisait là, sur le sol, mais il semblait pourtant plus vivant que jamais.")
            self.PrintEtEntreePourContinuer("Dans ses yeux brulait une flamme que l'on aurait crue inextinguible, et pourtant son sourire trahissait une attitude joueuse de ceux qui ont encore un as dans leur manche.")
            self.PrintEtEntreePourContinuer("*Quoi, tu en doutait ? Tout les hommes qui ont un jour laissé leur marque sur la terre ont une dette a regler. Mage, Ministre, Roi, ou Paysans, qu'importe.*")
            self.PrintEtEntreePourContinuer("*Et aujourd'hui...*")
            self.PrintEtEntreePourContinuer("La voix de Lucien se fit froide, mais légèrement tremblottante. L'émotion peut etre ?")
            self.PrintEtEntreePourContinuer("*...il est temps de la payer.*")
            self.PrintEtEntreePourContinuer("Maitre se releva.")
            self.PrintEtEntreePourContinuer("*J'ai un établi quelque part à l'étage, qui ne s'ouvre que quand je le souhaite. Tu peux aller chercher un symbole de ta victoire là-bas et...*")
            self.PrintEtEntreePourContinuer("Lucien fit un pas vers son predecesseur.")
            self.PrintEtEntreePourContinuer("*...et tu cherche quelque chose d'autre.*")
            self.PrintEtEntreePourContinuer("Lucien sorti un vieux couteau rouillé de sa poche, et l'empoigna fermement avant de fredonner un air de marin.")
            self.PrintEtEntreePourContinuer("*Vogue, vogue, pour l'éternité...*")
            self.PrintEtEntreePourContinuer("*Sur l'océan, les yeux, rivés...*")
            self.PrintEtEntreePourContinuer("*Vogue, vogue, la mer a tes pieds...*")
            self.PrintEtEntreePourContinuer("*Le ciel ne peut juger une lame émoussée.*")
            self.PrintEtEntreePourContinuer("Lucien aggripa l'épaule du Maitre Mage.")
            self.PrintEtEntreePourContinuer("*Tangue, tangue, la mer agitée...*")
            self.PrintEtEntreePourContinuer("*Une vie de pirate, une vie de libertée...*")
            self.PrintEtEntreePourContinuer("*Tangue, tangue, la mer a nos pieds...*")
            self.PrintEtEntreePourContinuer("*Nous risquons l'enfer sur le fil de l'épée.*")
            self.PrintEtEntreePourContinuer("Lucien fit retourner sans mal son adversaire à l'article de la mort.")
            self.PrintEtEntreePourContinuer("*La mort et les algues sur le ponton briqué...*")
            self.PrintEtEntreePourContinuer("*Les rires et les pleurs sur la planche du vicié.*")
            self.PrintEtEntreePourContinuer("Lucien aggripa les ailes du Maitre Mage d'un main...")
            self.PrintEtEntreePourContinuer("*Je vois que j'ai lancé une lignée de psychopathe, hein ?*")
            self.PrintEtEntreePourContinuer("...et leva son couteau de l'autre.")
            self.PrintEtEntreePourContinuer("*Les armes et l'argent dans un coffre d'acier...*")
            self.PrintEtEntreePourContinuer("*L'esprit et le corps comme une union soudée.*")
            self.PrintEtEntreePourContinuer("Lucien trancha dans la chair du Maitre Mage et retira l'aile gauche.")
            self.PrintEtEntreePourContinuer("*Vogue, vogue pour l'éternité...*")
            self.PrintEtEntreePourContinuer("Le Maitre Mage retenu un cri de douleur.")
            self.PrintEtEntreePourContinuer("*Ma vie et la tienne nous avons tout risqué...*")
            self.PrintEtEntreePourContinuer("Lucien trancha la deuxieme aile et la retira.")
            self.PrintEtEntreePourContinuer("*Je garde, un peu, de ta douce libertée*")
            self.PrintEtEntreePourContinuer("Le maitre Mage ne put retenir un hurlement de douleur.")
            self.PrintEtEntreePourContinuer("*Car le ciel ne peut juger lame...*")
            self.PrintEtEntreePourContinuer("Le Maitre Mage tomba a terre.")
            self.PrintEtEntreePourContinuer("*...émoussée.*")
            self.PrintEtEntreePourContinuer("Lucien jetta un regard aux deux ailes de mana.")
            self.PrintEtEntreePourContinuer("*Une partie de toi voguera a mes côtés, loin de cet endroit sordide.*")
            self.PrintEtEntreePourContinuer("*Et moi je pourrais montrer a tout le monde qui est le nouveau standard de puissance auquel il faut se comparer.*")
            self.PrintEtEntreePourContinuer("Le Maitre Mage s'éteignit dans une flaque de sang bleuté.")
            self.PrintEtEntreePourContinuer("Lucien jetta un dernier regard a celui dont l'ombre englobait autrefois tout ses efforts, avant de sortir du Coliseum.")
            self.PrintEtEntreePourContinuer("Il avait un navire a retrouver, et un objet a fabriquer.")
            self.PrintEtEntreePourContinuer("Et il savait parfaitement ce qu'il allait faire.")
            self.PrintEtEntreePourContinuer("*Vogue...vogue...pour l'éternitée....*")
            print("[FIN]")
            Affichage.EntreePourContinuer()
        elif nom == "Élémia":  # DONE
            self.PrintEtEntreePourContinuer("Élémia sortit du Coliseum.")
            self.PrintEtEntreePourContinuer("Elle passa en revu tout ce qui s'était passé depuis son entrée.")
            self.PrintEtEntreePourContinuer("Un truc noir qui parle bizarrement..")
            self.PrintEtEntreePourContinuer("Un chevalier aux grands airs...")
            self.PrintEtEntreePourContinuer("Une amalgamation de bout de monstre encore vivante...")
            self.PrintEtEntreePourContinuer("Un petit garcon en pleine puberté...")
            self.PrintEtEntreePourContinuer("Un type completement cinglé...")
            self.PrintEtEntreePourContinuer("Un autre enfant (ca commencait a faire beaucoup d'enfants quand meme)...")
            self.PrintEtEntreePourContinuer("Un autre type completement cinglé (la encore, ca commencait a faire beaucoup de cinglé)...")
            self.PrintEtEntreePourContinuer("Et un vieillard en pleine forme.")
            self.PrintEtEntreePourContinuer("Ils ont tous blablaté a propos d'un royaume et de trucs de cinglé qui n'interressait pas Élémia.")
            self.PrintEtEntreePourContinuer("Car Élémia était venue tester son armure.")
            self.PrintEtEntreePourContinuer("Et Élémia avait finit de la tester à l'étage, genre, deux.")
            self.PrintEtEntreePourContinuer("Quelques coups de monstres, quelques sorts aléatoires, et peut etre un peu de jogging dans son armure pour voir comment elle se comportait en situation réelle, c'est tout.")
            self.PrintEtEntreePourContinuer("Au final, si elle avait pu partir juste après, ca aurait été cool.")
            self.PrintEtEntreePourContinuer("Alors Élémia se mit a penser.")
            self.PrintEtEntreePourContinuer("*Ca serait quand même vachement plus pratique si je pouvais juste voir ou se trouve la clé a chaque étage, au lieu de me perdre en combats et en pièges même pas originaux.*")
            self.PrintEtEntreePourContinuer("Alors Élémia rentra chez elle et fariqua un truc pour juste voir ou se trouve la clé a chaque étage.")
            self.PrintEtEntreePourContinuer("Et comme d'habitude, elle ne réussit pas a faire son truc...")
            self.PrintEtEntreePourContinuer("...et créa a la place un truc encore plus incroyable.")
            self.PrintEtEntreePourContinuer("Mais Élémia retourna elle dans le Coliseum pour tester son truc ?")
            self.PrintEtEntreePourContinuer("Naaaan.")
            self.PrintEtEntreePourContinuer("Trop de types bizarre.")
            self.PrintEtEntreePourContinuer("C'est une vraie maison de fou là-bas !")
            self.PrintEtEntreePourContinuer("A la place, elle fit tester son armure au héros qui était passé la voir ya quelques temps de cela.")
            self.PrintEtEntreePourContinuer("Après tout, il avait plus grand chose a perdre !")
            self.PrintEtEntreePourContinuer("A part son autre bras.")
            self.PrintEtEntreePourContinuer("Et quand l'armure explosa au contact de la peau du héros..")
            self.PrintEtEntreePourContinuer("...et que son autre bras vola d'un bout a l'autre de la pièce...")
            self.PrintEtEntreePourContinuer("...Élémia se dit que, peut etre...")
            self.PrintEtEntreePourContinuer("...potentiellement...")
            self.PrintEtEntreePourContinuer("...elle avait eu beaucoup beaucoup beaucoup beaucoup de chance pendant son aventure.")
            self.PrintEtEntreePourContinuer("Alors Élémia arreta d'inventer des trucs.")
            self.PrintEtEntreePourContinuer("Et se mit au dessin !")
            self.PrintEtEntreePourContinuer("Mais on garde les horreurs lovecraftiennes invoquées accidentellement par ses gribouillis pour une autre histoire.")
            self.PrintEtEntreePourContinuer("Ah !")
            self.PrintEtEntreePourContinuer("Coucou Cat-Astrophe !")
            print("[FIN]")
            Affichage.EntreePourContinuer()
        elif nom == "Samantha":  # DONE
            self.PrintEtEntreePourContinuer("Samantha plongea les mains dans ses poches.")
            self.PrintEtEntreePourContinuer("Les pièces d'or pur étaient froide au toucher, et pourtant elle avait l'impression qu'elles lui brulaient les mains.")
            self.PrintEtEntreePourContinuer("Elle prit une profonde inspiration, tentant en vain de chasser la boule de chaleur qui lui entravait le torse.")
            self.PrintEtEntreePourContinuer("Qui aurait cru que cette pauvre étudiante en medecine allait survivre au donjon le plus meurtrier de toute l'Europe (si ce n'est le monde) ?")
            self.PrintEtEntreePourContinuer("Pas elle, en tout cas.")
            self.PrintEtEntreePourContinuer("Elle était désormais riche, et fit un rapide calcul dans sa tête.")
            self.PrintEtEntreePourContinuer("Les gratte-papiers de la trésorerie ne lui acheteraient pas ses pièces sans savoir d'ou elles viennent.")
            self.PrintEtEntreePourContinuer("Et si ils savaient, elle était sûre qu'ils trouveraient une manière de lui prendre ses biens, citant une loi d'appropriation des biens du Coliseum, ou quelque chose dans le genre.")
            self.PrintEtEntreePourContinuer("Elle retrouva le sac qu'elle avait cachée dans un buisson, près du grillage qui entoure le Coliseum, et vida ses poches dedans.")
            self.PrintEtEntreePourContinuer("Elle en profita aussi pour allumer son portable et lancer une recherche rapide :")
            self.PrintEtEntreePourContinuer("*Impot sur le revenu année en cours*")
            self.PrintEtEntreePourContinuer("Pour des revenus superieur a 177 016e, l'etat prend 45% des revenus.")
            self.PrintEtEntreePourContinuer("Dans sa tête, ca devenait clair : elle ne pouvait pas passer par le cheminement légal.")
            self.PrintEtEntreePourContinuer("Mais qui sait ce qu'il se passerait si elle vendait ses biens en passant par le marché noir ?")
            self.PrintEtEntreePourContinuer("Elle avait confiance en ses capacités a se défendre, mais on pouvait toujours lui voler ses biens.")
            self.PrintEtEntreePourContinuer("Elle fit alors le choix qui s'imposait :")
            self.PrintEtEntreePourContinuer("Elle lanca une demande sur reddit, et attendit ces gens qui s'y connaissent trop bien en des sujets particuliers, et qui donnent des réponses étrangement précises.")
            self.PrintEtEntreePourContinuer("En suivant les instructions, elle pourrait gagner assez d'argent pour rembourser ses dettes, et...")
            self.PrintEtEntreePourContinuer("et...")
            self.PrintEtEntreePourContinuer("et quoi ?")
            self.PrintEtEntreePourContinuer("Travailler pour le restant de ses jours dans des hopitaux miteux en manque de fond ?")
            self.PrintEtEntreePourContinuer("Ou alors dans un bureau petit en plein désert médical, a traiter des personnes a l'état toujours plus déplorable ?")
            self.PrintEtEntreePourContinuer("Lorsque c'était une étudiante, elle pouvait rever d'un job stable apportant un salaire faible, mais régulier.")
            self.PrintEtEntreePourContinuer("Mais se faire exploiter par des directeurs corrompus qui gardent l'argent destiné a l'amélioration des soins ?")
            self.PrintEtEntreePourContinuer("Alors qu'elle avait tant d'argent a sa disposition ?")
            self.PrintEtEntreePourContinuer("Impensable.")
            self.PrintEtEntreePourContinuer("Si elle voulait faire docteur, c'est avant tout pour aider ceux qui en ont besoin a voir la beautée de la vie pendant le plus de temps possible.")
            self.PrintEtEntreePourContinuer("Mais elle voulait aussi avoir une vie, une personne avec qui la partager, et une jolie maison dans laquelle elle pourrait, elle aussi, profiter de sa vie.")
            self.PrintEtEntreePourContinuer("Profiter de sa condition, profiter de ses... hobbies.")
            self.PrintEtEntreePourContinuer("Samantha réfléchit longtemps, sur le chemin qui le ramena chez elle.")
            self.PrintEtEntreePourContinuer("Elle continua de réflechir, alors qu'elle allait a l'université pour récuperer les papiers attestant de son master.")
            self.PrintEtEntreePourContinuer("Et elle finit par arriver a une conclusion qui allait changer le cours de sa vie.")
            self.PrintEtEntreePourContinuer("Samantha vendit ses golds par quelques moyens obscurs que seuls ceux qui sont dans le secret connaissent.")
            self.PrintEtEntreePourContinuer("Elle remboursa son prêt étudiant.")
            self.PrintEtEntreePourContinuer("Et...")
            self.PrintEtEntreePourContinuer("...elle disparut de la face du monde.")
            self.PrintEtEntreePourContinuer("On dit qu'une docteur enseigne a celles et ceux qui le veulent les joies de la medecine, quelque part sur une plage thailandaise.")
            self.PrintEtEntreePourContinuer("On dit que sous le toit rouge de la maison qu'elle habite, les malades trouvent les medicaments chers qui soignent les plus coriaces des maladies.")
            self.PrintEtEntreePourContinuer("On dit qu'entre ses mains expertes et son regard bienveillant, on trouverait même le courage d'affronter la mort.")
            self.PrintEtEntreePourContinuer("On dit que ses apprentis sont liés a elle par un contrat sévère, mais juste, qui leur permet de vivre leur vie sans être enchainé par des clauses et des pièges légaux.")
            self.PrintEtEntreePourContinuer("...")
            self.PrintEtEntreePourContinuer("On dit aussi que c'est la joueuse de League of Legends la plus toxique de la décennie.")
            print("[FIN]")
            Affichage.EntreePourContinuer()
        elif nom == "Emy":  # DONE
            self.PrintEtEntreePourContinuer("Emy fit un pas de plus vers la sortie.")
            self.PrintEtEntreePourContinuer("C'était un pas comme les autres, un de ces pas déterminés qu'elle avait déjà tant effectués, vers un futur précis, prédéterminé.")
            self.PrintEtEntreePourContinuer("Et au fond du long couloir de pierre, elle vit quelque chose d'incroyable :")
            self.PrintEtEntreePourContinuer("Du vert.")
            self.PrintEtEntreePourContinuer("Pas le vert brun et mauve du deuxieme étage, pas ce vert toxique et malsain.")
            self.PrintEtEntreePourContinuer("Non.")
            self.PrintEtEntreePourContinuer("Sa vision fut remplie d'un vert éclatant, et puis d'un gris qui s'étendait a perte de vue aussi.")
            self.PrintEtEntreePourContinuer("Sa peau réagit au froid d'une pluie battante, mais sereine.")
            self.PrintEtEntreePourContinuer("Elle qui avait vécue toute sa vie dans le coliseum, pendant de longues années, enterrée dans ce tombeau putride a travers des milliers de cycles de réincarnation,")
            self.PrintEtEntreePourContinuer("Elle qui avait tuée et s'était faite tuée, encore et encore, et dont la vie se résumait a des murs de pierre et les échos d'un ordre terrible dans son esprit.")
            self.PrintEtEntreePourContinuer("Elle voyait ce qu'il y avait en dehors, au dela.")
            self.PrintEtEntreePourContinuer("Et c'était magnifique !")
            self.PrintEtEntreePourContinuer("Emy se laissa emporter ses émotions et imprima chaque centimètres de cette vue dans son esprit.")
            self.PrintEtEntreePourContinuer("Elle se mit au seuil de la sortie et huma les odeurs étrangères que le vent lui apportèrent...")
            self.PrintEtEntreePourContinuer("Puis elle se retourna.")
            self.PrintEtEntreePourContinuer("Aussi beau que tout cela puisse paraitre, elle était enchainée au Colyseum.")
            self.PrintEtEntreePourContinuer("Elle ne le savait que trop bien.")
            self.PrintEtEntreePourContinuer("L'être corrompu qui dirige tout ce qui se trouve dans les arènes est un tyrant qui appose sa marque sur ses créations.")
            self.PrintEtEntreePourContinuer("La marque du sacrifice.")
            self.PrintEtEntreePourContinuer("Elle permet de revenir a la vie et de gagner en puissance tant que l'on est dans le coliseum...")
            self.PrintEtEntreePourContinuer("...cepandant vous ne pouvez désobéir a aucun de ses ordres.")
            self.PrintEtEntreePourContinuer("Vous ne pouvez pas quitter cet endroit.")
            self.PrintEtEntreePourContinuer("Et si vous ne voulez pas passer votre temps en état de non-existance...")
            self.PrintEtEntreePourContinuer("...vous devez plaire au public.")
            self.PrintEtEntreePourContinuer("Les armées de fantomes qui se trouvent dans les gradins, anciens combattants ayant perdus la vie ici, doivent assister a des combats dramatiqeus et saisissants, ou alors...")
            self.PrintEtEntreePourContinuer("...?")
            self.PrintEtEntreePourContinuer("La marque...")
            self.PrintEtEntreePourContinuer("L'humiditée de dehors avait fait perler des gouttes d'eau sur le plafond.")
            self.PrintEtEntreePourContinuer("Et dans la flaque d'eau en dessous, Emy vit la marque du sacrifice sur son cou.")
            self.PrintEtEntreePourContinuer("Cette dernière était a moitiée effacée, a la séparation entre son corps de loup et son corps d'Homme.")
            self.PrintEtEntreePourContinuer("Se pourrait-il que la transformation l'aie libérée de cette malédiction ??")
            self.PrintEtEntreePourContinuer("Emy jetta un autre coup d'oeil dehors.")
            self.PrintEtEntreePourContinuer("Ce monde l'attirait, lui chuchotait a l'oreille de magnifiques proses, et promettait un avenir radieux.")
            self.PrintEtEntreePourContinuer("Au contraire, les murs froids ne la repoussait que davantage.")
            self.PrintEtEntreePourContinuer("Elle prit une décision.")
            self.PrintEtEntreePourContinuer("Emy se réapprocha du seuil de la sortie...")
            self.PrintEtEntreePourContinuer("...")
            self.PrintEtEntreePourContinuer("...et subissa une violente réaction.")
            self.PrintEtEntreePourContinuer("On aurait dit que son corps tout entier était parcouru d'électricité.")
            self.PrintEtEntreePourContinuer("La voix de son créateur retentit dans don esprit :")
            self.PrintEtEntreePourContinuer("*TU NE QUITTERA PAS LE COLISEUM*")
            self.PrintEtEntreePourContinuer("Emy répondit par la négative a la voix désincarnée qui la faisait tant souffrir.")
            self.PrintEtEntreePourContinuer("*TU NE QUITTERA PAS LE COLISEUM*")
            self.PrintEtEntreePourContinuer("Emy avait déja ressenti cela lorsque elle avait laissée le vieil homme en vie, et avait tuée un autre voyageur pour faire taire cette douleur qui la transpercait.")
            self.PrintEtEntreePourContinuer("*TU NE QUITTERA PAS LE COLISEUM*")
            self.PrintEtEntreePourContinuer("Cepandant...")
            self.PrintEtEntreePourContinuer("*TU NE QUITTERA PAS LE COLISEUM*")
            self.PrintEtEntreePourContinuer("...c'était quand même bien plus fort ? Cela faisait bien plus mal ? Et elle n'avait pas le luxe de penser a tout ca car son corps réagissait de lui même ?")
            self.PrintEtEntreePourContinuer("*TU NE QUITTERA PAS LE COLISEUM*")
            self.PrintEtEntreePourContinuer("Emy regarda l'herbe verte et les arbres au loin.")
            self.PrintEtEntreePourContinuer("*TU NE QUITTERA PAS LE COLISEUM*")
            self.PrintEtEntreePourContinuer("Emy fit un pas de plus vers la sortie.")
            self.PrintEtEntreePourContinuer("*TU NE QUITTERA PAS LE COLISEUM*")
            self.PrintEtEntreePourContinuer("Emy fit un pas de plus vers la sortie.")
            self.PrintEtEntreePourContinuer("*TU NE QUITTERA PAS LE COLISEUM*")
            self.PrintEtEntreePourContinuer("Emy fit un pas de plus vers la sortie.")
            self.PrintEtEntreePourContinuer("*TU NE QUITTERA PAS LE COLISEUM*")
            self.PrintEtEntreePourContinuer("Emy fit un pas du plus vers la sortie.")
            self.PrintEtEntreePourContinuer("*TU NE QUITTERA PAS L-*")
            self.PrintEtEntreePourContinuer("Emy traversa le seuil de la porte et s'effondra sur le gazon.")
            self.PrintEtEntreePourContinuer("La marque permettait de controler, tant que l'on était encore dans le Coliseum.")
            self.PrintEtEntreePourContinuer("Tant que l'on était encore dans le Coliseum.")
            self.PrintEtEntreePourContinuer("Emy senti une chaleur étrange au niveau de son cou, et se regarda dans une flaque.")
            self.PrintEtEntreePourContinuer("La marque du sacrifice avait disparue, et avec elle , toute les parties de son corps liées avec sa vie de louve.")
            self.PrintEtEntreePourContinuer("Emy...")
            self.PrintEtEntreePourContinuer("...était enfin devenue humaine.")
            self.PrintEtEntreePourContinuer("On dit qu'une dessinatrice de talent s'est installée dans la maison de l'ancien capitaine de la garde de Carcassonne.")
            self.PrintEtEntreePourContinuer("On dit que c'est un proche parent, avec le même coeur vaillant et remplit de bonté.")
            self.PrintEtEntreePourContinuer("On dit qu'elle parcourt le monde pour le mettre en image, mais qu'elle revient toujours à sa maison.")
            self.PrintEtEntreePourContinuer("On dit...")
            self.PrintEtEntreePourContinuer("...que le plus beau dessin du monde est un portrait du capitaine adossé contre un loup, tout deux en plein sommeil.")
            self.PrintEtEntreePourContinuer("Et Emy ne s'en séparera pour rien au monde.")
            print("[FIN]")
            Affichage.EntreePourContinuer()
        elif nom == "Terah":  # DONE
            self.PrintEtEntreePourContinuer("Terah regarda au dehors.")
            self.PrintEtEntreePourContinuer("Le Monde exterieur.")
            self.PrintEtEntreePourContinuer("La société.")
            self.PrintEtEntreePourContinuer("La vie.")
            self.PrintEtEntreePourContinuer("Il était venu au coliseum parce qu'une voix l'avait attiré.")
            self.PrintEtEntreePourContinuer("C'était peut etre la premiere fois que quelqu'un l'avait appelé par son prénom, non pas pour lui faire du mal...")
            self.PrintEtEntreePourContinuer("...mais parce que quelqu'un désirait sa présence.")
            self.PrintEtEntreePourContinuer("Et Terah avait beau avoir fouillé le Coliseum dans son entieretée, il n'avait pas trouvé cette présence qui voulait bien de lui.")
            self.PrintEtEntreePourContinuer("Cette.. émotion étrangère... qui l'avait amenée là.")
            self.PrintEtEntreePourContinuer("Et maintenant ?")
            self.PrintEtEntreePourContinuer("La force qui poussait chacun de ses pas était toujours là, en lui.")
            self.PrintEtEntreePourContinuer("Cette chose qui pouvait répondre a ses désirs, et le pousser dans la bonne direction...")
            self.PrintEtEntreePourContinuer("...elle s'était arrétée.")
            self.PrintEtEntreePourContinuer("Il n'avait pourtant pas changé son désir, et voulait réellement rencontrer le propriétaire de la Voix.")
            self.PrintEtEntreePourContinuer("Mais elle restait immobile.")
            self.PrintEtEntreePourContinuer("Muette.")
            self.PrintEtEntreePourContinuer("Comme une idole devant laquelle on prie pendant toute une vie.")
            self.PrintEtEntreePourContinuer("Comme le cadavre d'un parent a qui on demande de répondre.")
            self.PrintEtEntreePourContinuer("Comme les insectes putrides d'une fosse dans laquelle on est jetée par d'autres enfants.")
            self.PrintEtEntreePourContinuer("Terah se retrouvait a nouveau seul, devant une batisse étrangère, dans un pays étranger, sans même plus rien pour vivre a par la puissance.")
            self.PrintEtEntreePourContinuer("Il comprit que sa seule chance de survie était de mettre cette nouvelle puissance a l'oeuvre, dans des endroits ou on voudrait bien de lui.")
            self.PrintEtEntreePourContinuer("Mais a quoi bon ?")
            self.PrintEtEntreePourContinuer("A la croisée des chemins et des décisions, a la fin de son périple, Terah ressentit quelque chose de terrible, qui lui déchira les entrailles et abbatu toute volontée de se battre.")
            self.PrintEtEntreePourContinuer("Ce genre d'émotion qui abat un homme et le ramène a lui même,")
            self.PrintEtEntreePourContinuer("A sa place dans le monde.")
            self.PrintEtEntreePourContinuer("Une deppression fulgurante, une tristesse insondable,")
            self.PrintEtEntreePourContinuer("Il avait l'impression d'avoir raté quelque chose.")
            self.PrintEtEntreePourContinuer("Il avait l'impression d'avoir manqué un chemin, et que ce qu'il ressentait lui permettrait de le trouver.")
            self.PrintEtEntreePourContinuer("Comme une porte dont la serrure était si complexe, qu'il fallait échouer a l'ouvrir au moins une fois pour comprendre comment elle marche.")
            self.PrintEtEntreePourContinuer("Ce qu'il ressentait maintenant était un puissant coup de poing dans son âme, mais lui permettait de reprendre le controle de son corps.")
            self.PrintEtEntreePourContinuer("Mais c'était trop tard pour l'utiliser.")
            self.PrintEtEntreePourContinuer("Ce Vide Interieur.")
            self.PrintEtEntreePourContinuer("Terah regarda alors le paysage en dehors du couloir.")
            self.PrintEtEntreePourContinuer("Rien ne l'attendait dehors.")
            self.PrintEtEntreePourContinuer("Alors...")
            self.PrintEtEntreePourContinuer("...")
            self.PrintEtEntreePourContinuer("...Terah retourna dans le coliseum.")
            self.PrintEtEntreePourContinuer("Et disparut pour toujours.")
            self.PrintEtEntreePourContinuer("[FIN?]")
        elif nom == "Redde":  # DONE
            self.PrintEtEntreePourContinuer("*Et voila le travail !*")
            self.PrintEtEntreePourContinuer("Redde s'exprima auprès d'un public invisible.")
            self.PrintEtEntreePourContinuer("*J'ai affronté les terribles étages du coliseum, conquit chacun des boss avec l'aide de l'amour et de l'amitié, et...*")
            self.PrintEtEntreePourContinuer("*...vaincu le plus grand mage de tout les temps !*")
            self.PrintEtEntreePourContinuer("*Nous venons de vivre...*")
            self.PrintEtEntreePourContinuer("*..l'aventure ULTIME !*")
            self.PrintEtEntreePourContinuer("Redde prit une grand inspiration.")
            self.PrintEtEntreePourContinuer("*JE SUIS INVINCIBLE !*")
            self.PrintEtEntreePourContinuer("Redde laissa courir le bruit pendant quelques instants, avant de se reprendre.")
            self.PrintEtEntreePourContinuer("*LA JUSTICE TRIOMPHE ENCORE !*")
            self.PrintEtEntreePourContinuer("la phrase flotta quelques instants dans les airs, mais elle ne convainquit pas Redde.")
            self.PrintEtEntreePourContinuer("*Grace a moi, nous entrons dans une ère de paix !*")
            self.PrintEtEntreePourContinuer("Ca sonnait mieux, mais encore un peu trop...centré sur lui.")
            self.PrintEtEntreePourContinuer("C'était un héros, pas une star de cinéma.")
            self.PrintEtEntreePourContinuer("*Et c'est ainsi que mon.. que l'aventure...*")
            self.PrintEtEntreePourContinuer("Redde avait du mal a faire sortir les mots coincés au fond de sa gorge.")
            self.PrintEtEntreePourContinuer("*...se finit.*")
            self.PrintEtEntreePourContinuer("Voila. Il l'avait enfin dit.")
            self.PrintEtEntreePourContinuer("Il avait mit fin a son aventure, a sa quête, a sa légende.")
            self.PrintEtEntreePourContinuer("Accompagnés par la pensée par ses amis et son petit ami qui l'attendait surement a la maison...")
            self.PrintEtEntreePourContinuer("Ils ferait une grande soirée pour célébrer sa victoire...")
            self.PrintEtEntreePourContinuer("Et il pourrait revoir toutes les personnes qu'il avait aidé pendant sa quête...")
            self.PrintEtEntreePourContinuer("...avant de vivre sa vie heureuse.")
            self.PrintEtEntreePourContinuer("Sa vraie vie.")
            self.PrintEtEntreePourContinuer("Sa vie ennuyeuse.")
            self.PrintEtEntreePourContinuer("Son existance...")
            self.PrintEtEntreePourContinuer("...banale.")
            self.PrintEtEntreePourContinuer("Alors que la pluie tombait, Redde regarda vers l'Horizon.")
            self.PrintEtEntreePourContinuer("Il n'y avait plus rien a faire.")
            self.PrintEtEntreePourContinuer("Il n'arrivait plus a inventer d'autres histoires dont il était le héros.")
            self.PrintEtEntreePourContinuer("Il n'arrivait plus a visualiser les douces formes de sa ou son interet romantique.")
            self.PrintEtEntreePourContinuer("Il n'arrivait plus a imaginer de situation ou il les sauve d'une attaque incroyable...")
            self.PrintEtEntreePourContinuer("...ou il les surprend dans un moment génant...")
            self.PrintEtEntreePourContinuer("...ou il passe un moment léger en companie de ses amis factices.")
            self.PrintEtEntreePourContinuer("Il n'arrivait plus a se projeter hors de cette réalitée terriblement banale.")
            self.PrintEtEntreePourContinuer("Et il était fatigué de faire ce spectacle ou chaque actions est amplifiée.")
            self.PrintEtEntreePourContinuer("Il était fatigué de toujours devoir faire semblant pour échapper a son ombre.")
            self.PrintEtEntreePourContinuer("Redde..")
            self.PrintEtEntreePourContinuer("...s'asseya sur le sol trempé.")
            self.PrintEtEntreePourContinuer("Il savait que le rêve avait touché a sa fin...")
            self.PrintEtEntreePourContinuer("...et pleura les bons moments qu'il avait vécu dans sa fantaisie onirique.")
            self.PrintEtEntreePourContinuer("Il pleura a chaude larmes la fin de Redde le streamer héros, et le début de Jérémy l'adulte incapable d'appeler un dentiste.")
            self.PrintEtEntreePourContinuer("Il avait fuit cette réalitée, ses responsabilités, et ce bagage d'adulte remplit de connaissances et de choses vécues.")
            self.PrintEtEntreePourContinuer("Et aujourd'hui, il devait y faire face.")
            self.PrintEtEntreePourContinuer("Jérémy devait grandir, et cette idée devenait de plus en plus insupportable.")
            self.PrintEtEntreePourContinuer("C'était peut etre son plus grand défi.")
            self.PrintEtEntreePourContinuer("Et la pluie continuait de faire écho a ses lamentations.")
            self.PrintEtEntreePourContinuer("Alors Jérémy finit de faire son deuil,")
            self.PrintEtEntreePourContinuer("Et regarda la pluie tomber.")
            self.PrintEtEntreePourContinuer("...")
            self.PrintEtEntreePourContinuer("*Si d'autres personnes peuvent le faire...pourquoi pas moi ?*")
            self.PrintEtEntreePourContinuer("*Ca doit pas etre si terrible une fois qu'on s'y met.*")
            self.PrintEtEntreePourContinuer("*Et puis je peux toujours demander conseil a celles et ceux qui m'entourent*")
            self.PrintEtEntreePourContinuer("...")
            self.PrintEtEntreePourContinuer("Les gouttes perlaient sur son front.")
            self.PrintEtEntreePourContinuer("Le bruit remplissait ses oreilles et apaisait son esprit.")
            self.PrintEtEntreePourContinuer("Il avait affronté un mage, il pouvait affronter la vie.")
            self.PrintEtEntreePourContinuer("Alors Jérémy prononca des mots qu'il n'avait jamais prononcé devant cette terrible chose, cette monumentale tache qui l'attendait.")
            self.PrintEtEntreePourContinuer("C'était des mots vrais, qui venaient tout droit du coeur.")
            self.PrintEtEntreePourContinuer("Des mots qui ne vivaient pas dans sa tête, et qui aurait un véritable impact sur sa vie.")
            self.PrintEtEntreePourContinuer("Alors que la pluie tombait.")
            self.PrintEtEntreePourContinuer("Indéfiniment.")
            self.PrintEtEntreePourContinuer("...")
            self.PrintEtEntreePourContinuer("*Je vais y arriver.*")
            self.PrintEtEntreePourContinuer("Et Redde sourit.")
            print("[FIN]")
            Affichage.EntreePourContinuer()
        elif nom == "Valfreya":  # DONE
            self.PrintEtEntreePourContinuer("Valfreya. Fière Valkirie.")
            self.PrintEtEntreePourContinuer("Décide de qui survit aux batailles.")
            self.PrintEtEntreePourContinuer("Sert les boissons aux guerriers dans le halle du valr.")
            self.PrintEtEntreePourContinuer("Absolument PAS une guerriere.")
            self.PrintEtEntreePourContinuer("Et pourtant elle avait, dans une fragile enveloppe charnelle, terrassé l'un des endroits le plus meurtrier du monde !")
            self.PrintEtEntreePourContinuer("Pour prouver a des machos qu'elle n'était pas inutile.")
            self.PrintEtEntreePourContinuer("Penser a l'absurdité de tout ceci ternit un peu son enthousiasme.")
            self.PrintEtEntreePourContinuer("La condition de la femme au paradis des guerriers n'est guère plus terrible qu'ici bas, alors que la nature des habitants des deux royaumes sont à l'opposée...")
            self.PrintEtEntreePourContinuer("Il fallait que ca change !")
            self.PrintEtEntreePourContinuer("Valfreya leva alors les mains vers le ciel, afin de signifier sa réussite, mais surtout pour qu'on envoie des gens pour la chercher.")
            self.PrintEtEntreePourContinuer("Après tout, le chemin jusqu'au royaume perché dans les hautes branches de l'Yggdrasil était long et ardu, et elle voulait rentrer au plus vite pour jeter un bon verre d'hydromel a la tête de Odin !")
            self.PrintEtEntreePourContinuer("Et quand les heures passèrent, et que rien ne vint...")
            self.PrintEtEntreePourContinuer("...elle comprit qu'elle allait devoir se le farcir, le chemin ardu.")
            self.PrintEtEntreePourContinuer("Alors Valfreya se mit en route.")
            self.PrintEtEntreePourContinuer("Elle fit d'abord une invocation afin de descendre a Svartalfheim, le royaume des nain, pour y chercher une autorisation de passage.")
            self.PrintEtEntreePourContinuer("L'invocation lui permit de passer Jötunheim, le royaume des géants, ce qui était un gain de temps considérable.")
            self.PrintEtEntreePourContinuer("Ensuite, elle retourna au Midgard, le royaume des hommes, afin de chercher les derniers druides qui l'emmeneraient à Álfheim, le royaume des elfes.")
            self.PrintEtEntreePourContinuer("Mais elle ne trouva personne, et dut se débrouiller dans la forêt magique de Brocéliande avec quelques vieux manuscrits écrits par la dernière druidesse.")
            self.PrintEtEntreePourContinuer("Arrivée chez les elfes, elle utilisa son autorisation pour monter vers le prochain royaume (après une petite cinquantaine d'année pour vérifier l'authenticité du papier : les elfes ne sont pas pressés.)")
            self.PrintEtEntreePourContinuer("Au royaume des Vanes, elle se fit discrète et demanda rapidement a ce qu'on l'emmène a Asgard.")
            self.PrintEtEntreePourContinuer("Problème : Les Vanes n'étaient pas contentes du dernier échange de divinités avec les Ases, et se mirent à se défouler sur Valfreya...")
            self.PrintEtEntreePourContinuer("...avant que cette dernière, emplie de sa nouvelle force et un peu énervée de son périple, les envoya a travers une montagne.")
            self.PrintEtEntreePourContinuer("Et une autre.")
            self.PrintEtEntreePourContinuer("Et encore une autre.")
            self.PrintEtEntreePourContinuer("Cette démonstration de force fit rapidement décider Hoenir a aider la Valkirie a rentrer a la maison.")
            self.PrintEtEntreePourContinuer("Arrivée a Asgard, elle put rejoindre le Valhalla, et retrouva Odin et Thor, en pleine discussion sur la cuisson du prochain repas.")
            self.PrintEtEntreePourContinuer("Ces derniers furent bien étonné de la revoir vivante, et se confondirent en excuses.")
            self.PrintEtEntreePourContinuer("Mais Valfreya avait consommée l'entieretée de sa patience, et hurla sur les deux dieux nordiques.")
            self.PrintEtEntreePourContinuer("Toute la haine de son mauvais traitement s'était mélangée a la terreur qu'elle avait ressentie dans le Coliseum.")
            self.PrintEtEntreePourContinuer("Et elle en avait marre.")
            self.PrintEtEntreePourContinuer("Odin reconnut ses tords, et offrit a Valfreya d'aller lui chercher a boire, avant de parler récompenses.")
            self.PrintEtEntreePourContinuer("Et apporta a Valfreya...")
            self.PrintEtEntreePourContinuer("...un verre de Syra.")
            self.PrintEtEntreePourContinuer("Du lait.")
            self.PrintEtEntreePourContinuer("...")
            self.PrintEtEntreePourContinuer("On dit que Valfreya prit un tonneau d'Hydromel et le balanca a la tête d'Odin si fort...")
            self.PrintEtEntreePourContinuer("...qu'il dégringola l'entieretée de l'Yggdrasil et tomba à Helheim, le royaume des morts.")
            self.PrintEtEntreePourContinuer("Quand a Thor ?")
            self.PrintEtEntreePourContinuer("Lui et les guerriers du Valhalla servirent sa bière a Valfreya et les autres valkyries pendant tout un millénaire.")
            self.PrintEtEntreePourContinuer("De nos jours, les Valkyrie servent un mois sur deux, et se font servir le reste du temps.")
            self.PrintEtEntreePourContinuer("Un petit pas pour la cause !")
            print("[FIN]")
            Affichage.EntreePourContinuer()
        elif nom == "Bob":  # DONE
            self.PrintEtEntreePourContinuer("Bob fit quelques pas dans les herbes vertes de la plaine ou se situe le Coliseum.")
            self.PrintEtEntreePourContinuer("*AH-AH ! JE SUIS RESSORTI VAINQUEUR DU COLISEUM ! ENCORE UNE VICTOIRE A AJOUTER A MA BIBLIOGRAPHIE, BILLY !*")
            self.PrintEtEntreePourContinuer("La tête d'un enfant roux, pas plus agé que 13 ans, sorti du grand sac a dos de Bob. Ses joues constellées de taches de rousseur s'activèrent.")
            self.PrintEtEntreePourContinuer("*Bob, Bob ! Tu n'as pas de bibliographie voyons ! Tu brule tout les livres qui parlent de toi en hurlant que les droits d'auteurs ne sont pas respectés !*")
            self.PrintEtEntreePourContinuer("*SILENCE, BILLY ! TU N'ES BIEN EVIDEMMENT PAS ASSEZ INTELLIGENT POUR COMPRENDRE CE QUE JE FAIS AU QUOTIDIEN !*")
            self.PrintEtEntreePourContinuer("*M-m-mais, Bob..*")
            self.PrintEtEntreePourContinuer("*SILENCE JE DIS, MON CORPS CONTIENT ASSEZ DE MUUUUUSCLE POUR T'ENVOYER AU SEPTIEME CIEL D'UNE SIMPLE FLEXION DE MON POIGNET ! HAAAANNN !*")
            self.PrintEtEntreePourContinuer("*J'imagine... et que va tu faire de cette puissance, bob ?*")
            self.PrintEtEntreePourContinuer("*JE VAIS...*")
            self.PrintEtEntreePourContinuer("*Oui ?*")
            self.PrintEtEntreePourContinuer("*JE... VAIS..*")
            self.PrintEtEntreePourContinuer("*Oui ??*")
            self.PrintEtEntreePourContinuer("*JE !!!! VAIS !!!*")
            self.PrintEtEntreePourContinuer("*Oui ???!!!*")
            self.PrintEtEntreePourContinuer("*TOUT !!! DONNER !!! A MA DIVINITE !!!*")
            self.PrintEtEntreePourContinuer("*Ah ben non alors ! Pas encore !*")
            self.PrintEtEntreePourContinuer("*VOYONS BILLY, CA SERAIT TROP SIMPLE DE TOUT REUSSIR AVEC CETTE FORCE !*")
            self.PrintEtEntreePourContinuer("*Bah ! Justement !*")
            self.PrintEtEntreePourContinuer("*COMMENT UN PYROBARBARE PEUT ETRE BARBARE SI TOUT EST FACILE ?*")
            self.PrintEtEntreePourContinuer("*Ta logique fait aucun sens, bob !*")
            self.PrintEtEntreePourContinuer("*ET PUIS DE TOUTE FACON C'EST DECIDE.*")
            self.PrintEtEntreePourContinuer("Bob prononca un mot ancien, empli de sagesse, comme ceux qui appartiennent aux divinités oubliées.")
            self.PrintEtEntreePourContinuer("Vous perdez 99% de toute la puissance que vous avez obtenue !")
            self.PrintEtEntreePourContinuer("Cette derniere part dans les airs et disparait, devenant le copieux diner de la divinité protectrice de Bob.")
            self.PrintEtEntreePourContinuer("*Bon... bah si c'est déja fait alors...*")
            self.PrintEtEntreePourContinuer("*NE T'INQUIETE PAS BILLY !! JE SUIS ASSEZ MUSCULEUX POUR REUSSIR TOUT CE QUE J'ENTREPREND, MEME SANS CETTE PUISSANCE SUPERFLUE !*")
            self.PrintEtEntreePourContinuer("*Je te fait confiance Bob. Et puis j'imagine qu'elle a du te donner quelque chose en échange hein ?*")
            self.PrintEtEntreePourContinuer("*BIEN SUR !*")
            self.PrintEtEntreePourContinuer("*...*")
            self.PrintEtEntreePourContinuer("*...*")
            self.PrintEtEntreePourContinuer("*C'est...encore un pin's ?*")
            self.PrintEtEntreePourContinuer("*AH AH BILLY ! TU AS L'OEUIL !*")
            self.PrintEtEntreePourContinuer("*Mais Bob ! Voyons ! C'est le 20 eme pins que tu recois ! Et je te parle meme pas de ceux qui sont a la maison !*")
            self.PrintEtEntreePourContinuer("*MAIS !*")
            self.PrintEtEntreePourContinuer("*Ya aussi le tee-shirt avec un pin's imprimé dessus...*")
            self.PrintEtEntreePourContinuer("*MAIS !*")
            self.PrintEtEntreePourContinuer("*Et puis cette fois ou elle t'a offert un anneau avec un pin's dessus en échange du réceptacle de vie d'une Reine Liche...*")
            self.PrintEtEntreePourContinuer("*MAIS !*")
            self.PrintEtEntreePourContinuer("*Et puis, et puis, le pin's en forme de pin's ! Je sais même pas comment c'est possible !*")
            self.PrintEtEntreePourContinuer("*MAIS !*")
            self.PrintEtEntreePourContinuer("*Mais ! Quoi a la fin ?*")
            self.PrintEtEntreePourContinuer("*MAIS BILLY ! VOYONS ! CELUI LA EST EN FORME D'EXTINCTEUR ! C'EST A LA FOIS UN CADEAU MIGNON, TENDANCE, MAIS EN PLUS C'EST TERRRRRRRIBLEMENT MARRANT !*")
            self.PrintEtEntreePourContinuer("*Ahhh ! Un extincteur ! Un truc qui éteint le feu ! Alors que tu maitrise le feu ! C'est vrai que c'est vachement... sagace !*")
            self.PrintEtEntreePourContinuer("*AH AH ! TU VOIS BILLY !*")
            self.PrintEtEntreePourContinuer("*Oui !!! Je !!! Vois !!!*")
            self.PrintEtEntreePourContinuer("*AH AH ! ALORS PARTONS MAINTENANT !*")
            self.PrintEtEntreePourContinuer("Bob commenca a partir vers le Nord, a la recherche de nouvelles aventures, et d'autres mondes qui lui les fournirait.")
            self.PrintEtEntreePourContinuer("*AU FAIT, BILLY...*")
            self.PrintEtEntreePourContinuer("*Oui, Bob ?*")
            self.PrintEtEntreePourContinuer("*TU...SAIS CE QUE CA VEUT DIRE... SAGACE ?*")
            self.PrintEtEntreePourContinuer("*Bien sur, Bob !*")
            self.PrintEtEntreePourContinuer("C'était bien évidemment un mensonge.")
            print("[FIN]")
            Affichage.EntreePourContinuer()


    def PrintEtEntreePourContinuer(self, message):
        print(message)
        Affichage.EntreePourContinuer()

    def PrintEtEntreePourContinuerIntro(self, message, temps):
        print(message)
        time.sleep(temps)
        ClearConsole()

    def ShowBeginingOfEnding(self):
        #print le début de l'explication de la fin de chaque personnage
        StopAllMusic()
        print("[AVENTURE TERMINE]")
        Affichage.EntreePourContinuer()
        print("[CALCUL DE LA CONTRIBUTION DU PERSONNAGE EN COURS...]")
        Affichage.AfficheAvecUnTempsDattente(3)
        print("[CALCUL TERMINE]")
        Affichage.EntreePourContinuer()
        print("[CONTRIBUTION DU PERSONNAGE SUFFISANTE]")
        Affichage.EntreePourContinuer()
        print("[D E S I R  A C C O R D E]")
        Affichage.EntreePourContinuer()
        print("[ALTERATION DES LOIS DE L'UNIVERS EN COURS...]")
        Affichage.AfficheAvecUnTempsDattente(3)
        print("[AJOUT DE KARMA POSITIF EN COURS...]")
        Affichage.AfficheAvecUnTempsDattente(3)
        print("[CHARGEMENT D'UNE FIN OPTIMALE...]")
        Affichage.AfficheAvecUnTempsDattente(3)
        print("[CHARGEMENT TERMINE]")
        Affichage.EntreePourContinuer()
        print("[VEUILLEZ OBSERVER LA CONSEQUENCE DES CHOIX DE CELLES ET CEUX QUI VOUS ONT PRETE LEUR CORPS]")
        Affichage.EntreePourContinuer()
        PlayMusic("finale")

    def DoLastFight(self):
        #lance un combat avec certains prerequis
        Player.affronte_fin_histoire = True
        control = controleur.Control(Player, Trader, FloorMaker, Sove)
        # lance la bataille
        while True:
            try:
                CHANNELMUSIQUEDEBASE.set_volume(0)
                time.sleep(0.01)
                CHANNELMUSIQUEDEBASE.stop()
                control.Battle()
                Player.affronte_fin_histoire = False
                StopAllMusic()
                self.PrintEtEntreePourContinuer("[COMBAT TERMINE]")
                break
            except Exception as error:
                WriteErrorInErrorLog(error)

    def GiveGift(self):
        if Player.nom_du_personnage == "Ahti" and not Sove.ModifieTagsDansSove("Checke", Player.nom_du_personnage):
            Sove.ModifieTagsDansSove("Ajout", Player.nom_du_personnage)
            print(f"Vous avez terminé l'histoire de {Player.nom_du_personnage} pour la première fois !")
            PlaySound("questdone")
            Affichage.EntreePourContinuer()
            print("Les informations a propos des personnages jouables ont été imprimées dans votre esprit.")
            print("Trouvez un moyen de les noter quelque part !")
            Affichage.EntreePourContinuer()
            for nom_personnage in LISTEDEPERSONNAGE :
                Sove.RajouteEntreeAuLivreCigogneBlancheSiOnAPas("Les Personnages", nom_personnage)
        else:
            #donne un artefact, si il n'a pas déja été donné
            ARTEFACTETDESCRIPTION = {"Saumel" : ["Pièce Fondue",  # ajout
                                                ("Une pièce de monnaie représentant la vengeance, maudissant les ennemis de son porteur."
                                                "\nLes coups critiques maudissent les ennemis, les ennemis maudits perdent 2 pm par tour.")],
                                    "Elma" : ["Tiare de Suie",  # ajout
                                                ("Un bibelot vénéré par un clan de voleur, porté par sa dernière cheffe pendant un régicide."
                                                "\nAccorde la bénédiction du feu sacré a son porteur pour chaque coups esquivés.")],
                                    "Auguste" : ["Chaine de Main",  # ajout
                                                ("Un bijou magique qui se porte au niveau des mains, et qui transforme une prothèse en véritable main connectée au système nerveux."
                                                "\nLes sorts critiques font deux fois plus de dégâts.")],
                                    "Saria" : ["Larme d'Yggdrasil",  # ajout
                                                ("Une perle de sève venant d'un arbre magestueux qui communique une grande tristesse a ceux qui dorment sous ses branches."
                                                "\nEn combat, les feuilles et fruits Jindagee et Aatma durent 2 fois plus longtemps")],
                                    "Vesperum" : ["Collier de Nephilim",  # ajout
                                                ("Un artefact témoignant de l'amour entre un paysant devenu démon et une papesse devenue ange, laissée a leur enfant avant de mourir."
                                                "\nRecouvrir des pm permet de recouvrir des pv, avec un ratio 2/1 (2pm regagnés ==) 1 pv regagné en plus)")],
                                    "Lucien" : ["Cape Victorieuse",  # ajout
                                                ("Une cape macabre cousue avec les fils d'un drapeau pirate et les ailes du Ministre du Mana."
                                                "\nChaque ennemi tué augmente de 0.5% les dégâts totaux.")],
                                    "Élémia" : ["Schmilblick",  # ajout  
                                                ("Un bidule bizarre crée par une inventrice farfelue."
                                                "\nA l'entrée d'un nouvel étage, toutes ses salles sont directement dessinées sur la carte (annule les effets du Monocle de Vérité)")],
                                    "Samantha" : ["Contrat de Travail",  # ajout
                                                ("Un bout de papier promettant la puissance aux économes afin qu'ils ne se fassent plus martyriser par le système."
                                                "\nVous gagnez 2% de dégâts totaux supplementaire par paquets de 50 pièces possédé.")],
                                    "Emy" : ["Dessin Nostalgique",  # ajout
                                                ("Un dessin au charbon d'un vieil homme en plein sommeil, adossé contre une louve."
                                                "\nPasser son tour donne l'altération d'état *Concentration* pendant 2 tours, qui réduit le nombre de pm nécéssaire pour chaque sorts.")],
                                    "Terah" : ["Vide Interieur",  # ajout
                                                ("Un sentiment de malaise, comme si vous étiez passé a coté de quelque chose, et que votre aventure avec ce personnage n'a pas livré tout ses secrets."
                                                "\nEnlève le stigma négatif [Incontrollable], ainsi que 15 points de mana maximum.")],
                                    "Peralta" : ["Badge Terni",  # ajout
                                                ("Un morceau de métal terni par le temps, les éléments, et les tentations, mais qui reste solide et droit."
                                                "\nRéduit les prix du marchand de 30%, lorsque il ne reste plus d'ennemis a affronter dans l'arène de l'étage en cours (boss compris).")],
                                    "Redde" : ["Perle de Pluie",  # ajout
                                                ("Un crystal serein, symbole de la libération des chaines de l'esprit."
                                                "\nChance de faire un sort critique : +33%.")],
                                    "Valfreya" : ["Syra",  # ajout
                                                ("Une verre divin de lait fermenté apprécié par un certain dieu nordique jeté hors de son throne par une ""valkyrie inutile au combat""."
                                                "\nLes nouvelles techniques apprises donnent 10pm max supplémentaires."
                                                "\nLes nouveaux sorts appris donnent 10pv max supplémentaires.")],
                                    "Bob" : ["Pin's Extincteur",  # ajout
                                                ("Un joli pin's a accrocher sur un vêtement, représentant un extincteur rouge."
                                                "\nLorsque l'effet Brulûre se termine, redonne 10pv et 10pm.")],
                                    "Voyageur" : ["Bandeau Teinté",  # ajout
                                                ("Une relique de Thémis, l'esprit de la Justice, marqué d'un curieux éclat doré."
                                                "\nEn combat, vous gagnez 1 pièce a chaque tours.")]}

            # creer une liste avec tout les artefacts de personnage deja debloque
            donnees_de_s0ve = Observation.GetPermanentThingsFromS0ve()
            liste_artefact_deja_debloque = ast.literal_eval(donnees_de_s0ve["Artefact Debloques"])

            # sortir les informations de l'artefact a donner depuis le dictionnaire au dessus
            informations_artefact_a_donner = ARTEFACTETDESCRIPTION[Player.nom_du_personnage]
            nom_de_artefact_a_donner = informations_artefact_a_donner[0]
            description_de_artefact_a_donner = informations_artefact_a_donner[1]

            if not (nom_de_artefact_a_donner in liste_artefact_deja_debloque):
                print(f"Vous avez terminé l'histoire de {Player.nom_du_personnage} pour la première fois !")
                PlaySound("questdone")
                Affichage.EntreePourContinuer()
                print("Un nouvel artefact est désormais disponible dans le livre de la cigogne bleue !")
                liste_artefact_deja_debloque.append(nom_de_artefact_a_donner)
                donnees_de_s0ve["Artefact Debloques"] = liste_artefact_deja_debloque
                Observation.SetPermanentThingsToS0ve(donnees_de_s0ve)
                Affichage.EntreePourContinuer()
                print(f"[{nom_de_artefact_a_donner}]")
                print(f"[{description_de_artefact_a_donner}]")
                Affichage.EntreePourContinuer()

        
        



def ClearConsole():
    # Vérifier le système d'exploitation pour déterminer la commande appropriée
    os.system("cls" if os.name == "nt" else "clear")


def GetMenuPrincipalChoice():
    print("                                    \            / ")
    print("                                     \          / ")
    print("                                      \        / ")
    print("                                       \      / ")
    print("                      ||||||||||||||    \    /  ")
    print("                    ||||||||||||         \  /  ")
    print("                 ||||||||                 \/ ")
    print(
        "_______________||||||||___________________/\_______________________________________________ "
    )
    print("               ||||||||                   \/ ")
    print("               ||||||||                   /\ ")
    print("               ||||||||                  /  \  ____    ____ ")
    print(
        "               ||||||||     ||||    ||  / || \||      ||     ||  ||    ||  || "
    )
    print(
        "     _,---,_   ||||||||   |||  |||  || /  ||  \||||   |===   ||  ||  ||  ||  || "
    )
    print(
        "   /'_______`\ |||||||||    ||||    \|||  ||  ____||  ||___   ||||   ||  ||  || "
    )
    print(
        '  (/\'       `\|__||||||||||--------------------""""""""""""""""""""""---------------------, '
    )
    print(
        "  *\#########||__________                                                               /' "
    )
    print(
        '  * ^^^^^^^^^||          """"""""""""------------____________                         /\' '
    )
    print(
        '              \                   /                \          """"""""""""-----_____/\' '
    )
    print("                                 /                  \ ")
    print("                                /                    \ ")
    print("                               /     1 - Nouvelle Partie")
    print(f"                              /      2 - Continuer : [{Player.nom_de_letage}] ")
    print("                             /       3 - Tutoriel       \ ")
    print("                            /                            \ ")
    print("                           /                              \ ")
    return int(
        input(
            "Choisissez une action avec le numéro correspondant, et appuyez sur Entrée pour continuer : "
        )
    )
mixer.init()
mixer.set_num_channels(16)
chemin_musique = os.path.dirname(os.path.realpath(__file__))
chemin_musique += f"\\nothing.mp3"
intialisation_musique = mixer.Sound(chemin_musique)
CHANNELMUSIQUEDEBASE = intialisation_musique.play()
CHANNELSFX = intialisation_musique.play()


def PlaySound(musique):
    PlayMusic(musique, "sound")

def PlayMusic(musique, type_of_music="music"):
    global CHANNELMUSIQUEDEBASE
    dir_path = Player.chemin_musique
    musique = dir_path + f"\\{musique}.mp3"
    CHANNELMUSIQUEDEBASE.set_volume(0)
    time.sleep(0.01)
    CHANNELMUSIQUEDEBASE.stop()
    lancement_de_musique = mixer.Sound(musique)
    if type_of_music == "music":
        CHANNELMUSIQUEDEBASE = lancement_de_musique.play(loops=-1)
    else:
        CHANNELMUSIQUEDEBASE = lancement_de_musique.play()

def PlaySFX(musique, type_of_sfx="noloop"):
    global CHANNELSFX
    dir_path = Player.chemin_musique
    musique = dir_path + f"\\{musique}.mp3"
    CHANNELSFX.set_volume(0)
    time.sleep(0.01)
    CHANNELSFX.stop()
    lancement_de_musique = mixer.Sound(musique)
    if type_of_sfx == "noloop":
        CHANNELSFX = lancement_de_musique.play()
    else:
        CHANNELSFX = lancement_de_musique.play(loops=-1)

def PermanentPlaySFX(musique):
    PlaySFX(musique,"loop")




def PlayWavSound(musique):
    dir_path = Player.chemin_musique
    musique = dir_path + f"\\sfx\\{musique}.wav"
    mixer.music.load(musique)
    mixer.music.play()


def ChoseCharacter():
    ClearConsole()
    # recommence jusqu'a ce que le choix soit fait
    while True:
        # Choix du personnage
        while True:
            try:
                choix = GetChoixPersonnageChoice()
                ClearConsole()
                if choix == 1:
                    # retour
                    return False
                elif choix in range(2, (len(LISTEDEPERSONNAGE) + 2)):
                    # personnage a afficher
                    if DICTIONNAIREDEPERSONNAGEAAFFICHER[choix] == "Neil" and (not Sove.ModifieTagsDansSove("Checke","Neil")):
                        pass
                    else:
                        break
            except ValueError:
                ClearConsole()
        # Initilaisation des informations du personage selectionné
        nom_du_personnage = DICTIONNAIREDEPERSONNAGEAAFFICHER[choix]
        caracteristiques_du_personnage = LISTEDEPERSONNAGE[nom_du_personnage]
        # Affichage du personnage et validation
        while True:
            try:
                validation_du_personnage = GetPersonnageValideChoice(
                    caracteristiques_du_personnage
                )
                ClearConsole()
                if validation_du_personnage == 2:
                    # personnage selectionné
                    Player.UseCharacterForInitCaracteristics(
                        caracteristiques_du_personnage
                    )
                    return True
                elif validation_du_personnage == 1:
                    # retour
                    break
            except ValueError:
                ClearConsole()


def GetPersonnageValideChoice(caracteristiques):
    # 0nom 1description 2stigma+ 3stigma- 4stigma* 5techniques
    # 6sorts 7items 8talents 9vie 10mana 11force
    # 12inteligence 13defence 14tauxcoupcrit
    # 15degatcoupcrit 16tauxsortcrit 17degatsortcrit
    # 18tauxesquive 19gold
    print(
        f"     -= {caracteristiques[0]} =-"
        "\n"
        f"\nHistoire : {caracteristiques[1]}"
        f"\nStigma positif : {caracteristiques[2]}"
        f"\nStigma négatif: {caracteristiques[3]}"
        f"\nStigma bonus : {caracteristiques[4]}"
        f"\nTechniques : {caracteristiques[5]}"
        f"\nSorts : {caracteristiques[6]}"
        f"\nItems : {caracteristiques[7]}"
        f"\nTalents : {caracteristiques[8]}"
        f"\nVie : {caracteristiques[9]} Mana : {caracteristiques[10]}"
        f"\nForce : {caracteristiques[11]} Intelligence : {caracteristiques[12]} Défence : {caracteristiques[13]}"
        f"\nChance bonus de coup critique : {caracteristiques[14]} Dégats bonus de coup critique : {caracteristiques[15]}"
        f"\nChance bonus de sort critique : {caracteristiques[16]} Dégats bonus de sort critique : {caracteristiques[17]}"
        f"\nChance d'esquive : {caracteristiques[18]}"
        f"\nNombre de Gold : {caracteristiques[19]}"
        f"\nArtefacts : {caracteristiques[20]}"
        "\n \n1 - Retour"
        "\n2 - Choisir ce personnage"
        "\n"
    )
    return int(input("\nChoisissez une action avec le nombre correspondant : "))


def GetRandomItemFromList(liste):
    number_of_item = len(liste)
    numero_aleatoire = random.randint(0, (number_of_item - 1))
    return liste[numero_aleatoire]


def open_image(chemin_vers_limage):
    # Créer une fenêtre Tkinter
    root = tk.Tk()

    # Créer une image Tkinter à partir du fichier
    image = PhotoImage(file=chemin_vers_limage)

    # Créer un canevas pour afficher l'image
    canvas = tk.Canvas(root, width=image.width(), height=image.height())
    canvas.pack()
    canvas.create_image(0, 0, anchor=tk.NW, image=image)

    # Boucle principale Tkinter
    root.mainloop()


def GetChoiceRecup():
    print("     -=[ Outil de Récupération de Données ]=-")
    print(
        "\nInserez le numéro de l'adresse de l'information souhaitée,                                                             8"
        "\net laissez notre programme récuperer ces données pour vous !                                                           6"
    )
    print(
        "Plus besoin de paniquer lorsque l'on supprime d'anciennes données sans le vouloir !                                    2"
    )
    print(
        "Vos données n'auront plus de secret pour vous !                                                                        4"
    )
    return int(input("\nNuméro de l'adresse ipv4 : "))


def ShowRecup():
    # images doivent etre en png
    while True:
        try:
            choix = GetChoiceRecup()
            ClearConsole()
            break
        except ValueError:
            ClearConsole()
    Affichage.AfficheLongChargement()
    if choix in [
        362951847,
        14,
        100110,
        8624,
        1512111113111013,
        1342,
        1233,
        456852,
        3236353,
        313,
        22,
        935284761,
        5321139741,
        7415321139,
        9353918170,
    ]:
        if choix == 8624:
            nom_de_limage = "python_properties_vue"  # table des matieres -

        elif choix == 456852:
            nom_de_limage = "python_properties_main_Thread"  # image observation e7 -

        elif choix == 362951847:
            nom_de_limage = "python_properties_Anox_init"  # page 1 (e1) -
        elif choix == 100110:
            nom_de_limage = "python_properties_controleur"  # page 2 (e3) a faire #
        elif choix == 313:
            nom_de_limage = "python_properties_Thread_init"  # page 3 (arret roi, par matiere) a faire lore #
        elif choix == 19:
            nom_de_limage = "python_properties_controleur_Thread"  # page 4 (observatorium, par matiere) a faire secrets des observations #
        elif choix == 935284761:
            nom_de_limage = "python_properties_modele_Thread"  # page 5 (par tout talent combo talents) -
        elif choix == 9353918170:
            PlayMusic("abyss")
            print("Ce n'est pas encore l'heure.")
            Affichage.EntreePourContinuer()
            print("Contente toi de ceci pour l'instant.")
            Affichage.EntreePourContinuer()
            print("Menu Coliseum(OBSERVATORIUM) = Musiques")
            print("Menu Coliseum(OBSERVATORIUM(KEY)) = Plus de Musiques")
            Affichage.EntreePourContinuer()
            nom_de_limage = "python_properties_vue_Thread"  # page 13 (combo toutes pages donne seulement etage 0, etage 0 donne invitation.) a faire #
        elif choix == 14:
            nom_de_limage = "python_properties_modele"  # talent feu (e2) -
        elif choix == 1512111113111013:
            nom_de_limage = "python_properties_modele_Anox"  # talent glace (e4) -
        elif choix == 1233:
            nom_de_limage = "python_properties_main"  # talent foudre (e7) -
        elif choix == 3236353:
            nom_de_limage = (
                "python_properties_main_Anox"  # talent terre (e5) quete ult -
            )
        elif choix == 1342:
            nom_de_limage = "python_properties_controleur_Anox"  # talent sang (e6) -
        elif choix in [5321139741, 7415321139]:
            nom_de_limage = "python_properties_vue_Anox"  # talent physique (e8) livre + notes de table des matières -   faire page 13 ==) pas maintenant

        dir_path = os.path.dirname(os.path.realpath(__file__))
        chemin_de_limage = dir_path + "\\__py.property__\\"
        open_image(f"{chemin_de_limage}{nom_de_limage}.xldr")
    else:
        print("                           Donnée Récupérée :")
        for _ in range (0, 21):
            print(
                "zq4f15sr6wz3f5qe1fs6533e5.2f6e53s1f65ze1qe1fz6f12q6ef531ze653f16r84g61esf5"
            )
    Affichage.EntreePourContinuer()


def GetChoixPersonnageChoice():
    print("     -={ Personnages }=-")
    print("\n1 - Retour")
    for numero in DICTIONNAIREDEPERSONNAGEAAFFICHER:
        if DICTIONNAIREDEPERSONNAGEAAFFICHER[numero] == "Neil" and (not Sove.ModifieTagsDansSove("Checke","Neil")):
            pass
        else:
            print(f"{numero} - {DICTIONNAIREDEPERSONNAGEAAFFICHER[numero]}")
    return int(input("\nChoisissez un personnage avec le nombre correspondant : "))


def InitialiseDictionnaireDePersonnageAAfficher():
    numero_du_personnage = 2
    for nom_personnage in LISTEDEPERSONNAGE:
        DICTIONNAIREDEPERSONNAGEAAFFICHER[numero_du_personnage] = nom_personnage
        numero_du_personnage += 1

def ShowDebugMenu():
    PlayMusic("debug")

    while True:
        while True:
            try:
                print("Behind the screen : Debug Menu\n")
                print("0 - Quitter\n")
                print("1 - Réinitialiser les valeurs\n")
                for i, label in enumerate(DEBUG_OPTIONS, start=2):
                    attr = DEBUG_OPTIONS[label]
                    val = getattr(Player, attr)
                    print(f"{i} - Configurer [{label}] (Actuellement : {val}%)")
                print(f"\n{i+1} - Configurer les Caractéristiques du Joueur")
                choix = int(input("\nChoisissez une action avec son nombre correspondant : "))
                ClearConsole()
                if 0 <= choix <= (len(DEBUG_OPTIONS) + 2):
                    break
            except ValueError:
                ClearConsole()

        if choix == 0:
            PlayMusicDeLetage()
            break

        elif choix == 1:
            # réinitialisation a 0
            for attribute_name in DEBUG_OPTIONS:
                setattr(Player, DEBUG_OPTIONS[attribute_name], 0)

            # sauf pour certaines choses
            setattr(Player, "debug_bonus_equilibrage_technique", 35)
            setattr(Player, "debug_bonus_equilibrage_sort", 35)

        elif choix == (len(DEBUG_OPTIONS) + 2):
            attributs_modifiables = [
                ("points_de_vie", "Points de vie"),
                ("points_de_vie_max", "Points de vie max"),
                ("points_de_mana", "Points de mana"),
                ("points_de_mana_max", "Points de mana max"),
                ("points_dendurance", "Points d'endurance"),
                ("points_de_force", "Points de force"),
                ("points_dintelligence", "Points d'intelligence"),
                ("points_de_defence", "Points de défense"),
                ("nombre_de_gold", "Nombre de gold"),
                ("nombre_de_red_coin", "Nombre de redcoin"),
                ("nombre_de_monstres_tues", "Nombre d'âmes récupérées")
            ]

            while True:
                while True:
                    try:
                        print("Behind the screen : Character Values\n")
                        print("0 - Retourner au menu principal\n")
                        for i, (attr, nom_affichage) in enumerate(attributs_modifiables, start=1):
                            valeur_actuelle = getattr(Player, attr)
                            print(f"{i} - Configurer [{nom_affichage}] (Actuellement : {valeur_actuelle})")
                        choix = int(input("\nChoisissez une action avec son nombre correspondant : "))
                        ClearConsole()
                        if choix in range(0, len(attributs_modifiables) + 1):
                            break
                    except ValueError:
                        ClearConsole()

                if choix == 0:
                    break

                attr_name, nom_affichage = attributs_modifiables[choix - 1]

                while True:
                    try:
                        valeur_actuelle = getattr(Player, attr_name)
                        print(f"Behind the screen : Modifier {nom_affichage} (Actuellement : {valeur_actuelle})\n")
                        nouvelle_valeur = int(input("Entrez une nouvelle valeur (négative ou positive) : "))
                        setattr(Player, attr_name, nouvelle_valeur)
                        ClearConsole()
                        break
                    except ValueError:
                        ClearConsole()


            


        else:
            # Récupération dynamique de la variable choisie
            label = list(DEBUG_OPTIONS.keys())[choix - 2]
            attr = DEBUG_OPTIONS[label]

            while True:
                try:
                    val_actuel = getattr(Player, attr)
                    print(f"Configurer [{label}] (Actuellement : {val_actuel}%)\n\n")
                    nouveau_val = int(input("Nouveau pourcentage (positif ou négatif) : "))
                    setattr(Player, attr, nouveau_val)
                    ClearConsole()
                    break
                except ValueError:
                    ClearConsole()







def ShowTutorial():
    PlayMusic("tutorial")
    print("                    { Tutoriel }")
    print("             { Partie 1 : Introduction }")
    print(
        "\nBienvenue dans le Coliseum ! Prononcé Co-li-zé-oum, ca veut dire Colisée en Latin."
    )
    print(
        "Vous êtes sans doute excités a l'idée de vous plonger dans les méandres de cette batisse légendaire !"
    )
    print("Mais avant toute chose, quelques bases à connaitre.")
    print("\n\n")
    Affichage.EntreePourContinuer()
    print("                    { Tutoriel }")
    print("              { Partie 2 : Histoire }")
    print(
        "\nLe coliseum est une batisse ancienne, commandée par un roi fou a son magicien pour enfermer"
    )
    print(
        "les gens de son peuple qu'il croyait dangereux. Au fur et a mesure des années, de plus en plus"
    )
    print(
        "d'innoncents se sont retrouvé dans les arènes sordides, a combattre des créations monstrueuses de chair et de sang."
    )
    print(
        "Jusqu'à un beau matin de printemps ou le Roi, dans un généreux élan de folie et de paranoïa, décida de se jeter dans"
    )
    print(
        "sa création, accompagnée de toute sa cour."
        "\nDes années plus tard, la batisse sera déclarée dangereuse par les gouvernements,"
    )
    print(
        "et plus personne ne se frottera aux étages malicieux du Coliseum, qui changera alors de nom et de structure..."
    )
    print("...mais c'est une histoire pour plus tard :)")
    print(
        "En attendant, plusieurs personnages auront bravés les interdits et se seront attaqués au tombeau du Roi fou, pour diverses raisons,"
        "\net c'est eux que vous allez pouvoir controller !"
    )
    print("\n\n")
    Affichage.EntreePourContinuer()
    print("                    { Tutoriel }")
    print("             { Partie 3 : Bien Commencer }")
    print(
        "\nLe coliseum se compose de plusieurs étages. Pour naviguer dans les étages inferieurs, vous devez"
    )
    print(
        "d'abord battre le boss de l'étage en cours. Seulement, c'est le plus souvent un individu sacrément puissant !"
    )
    print("Comment faire ? Eh bien... devenir plus fort !")
    print(
        "Chaques monstres tués vous rapoorte une amélioration de certaines de vos caractéristiques, et un peu de golds."
    )
    print(
        "Vous pouvez ensuite échanger vos golds contre des objets chez le marchand de l'étage."
    )
    print(
        "Et une fois que vous serez dotés de meilleurs objets, améliorés avec de meilleurs caractéristiques, et"
    )
    print("équ00000ipés de meilleqdznqdurs tttAAAaaaalEnnnttsss...z,lqnd.......")
    print(
        "Vous verrez que le boss de l'étage ne sera plus un mur, mais un simple obstacle sur votre chemin ! "
    )
    print(
        "Ainsi, il faut tuer des monstres, acheter des objets, tuer le boss, descendre, et répéter l'opération jusqu'au"
    )
    print("dernier étage : le HdUiIxTiIèEmMeE !")
    print("\n\n")
    Affichage.EntreePourContinuer()
    print("                    { Tutoriel }")
    print("         { Partie 4a : Les menus : Navigation }")
    print(
        "\nVous pouvez vous diriger dans les menus a l'aide des nombres, qui sont affectés a chaques actions."
    )
    print(
        "Par exemple, dans le menu principal, vous pouvez commencer une nouvelle aventure avec 1,"
    )
    print(
        "et continuer une partie déja sauvegardée avec 2. Vous pouvez aussi lancer le tutoriel avec 3"
    )
    print(
        "(ce que vous avez faitpl ou ezdnore landzd leefnzos pefisp avevevevc WWWWXXXWWW."
    )
    print("\nEnfin bref, chaque actions sont affectées a un numéro.")
    print(
        "Et n'ayez pas peur ! Si vous rentrez un mauvais numéro, une chaine de caractère ou même rien du tout,"
    )
    print(
        "le programme continuera normalement sans planter, et se contentera de vous redemander votre choix !"
    )
    print("\n\n")
    Affichage.EntreePourContinuer()
    print("                    { Tutoriel }")
    print("          { Partie 4b : Les menus: Utilité }")
    print(
        "\nGrace aux menus, vous pouvez naviguer dans vos options possibles pour chaques situations."
    )
    print("Le menu de l'étage actuel du Coliseum permet ainsi de:")
    print(
        "- Combattre un monstre (attention, le nombre de monstre par étage est limité ! ne fuyez pas tout vos commbats !)"
        "\n- Combattre un boss / Descendre a l'étage inferieur (si le boss est battu)"
        "\n- Acheter des items chez le marchand "
        "\n- etc"
    )
    print(
        "Un même nombre (genre 1) change d'action effectuée (Choisir un personnage, Affronter un monstre) selon le contexte (Menu Principal, Menu d'Etage)."
    )
    print("\n\n")
    Affichage.EntreePourContinuer()
    print("                    { Tutoriel }")
    print("            { Partie 5 : Les Combats }")
    print(
        "\nLe Coliseum s'explore en trois temps : "
        "\nLe temps de repos, ou menu d'étage, qui permet de choisir ses actions"
        "\nLe temps d'observation, afin d'observer toute les salles de l'étage pour trouver objets, artefacts, et salles particulières."
        "\nLe temps de combat, pour devenir plus fort ou battre le boss."
    )
    print("\nEn temps de combat, tout se déroule au tour par tour.")
    print("En premier lieu s'effectuent les actions de début de combat.")
    print("Ensuite, vous choisissez un menu parmis ceux disponibles.")
    print("Juste après, vous choisissez une action dans le menu affiché.")
    print("Votre action est effectuée, puis celle de l'ennemi a la suite.")
    print("Les différents effets d'altérations d'états s'appliquent")
    print("Et on recommence jusqu'a ce qu'un des deux participant meure ou fuie.")
    print(
        "\nGardez a l'esprit que vos points de vie (PV) représentent la vitalité qu'il vous reste,"
        "\net que si ils tombent a zéro, c'est terminé.\nCepandant, les points de mana (PM) servent juste"
        "a lancer des sorts, et peuvent descendre a zéro sans réelles conséquences."
        "\nMême chose pour les points d'endurance (PE) qui servent a utiliser des techniques et remontent naturellement."
    )
    print("\n\n")
    Affichage.EntreePourContinuer()
    print("                    { Tutoriel }")
    print("         { Partie 6a : Foire aux Questions }")
    print("\n*Dans le menu de choix des personnage, il y a des stigmas. C'est quoi ?*")
    print(
        " - Ce sont des passifs intrinsèques aux personnages, liés a leur situation ou leur experience,"
        " qui s'activent avant, pendant, ou apres un combat."
    )
    print(
        "\n*J'ai vu qu'on pouvait utiliser des redcoins dans le menu d'étage. C'est quoi ? Ca fait quoi ?*"
    )
    print(
        "˙ǝɹı̣ɹɔ́ǝp ǝp zǝuǝʌ snoʌ ǝnb nuǝɯ ǝן suɐp ́ǝʇou ʇsǝ uı̣oɔpǝꓤ uǝ ʇnoɔ uos ǝnb ı̣suı̣ɐ sʇuǝןɐʇ ǝnbɐɥɔ ǝp ǝpoɔ ǝ"
        "ן ʇƎ ˙ǝɹʇnɐ ʇǝ 'sǝpnʇı̣ʇdɐ ' sǝnbɐʇʇɐ sǝןןǝʌnou ǝp ɹǝnboןq́ǝp ʇuǝʌnǝd sʇuǝןɐʇ sǝƆ ˙npı̣ʌı̣puı̣'ן ǝp sdɹoɔ ǝן suɐp"
        " 'sʇuǝןɐʇ sǝ́ǝןǝddɐ 'sǝןɐı̣ɔ́ǝds sǝɔuǝʇ́ǝdɯoɔ sǝp ǝɹʇı̣ɐu ʇı̣ɐɟ ')sǝɹɟɟı̣ɥɔ ǝp ǝʇı̣ns ǝun ɹɐd ́ǝnbı̣puı̣ 'ןɐɹ́ǝúǝƃ uǝ("
        " sı̣ɔ́ǝɹd ǝɹpɹo un suɐp ɐuɐɯ np uoı̣ʇɐןnɔɹı̣ɔ ɐן ɐ sǝ́ǝןdnoɔ ' ʇǝ sdɹoɔ np sǝuoz sǝp ɹǝןnɯı̣ʇs ǝp ʇǝɯɹǝd ǝpı̣nbı̣ן ǝƆ"
        " ˙uı̣ǝs uos uǝ nuǝʇuoɔ ǝɹoןoɔuı̣ ǝpı̣nbı̣ן np ʇuǝı̣ʌ ʇǝ 'ǝɹı̣ɐןı̣ɯı̣s ʇsǝ suı̣oƆpǝꓤ un'p ɹnǝןɐʌ ɐꓶ ˙sǝʇı̣ɐɟ ʇuǝı̣ɐʇ́ǝ sǝןןǝ"
        " sǝןןǝnbsǝן suɐp nɐı̣ɹ́ǝʇɐɯ np ́ǝʇı̣soı̣ɔ́ǝɹd ɐן ǝp ʇı̣ɐuǝʌ ǝnbı̣ʇuɐ ǝɯoꓤ ɐן ǝp sǝɔ̀ǝı̣d sǝp ɹnǝןɐʌ ɐꓶ"
    )
    print("\n\n")
    Affichage.EntreePourContinuer()
    print("                    { Tutoriel }")
    print("        { Partie 6b : Foire aux Questions }")
    print("\n*Ya un type bizarre qui execute les rochemikazes. C'est qui ?*")
    print(" - C'est Alfred.")
    print(
        "\n*Ya des types de sorts et de techniques différentes qui inflige des effets élémentaires différents, non ?*"
    )
    print(
        " - C'est exact. Par exemple, la glace peut geler, ce qui applique l'effet gelure sur la cible, qui prendra alors 50% de dégâts supplémentaire."
    )
    print(
        "\n*...et le reste ? Les autres altérations d'états ? Et les effets des talents ? Et les effets des stigmas ?\nVous n'avez rien expliqué !*"
    )
    print(
        " - C'est aussi exact ! Le fun du Coliseum viens du fait que vous êtes lachés dans un environnement étranger, sans guide,"
    )
    print(
        "et avec le moins d'expliquations possibles !"
        "\nAlors prenez un papier, un crayon, et notez au fur et a mesure les informations que vous découvrirez !"
    )
    print("\n\n")
    Affichage.EntreePourContinuer()
    print("                    { Tutoriel }")
    print("            { Partie 7 : Bonne chance ! }")
    print(
        "\nMaintenant, vous savez tout ce qu'il y a a savoir pour débuter une partie."
    )
    print(
        "Alors qu'attendez vous ? Ne soyez pas timide ! Il y a une montagne de chose a faire et a découvrir !"
    )
    print("Lancez donc une partie sans attendre, et dans l'échec apprenez a réussir !")
    print("\n\n")
    Affichage.EntreePourContinuer()
    PlayMusic("start")


def MenuDeDemarrage(Player):
    ClearConsole()
    InitialiseDictionnaireDePersonnageAAfficher()
    in_menu_principal = True
    PlayMusic("start")
    while in_menu_principal:
        while True:
            try:
                # affiche le menu
                choix = GetMenuPrincipalChoice()
                ClearConsole()
                if choix in [1, 2, 3, 24, 1521951822120151892113]:
                    break
            except ValueError:
                ClearConsole()

        # choix du personnage
        if choix == 1:
            personnage_a_ete_choisi = ChoseCharacter()
            if personnage_a_ete_choisi:
                try:
                    # sauvegarde et charge le personnage choisi
                    if Player.mode_de_jeu == "Véritable Descente":
                        Player.nom_de_letage = "Sanctuaire du Sacrifice"
                        Player.numero_de_letage = 0
                        Player.nombre_dennemis_a_letage = 0
                    else:
                        Player.nom_de_letage = "Ruines Abandonnées"
                    Save.FromPlayerToDict()
                    Save.FromDictToSaveFile("\\save.txt")
                    Save.FromSaveFileToDict()
                    Save.FromDictToPlayer()
                    Affichage.AffichageDescriptionEtage()
                    FloorMaker.SetupFloorLayout()
                    # personnage choisi
                    in_menu_principal = False
                    if  Sove.ModifieTagsDansSove("Checke","Livraison Terminée"):
                        Sove.ModifieTagsDansSove("Enleve","Livraison Terminée")
                        Sove.ModifieTagsDansSove("Ajout","Livraison En Attente")
                except Exception as error:
                    WriteErrorInErrorLog(error)

        # continuer une partie sauvegardee
        elif choix == 2:
            personnage_a_ete_choisi = Save.LoadTheGame()
            if personnage_a_ete_choisi:
                # sauvegarde chargée dans la classe Joueur
                in_menu_principal = False
                Affichage.AfficheChargement()
                if Player.mode_de_jeu == "Ascension" and (Player.numero_de_letage == 0):
                    Player.mode_de_jeu = "Descente"  

        # tutorial
        elif choix == 3:
            ShowTutorial()

        # Observatoire de musique
        elif choix == 1521951822120151892113:
            ShowObservatorium()

        # Recupérateur de secrets
        elif choix == 24:
            PlayMusic("gravestone")
            ShowRecup() 
            PlayMusic("start")


def ShowObservatorium():
    PlayMusic("observatorium")
    observatorium_complet = False
    while True:
        while True:
            try:
                # affiche le menu
                choix = ShowMenuObservatorium(observatorium_complet)
                ClearConsole()
                if observatorium_complet:
                    if choix in range(1, (len(LISTEDEMUSIQUE)) + 2):
                        break
                else:
                    if choix in range(1, 46) or choix == 11525:
                        break
            except ValueError:
                ClearConsole()
        if choix == 1:
            PlayMusic("start")
            break
        elif choix == 11525 and not observatorium_complet:
            StopAllMusic()
            observatorium_complet = True
            print(
                "Les confins de l'observatorium s'ouvrent a vous, voyageurs sur une mer d'encre a la recherche de la véritée."
            )
            Affichage.EntreePourContinuer()
        else:
            caracteristique_musique = LISTECARACTERISTIQUEMUSIQUE[choix - 2]
            PlayMusic(f"{caracteristique_musique[0]}")
            print(caracteristique_musique[1])
            print("\n\n\n")
            Affichage.EntreePourContinuer()
            ClearConsole()
        if observatorium_complet:
            PlayMusic("darkness")
        else:
            PlayMusic("observatorium")


def ShowMenuObservatorium(observatorium_complet):
    numero_affichage = 2
    print("  ~~{ Observatorium }~~")
    print("\n1 - Retour")
    for nom_musique in LISTEDEMUSIQUE:
        print(f"{numero_affichage} - {nom_musique}")
        numero_affichage += 1
        if numero_affichage == 46 and not observatorium_complet:
            break
    return int(input("\nChoisissez la musique avec les nombres : "))


def GetChoiceMenuColiseum():
    if Player.mode_de_jeu == "Ascension":
        print(
            f"             -=[ EtAAAAAge {Player.numero_de_letage} ]=-"
            "\n\n          ~~{ CommmmmBAbt }~~"
            f"\n      MPDZ - AfERRORr un monsRISEABOVE restants)"
            f"\n      2 - ASCENSION"
            "\n\n          ~~{ Int/////n }~~"
            "\n      96843540432agir avec le Marchand"
            "\n      INFAMIEINTOLERABLELAISSEDERRIERETESAILESNOIRECHARBON"
            f"\n\n          ~~{{ {Player.nom_du_personnage} }}~~"
            "\n      AAA - Ficopppzdok"
            "\n      dza - Ut1l1se           r1un1 zapioqjdnn"
            "\n      d - Sauvzdnlqjndtie"
            "\n\n"
        )
    elif Player.nom_de_letage == "Dédale Frontière" :
        print(
            f"             -=[ Etage {Player.numero_de_letage} ]=-"
            "\n\n          ~~{ Combat }~~"
            f"\n      1 - Affronter un monstre...?"
            f"\n      2 - {Player.commentaire_boss}"
            "\n\n          ~~{ Interraction }~~"
            "\n      3 - Interragir avec le Marchand"
            "\n      4 - Explorer l'Étage"
            f"\n\n          ~~{{ {Player.nom_du_personnage} }}~~"
            "\n      5 - Fiche de Personnage"
            "\n      6 - Utiliser un Red Coin"
            "\n      7 - Sauvegarder la Partie"
            "\n\n"
        )
    elif Player.numero_de_letage == -1:
        print(
            f"         -=[ Champs du Crépuscule ]=-"
            "\n\n          ~~{ Interraction }~~"
            "\n          1 - Explorer"
            "\n          2 - Sauvegarder la Partie"
            "\n          3 - Interpeller un Passant"
            "\n\n"
        )
    else :
        print(
            f"             -=[ Etage {Player.numero_de_letage} ]=-"
            "\n\n          ~~{ Combat }~~"
            f"\n      1 - Affronter un monstre ({Player.nombre_dennemis_a_letage} restants)"
            f"\n      2 - {Player.commentaire_boss}"
            "\n\n          ~~{ Interraction }~~"
            "\n      3 - Interragir avec le Marchand"
            "\n      4 - Explorer l'Étage"
            f"\n\n          ~~{{ {Player.nom_du_personnage} }}~~"
            "\n      5 - Fiche de Personnage"
            "\n      6 - Utiliser un Red Coin"
            "\n      7 - Sauvegarder la Partie"
            "\n\n"
        )
    return int(input("Choisissez une action avec les nombres : "))


def RemiseAZeroDesVariablesPourProchainEtage():
    Player.affronte_un_boss = False
    Player.boss_battu = False
    Player.redcoin_bought = False
    Player.red_coin_recu_par_extermination = False
    Player.nombre_dennemis_a_letage = 10 + Player.numero_de_letage * 2
    Player.flammes_rouge = 5
    Player.flammes_bleue = 3
    Player.flammes_verte = 2
    Player.flammes_noire = 1
    Player.poissons = 5
    Player.commentaire_boss = "Affronter le Boss"
    Player.quete = "None"
    Player.possede_la_cle = False
    if FloorMaker.carte_ouverte:
        clear()
    FloorMaker.__init__()
    if Player.numero_de_letage == 0:
        Player.nombre_dennemis_a_letage = 0
        Player.possede_la_cle = True
    elif Player.numero_de_letage in [10, 11]:
        Player.nombre_dennemis_a_letage = 0
    


def DoFight():
    # combat contre ennemi
    if Player.nombre_dennemis_a_letage != 0:
        Affichage.AfficheIntroCombat()
        # initialise la classe controleur, et par extention la classe
        #       vue et modele
        control = controleur.Control(Player, Trader, FloorMaker, Sove)
        # lance la bataille
        try:
            CHANNELMUSIQUEDEBASE.set_volume(0)
            time.sleep(0.01)
            CHANNELMUSIQUEDEBASE.stop()
            control.Battle()
            StopAllMusic()
            Player.nombre_dennemis_a_letage -= 1
        except Exception as error:
            WriteErrorInErrorLog(error)
        CheckForKIA()
        if not "Fantome" in Player.player_tags:
            PlayMusicDeLetage()
    # plus dennemi a combattre
    else:
        Affichage.AffichePlusDennemis()


def WriteErrorInErrorLog(erreur):
    dir_path = os.path.dirname(os.path.realpath(__file__))
    chemin_du_fichier = dir_path + "ErrorLog.txt"
    date_et_heure = time.strftime("%Y-%m-%d %H:%M")
    erreur = traceback.format_exc()
    with open(chemin_du_fichier, "a") as fichier:
        fichier.write(
            "-----------------------------------------"
            "------------------------------------------"
            "------------------------------------------"
            "------------------------------------------"
            f"---------\n{date_et_heure}\nDébut du Log\n\n"
        )
        fichier.write(f"{erreur}")
        fichier.write(
            "\nFin du Log\n-----------------------------"
            "-------------------------------------------"
            "-------------------------------------------"
            "-------------------------------------------"
            "------------------\n"
        )
    print("Une erreur est survenue pendant le déroulement du combat.")
    print(
        "L'écriture d'un rapport d'erreur est en cours dans le fichier ColiseumDependenciesErrorLog.txt."
    )
    print("Veuilez patienter 3 secondes...")
    time.sleep(3)
    Affichage.EntreePourContinuer()
    Player.points_de_vie = Player.points_de_vie_max
    Player.points_de_mana = Player.points_de_mana_max
    print("Vous avez récupéré tout vos pv.")
    print("Vous avez récupéré tout vos pm.")
    gold_gagne = 30 * Player.numero_de_letage
    gold_gagne = Player.AddGoldToPlayer(gold_gagne, True) 
    print("Le nombre de monstres restant à l'étage n'a pas changé.")
    print(f"Nous vous donnons {gold_gagne} golds en guise de réparation.")
    print("Veuillez nous excuser pour le dérangement.")
    Affichage.EntreePourContinuer()


def DoBossFight():
    if Player.possede_la_cle:
        if Player.nom_de_letage == "Dédale Frontière" :
            StopAllMusic()
            Player.boss_battu = True
            Player.commentaire_boss = "Descendre a l'étage inferieur"
            print("Vous vous approchez prudemment de la grille, attendant un boss a la hauteur du labyrinthe que vous venez de conquérir, cepandant...")
            Affichage.EntreePourContinuer()
            print("...personne ne vient.")
            Affichage.EntreePourContinuer()
            print("Vous entendez la voix de Jean dans votre esprit :")
            Affichage.EntreePourContinuer()
            print("*Ca aurait du être moi. Mais tu m'a libéré avant qu'il puisse me récolter.*")
            Affichage.EntreePourContinuer()
            print("*Prend donc cette pause comme un cadeau et prépare toi bien avant de descendre.*")
            Affichage.EntreePourContinuer()
            PlayMusicDeLetage()
        else:
            Affichage.AfficheIntroCombatBoss()
            Player.affronte_un_boss = True
            control = controleur.Control(Player, Trader, FloorMaker, Sove)
            try:
                CHANNELMUSIQUEDEBASE.set_volume(0)
                time.sleep(0.01)
                CHANNELMUSIQUEDEBASE.stop()
                control.Battle()
                StopAllMusic()
                Player.affronte_un_boss = False
                Player.boss_battu = True
                Player.commentaire_boss = "Descendre a l'étage inferieur"
                

            except Exception as error:
                WriteErrorInErrorLog(error)
            if "Boss Blessé" in Player.player_tags:
                Player.player_tags.remove("Boss Blessé")
                
            CheckForKIA()
            if not "Fantome" in Player.player_tags:
                PlayMusicDeLetage()
    else:
        if Player.nom_de_letage == "Limbes Flétrissants":
            print("Vous cherchez un moyen de descendre , ou d'affronter un boss, mais ne trouvez rien.")
            Affichage.EntreePourContinuer()
            print("Peut être n'avez vous pas observé l'étage suffisamment ?")
            Affichage.EntreePourContinuer()
        else:
            print(
                "Vous rentrez dans l'arène et jettez un coup d'oeil aux tribunes vides, avant de donner un coup de pied sur le sol."
            )
            Affichage.EntreePourContinuer()
            print("Mais rien ne se produit.")
            Affichage.EntreePourContinuer()
            print(
                "Une grille de métal ancien a l'autre bout de l'arène attire votre regard."
            )
            print(
                "Derriere ses barreaux imposants, vous pouvez apercevoir un escalier s'enfoncant dans les ténèbres."
            )
            Affichage.EntreePourContinuer()
            print("Cepandant, la grille ne semble pas posséder de serrure.")
            print(
                "Peut-etre pourriez vous trouver, quelque part dans l'étage, un moyen de l'ouvrir ?"
            )
            Affichage.EntreePourContinuer()

def StopAllMusic():
    global CHANNELMUSIQUEDEBASE
    global CHANNELSFX

    CHANNELMUSIQUEDEBASE.set_volume(0)
    time.sleep(0.01)
    CHANNELMUSIQUEDEBASE.stop()
    CHANNELSFX.set_volume(0)
    time.sleep(0.01)
    CHANNELSFX.stop()

def GoDown():
    Affichage.AfficheDescente()
    Player.numero_de_letage += 1
    DefinitNomEtage()
    RemiseAZeroDesVariablesPourProchainEtage()
    Affichage.AffichageDescriptionEtage()
    if Player.numero_de_letage == 12 or (
        Player.numero_de_letage == 9 and not ("Marque du Sacrifice" in Player.liste_dartefacts_optionels)
    ):
        game_in_session = False
    else:
        game_in_session = True

    return game_in_session


def DoRedcoin():
    while True:
        while True:
            try:
                print(
                    "     -={ RedCoin }=-   /925435351305251SERVICEDERECUPERATIONDEDONNEES7117764"
                )
                print(
                    "                      /7420952721321625369856321569852156AOUVRIRVIALEMENU556"
                )
                print(
                    "1 - Retour           /981265161565513513513165050742315698522685256PRINCIPAL"
                )
                print(
                    " ____/1233232311579764382419683214618568246856824565546532854663243615463745"
                )
                print(
                    " \95363541653155641654135641459565415631612952955265653959562413153556163153"
                )
                print(
                    "Code -       Nom       -    Prix    /128243165325615323235106506863236550325"
                )
                print(
                    "1257 - Affinité de Feu - 1 Redcoin /52565265163512ERRORERRORERRORERORERROR98"
                )
                print(
                    "5675 - Affinité de Foudre - 1 Red/487965651268416535498165319651965ERRORROOR"
                )
                print(
                    "9731 - Affinité de Sang - 1 Redc/789ERREUR:DONNESMANQUANTES96515866519651988"
                )
                print(
                    "7563 - Af/7845123553213506516896652565167841961561653163165ERRORERRORERROR58"
                )
                print(
                    "8240 - A/7845621365265216532561517VEUILLEZCONTACTERLESERVICEINFORMATIQUE9465"
                )
                print(
                    "6______/789OUUTILISEZNOTRESERVICE65235216513351DERECUPERATIONDEDONNEES313135"
                )
                print(
                    "/5698994524527/==================================\9AU5NUMERO5612353105151588"
                )
                print(
                    "1569899452452/Talent à débloquer avec le nombre corresponda\_35168SUIVANT:24"
                )
                choix = int(input("                              "))
                ClearConsole()
                if choix in ANNUAIREDECHOIXPOURREDCOIN or choix == 1:
                    break
            except ValueError:
                ClearConsole()
        if choix == 1:
            break
        caracteristique_du_talent = ANNUAIREDECHOIXPOURREDCOIN[choix]
        talent = caracteristique_du_talent[0]
        cout_du_talent = caracteristique_du_talent[1]
        talent_necessaire_pour_obtention = caracteristique_du_talent[2]
        if (
            (Player.nombre_de_red_coin >= cout_du_talent)
            and (talent_necessaire_pour_obtention == "None")
            and (talent not in Player.talents_possedes)
            or (Player.nombre_de_red_coin >= cout_du_talent)
            and (talent_necessaire_pour_obtention in Player.talents_possedes)
            and (talent not in Player.talents_possedes)
        ):
            if Player.stigma_negatif == "Incompatible":
                Player.nombre_de_red_coin -= cout_du_talent
                print(
                    "Vous buvez le liquide incolore contenu dans les redcoins et faites circuler votre mana comme indiqué par le code..."
                )
                print("...avant de vomir violemment tout le contenu de votre estomac.")
                print(
                    "On dirait que votre corps n'est pas compatible avec les redcoins."
                )
                Affichage.EntreePourContinuer()
            elif Player.malediction == "Pur":
                print(
                    "Alors que vous alliez ouvrir un redcoin, d'anciennes forces maudites vous envoient un uppercut dans l'estomac."
                )
                print("Vous vous évanouissez et votre corps inconscient s'écroule sur le sol.")
                Affichage.EntreePourContinuer()
                print("...")
                Affichage.EntreePourContinuer()
                print("...")
                Affichage.EntreePourContinuer()
                print("Vous vous réveillez quelques heures plus tard, essuyez la bave qui coule de vos lèvres, et rangez le redcoin.")
                Affichage.EntreePourContinuer()
            else:
                Player.talents_possedes.append(talent)
                Player.nombre_de_red_coin -= cout_du_talent
                print(
                    "Vous buvez le liquide incolore contenu dans les redcoins et faites circuler votre mana comme indiqué par le code ."
                )
                print(f"Vous gagnez le talent [{talent}] !")
                Affichage.EntreePourContinuer()
                CheckForFusionOfTalent(talent)


def CheckForFusionOfTalent(talent):
    commentaire = "...?"
    if talent in [
        "Oeuil Magique",
        "Pira",
        "Elektron",
        "Tsumeta-Sa",
        "Mathair",
        "Fos",
        "Haddee",
    ]:
        if "Oeuil Magique" in Player.talents_possedes:
            if "Pira" in Player.talents_possedes:
                commentaire += "\nLes talents Oeuil Magique et Pira interragissent dans votre corps et donnent naissance a un nouveau talent !"
                talent = "Oculus Ignis"
                Player.talents_possedes.append(talent)
                commentaire += f"\nVous gagnez le talent [{talent}] !"
            if "Elektron" in Player.talents_possedes:
                commentaire += "\nLes talents Oeuil Magique et Elektron interragissent dans votre corps et donnent naissance a un nouveau talent !"
                talent = "Oculus de Caelo"
                Player.talents_possedes.append(talent)
                commentaire += f"\nVous gagnez le talent [{talent}] !"
            if "Tsumeta-Sa" in Player.talents_possedes:
                commentaire += "\nLes talents Oeuil Magique et Tsumeta-Sa interragissent dans votre corps et donnent naissance a un nouveau talent !"
                talent = "Oculus Glacies"
                Player.talents_possedes.append(talent)
                commentaire += f"\nVous gagnez le talent [{talent}] !"
            if "Mathair" in Player.talents_possedes:
                commentaire += "\nLes talents Oeuil Magique et Mathair interragissent dans votre corps et donnent naissance a un nouveau talent !"
                talent = "Oculus Terrae"
                Player.talents_possedes.append(talent)
                commentaire += f"\nVous gagnez le talent [{talent}] !"
            if "Fos" in Player.talents_possedes:
                commentaire += "\nLes talents Oeuil Magique et Fos interragissent dans votre corps et donnent naissance a un nouveau talent !"
                talent = "Corporalis Oculus"
                Player.talents_possedes.append(talent)
                commentaire += f"\nVous gagnez le talent [{talent}] !"
            if "Haddee" in Player.talents_possedes:
                commentaire += "\nLes talents Oeuil Magique et Haddee interragissent dans votre corps et donnent naissance a un nouveau talent !"
                talent = "Sanguis Oculus"
                Player.talents_possedes.append(talent)
                commentaire += f"\nVous gagnez le talent [{talent}] !"
    if talent in ["Eboulis", "Grand Froid"]:
        if ("Eboulis" in Player.talents_possedes) and (
            "Grand Froid" in Player.talents_possedes
        ):
            commentaire += "\nLes talents Eboulis et Grand Froid interragissent dans votre corps et donnent naissance a un nouveau talent !"
            talent = "Avalanche"
            Player.talents_possedes.append(talent)
            commentaire += f"\nVous gagnez le talent [{talent}] !"
    if talent in ["Oeuil Magique", "Connaissance"]:
        if ("Oeuil Magique" in Player.talents_possedes) and (
            "Connaissance" in Player.talents_possedes
        ):
            commentaire += "\nLes talents Oeuil Magique et Connaissance interragissent dans votre corps et donnent naissance a un nouveau talent !"
            talent = "Metamorphosis"
            Player.talents_possedes.append(talent)
            commentaire += f"\nVous gagnez le talent [{talent}] !"
    if talent in ["Luciole", "Pyromage"]:
        if ("Luciole" in Player.talents_possedes) and (
            "Pyromage" in Player.talents_possedes
        ):
            commentaire += "\nLes talents Luciole et Pyromage interragissent dans votre corps et donnent naissance a un nouveau talent !"
            talent = "Bougie Magique"
            Player.talents_possedes.append(talent)
            commentaire += f"\nVous gagnez le talent [{talent}] !"
    if talent in ["Suroxygenation", "Réflex"]:
        if ("Suroxygenation" in Player.talents_possedes) and (
            "Réflex" in Player.talents_possedes
        ):
            commentaire += "\nLes talents Suroxygenation et Réflex interragissent dans votre corps et donnent naissance a un nouveau talent !"
            talent = "Ultra-Instinct"
            Player.talents_possedes.append(talent)
            commentaire += f"\nVous gagnez le talent [{talent}] !"
    if talent in ["Cycle Glaciaire", "Pyromage", "Patience", "Carte du Gout", "Nectar"]:
        if (
            ("Cycle Glaciaire" in Player.talents_possedes)
            and ("Pyromage" in Player.talents_possedes)
            and ("Patience" in Player.talents_possedes)
            and ("Carte du Gout" in Player.talents_possedes)
            and ("Nectar" in Player.talents_possedes)
        ):
            commentaire += "\nLes talents Cycle Glaciaire, Pyromage, Patience, Carte du Gout et Nectar interragissent dans votre corps et donnent naissance a un nouveau talent !"
            talent = "Réjuvénation"
            Player.talents_possedes.append(talent)
            commentaire += f"\nVous gagnez le talent [{talent}] !"
    if talent in [
        "Affinitée de Feu",
        "Affinitée de Foudre",
        "Affinitée de Glace",
        "Affinitée de Terre",
        "Affinitée Physique",
        "Affinitée de Sang",
    ]:
        if (
            ("Affinitée de Feu" in Player.talents_possedes)
            and ("Affinitée de Foudre" in Player.talents_possedes)
            and ("Affinitée de Glace" in Player.talents_possedes)
            and ("Affinitée de Terre" in Player.talents_possedes)
            and ("Affinitée de Sang" in Player.talents_possedes)
            and ("Affinitée Physique" in Player.talents_possedes)
        ):
            commentaire += (
                "\nLes talents Affinitée de Feu, Affinitée de Foudre,"
                " Affinitée de Glace, Affinitée de Terre, Affinitée Physique"
                " et Affinitée de Sang interragissent dans votre corps et "
                "donnent naissance a un nouveau talent !"
            )
            talent = "Elémento-Réceptif"
            Player.talents_possedes.append(talent)
            commentaire += f"\nVous gagnez le talent [{talent}] !"
    if talent in [
        "Rapide",
        "Grand Froid",
        "Réflex",
        "Conditions Limites",
        "Aura de Feu",
        "Poussière de Diamants",
    ]:
        if (
            ("Rapide" in Player.talents_possedes)
            and ("Grand Froid" in Player.talents_possedes)
            and ("Réflex" in Player.talents_possedes)
            and ("Conditions Limites" in Player.talents_possedes)
            and ("Aura de Feu" in Player.talents_possedes)
            and ("Poussière de Diamants" in Player.talents_possedes)
        ):
            commentaire += (
                "\nLes talents Rapide, Grand Froid,"
                " Réflex, Conditions Limites, Aura de Feu"
                " et Poussière de Diamants interragissent dans votre corps et "
                "donnent naissance a un nouveau talent !"
            )
            talent = "Grand Pandémonium Elémentaire"
            Player.talents_possedes.append(talent)
            commentaire += f"\nVous gagnez le talent [{talent}] !"
    if talent in ["Baron Rouge", "Pyrosorcier", "Connaissance"]:
        if (
            ("Baron Rouge" in Player.talents_possedes)
            and ("Pyrosorcier" in Player.talents_possedes)
            and ("Connaissance" in Player.talents_possedes)
        ):
            commentaire += "\nLes talents Baron Rouge, Pyrosorcier et Connaissance interragissent dans votre corps et donnent naissance a un nouveau talent !"
            talent = "Maitre du Mana"
            Player.talents_possedes.append(talent)
            commentaire += f"\nVous gagnez le talent [{talent}] !"
    if talent in ["Pira", "Pyromage", "Rafale"]:
        if (
            ("Pira" in Player.talents_possedes)
            and ("Pyromage" in Player.talents_possedes)
            and ("Rafale" in Player.talents_possedes)
        ):
            commentaire += "\nLes talents Pira, Pyromage et Rafale interragissent dans votre corps et donnent naissance a un nouveau talent !"
            talent = "Libération de Feu"
            Player.talents_possedes.append(talent)
            commentaire += f"\nVous gagnez le talent [{talent}] !"

    if talent in ["Elektron", "Facture", "Luciole"]:
        if (
            ("Elektron" in Player.talents_possedes)
            and ("Facture" in Player.talents_possedes)
            and ("Luciole" in Player.talents_possedes)
        ):
            commentaire += "\nLes talents Elektron, Facture et Luciole interragissent dans votre corps et donnent naissance a un nouveau talent !"
            talent = "Libération de Foudre"
            Player.talents_possedes.append(talent)
            commentaire += f"\nVous gagnez le talent [{talent}] !"
    if talent in ["Tsumeta-Sa", "Cycle Glaciaire", "Grand Froid"]:
        if (
            ("Tsumeta-Sa" in Player.talents_possedes)
            and ("Cycle Glaciaire" in Player.talents_possedes)
            and ("Grand Froid" in Player.talents_possedes)
        ):
            commentaire += "\nLes talents Tsumeta-Sa, Cycle Glaciaire et Grand Froid interragissent dans votre corps et donnent naissance a un nouveau talent !"
            talent = "Libération de Glace"
            Player.talents_possedes.append(talent)
            commentaire += f"\nVous gagnez le talent [{talent}] !"

    if talent in ["Mathair", "Fracturation", "Eboulis"]:
        if (
            ("Mathair" in Player.talents_possedes)
            and ("Fracturation" in Player.talents_possedes)
            and ("Eboulis" in Player.talents_possedes)
        ):
            commentaire += "\nLes talents Mathair, Fracturation et Eboulis interragissent dans votre corps et donnent naissance a un nouveau talent !"
            talent = "Libération de Terre"
            Player.talents_possedes.append(talent)
            commentaire += f"\nVous gagnez le talent [{talent}] !"

    if talent in ["Fos", "Oeuil Magique", "Réflex"]:
        if (
            ("Fos" in Player.talents_possedes)
            and ("Oeuil Magique" in Player.talents_possedes)
            and ("Réflex" in Player.talents_possedes)
        ):
            commentaire += "\nLes talents Fos, Oeuil Magique et Réflex interragissent dans votre corps et donnent naissance a un nouveau talent !"
            talent = "Libération Physique"
            Player.talents_possedes.append(talent)
            commentaire += f"\nVous gagnez le talent [{talent}] !"

    if talent in ["Haddee", "Anticoagulants", "Baron Rouge"]:
        if (
            ("Haddee" in Player.talents_possedes)
            and ("Anticoagulants" in Player.talents_possedes)
            and ("Baron Rouge" in Player.talents_possedes)
        ):
            commentaire += "\nLes talents Haddee, Anticoagulants et Baron Rouge interragissent dans votre corps et donnent naissance a un nouveau talent !"
            talent = "Libération de Sang"
            Player.talents_possedes.append(talent)
            commentaire += f"\nVous gagnez le talent [{talent}] !"
    if commentaire != "...?":
        print(commentaire)
        Affichage.EntreePourContinuer()


def AffichageSecretPage3():
    try:
        dummy = {}
        dir_path = os.path.dirname(os.path.realpath(__file__))
        chemin_du_fichier_save = dir_path + "\\error.txt"
        with open(chemin_du_fichier_save, "r") as fichier:
            reader = csv.DictReader(fichier, delimiter="|")
            for line in reader:
                dummy[line["Caracteristique"]] = line["Valeur"]
        if dummy["error"] == "error":
            PlayMusic("abyss")
            numero = 0
            while True:
                print("ERREUR : VARIABLE VIE NON TROUVEE")
                print("ANCIENNES DONNEES TROUVEES, CHARGEMENT EN COURS...")
                print("ERREUR : ANCIENNES DONNEES EN COURS DUTILISATION")
                print("UTILISATION DES DONNEES AVEC UNE AUTRE VARIABLE VIE...")
                print(
                    "ERREUR : TEMPS DE JEU DES ANCIENNES DONNEES DEPASSE MEMOIRE VIVE DE LA MACHINE"
                )
                print("REBOOT DU PROGRAMME EN COURS....")
                print(
                    f"TENTATIVE NUMERO {numero} DE RESOLUTIONS DES (ERROR : OVERDRIVE) ERREURS EN COURS..."
                )
                if numero == 313:
                    break
                time.sleep(0.01)
                ClearConsole()
                numero += 1
            print("SOLUTION TROUVEE")
            print("SUPPRESSION DES DONNEES CORROMPUE TERMINEE")
            print("MESSAGE DE [ERROR : UNKNOWN] : continue. rapproche toi. bientôt.")
            Sove.RajouteEntreeAuLivreCigogneBlancheSiOnAPas("???", "ERRORLOG")
            Affichage.EntreePourContinuer()
            dir_path = os.path.dirname(os.path.realpath(__file__))
            chemin_du_fichier = dir_path + "\\error.txt"
            os.remove(chemin_du_fichier)
            ClearConsole()
    except FileNotFoundError:
        ClearConsole()

def GoUp():
    print("Vous remontez les marches du Coliseum.")
    Affichage.EntreePourContinuer()
    Player.numero_de_letage -= 1
    if Player.numero_de_letage == 0:
        Player.mode_de_jeu = "Descente"
        
        StopAllMusic()
        print("Vous arrivez a votre destination.")
        Affichage.EntreePourContinuer()
    RemiseAZeroDesVariablesPourProchainEtage()
    DefinitNomEtage()
    game_in_session = True
    if game_in_session:
        PlayMusicDeLetage()
        try:
            FloorMaker.SetupFloorLayout()
            Save.SaveTheGameSansAffichage()
        except Exception as error:
            WriteErrorInErrorLog(error)

def DoBossOrGoDown():
    game_in_session = True

    # arrivage a la fin de l'étage sans clé
    level_de_la_cle =  Sove.ModifieLivraisonDansSove("Nombre", "Clé")
    if RegardeSiEtageCompletementObserve(FloorMaker.FloorBlueprint) and (level_de_la_cle+4)==Player.numero_de_letage:
        print("Vous avez observé chaque salles de l'étage, sans trouver de clé.")
        Affichage.EntreePourContinuer()
        print("Vous regardez , impuissant, les horribles grilles de l'arène.")
        Affichage.EntreePourContinuer()
        print("I L  N ' Y  A  P L U S  R I E N  A  F A I R E")
        Affichage.EntreePourContinuer()
        print("Vous envisagez de rogner le métal, mais celui ci reste stoique face a vos efforts.")
        Affichage.EntreePourContinuer()
        print("Vous envisagez de remonter, mais ne retrouvez pas les marches que vous avez emprunté.")
        Affichage.EntreePourContinuer()
        print("Vous envisagez de demander de l'aide au marchand, mais celui-ci n'est trouvable nulle part.")
        Affichage.EntreePourContinuer()
        print("Vous cherchez a nouveau dans toute les salles de l'étage, mais ces dernieres sont vides.")
        Affichage.EntreePourContinuer()
        print("Et alors que vous revenez à l'Arène au centre de l'étage...")
        Affichage.EntreePourContinuer()
        print("...vous trouvez un carré de pierre alien, parsemé de trous depuis lesquels vous pouvez aperçevoir le scintillement de pieux de métal.")
        Affichage.EntreePourContinuer()
        print("Un simple piège.")
        Affichage.EntreePourContinuer()
        print("Une mort rapide.")
        Affichage.EntreePourContinuer()
        print("La plus douce pitiée du Coliseum.")
        Affichage.EntreePourContinuer()
        print("...")
        Affichage.EntreePourContinuer()
        print("...")
        Affichage.EntreePourContinuer()
        print("...")
        Affichage.EntreePourContinuer()
        print("...vous n'aurez pas saigné bien longtemps.")
        Affichage.EntreePourContinuer()
        Affichage.ShowDeath()

    if Player.mode_de_jeu == "Ascension":
        GoUp()

    elif not "Fantome" in Player.player_tags:
        # combat contre boss
        if not Player.boss_battu and not "Passe La Porte Redcoin" in Player.player_tags:
            DoBossFight()
                
        # descente au niveau inferieur
        else:
            if Player.mode_de_jeu == "Véritable Descente" and Player.numero_de_letage == 0:
                GiveChoiceRealEndingOrNot()
            if Player.nom_de_letage == "Limbes Flétrissants" and Player.numero_boss_alt in range(1, 11) and not "Passe La Porte Redcoin" in Player.player_tags:
                Player.numero_de_letage -= 1
                Player.etage_alternatif = True
                Player.numero_boss_alt += 1
            game_in_session = GoDown()
            if game_in_session:
                PlayMusicDeLetage()
                try:
                    FloorMaker.SetupFloorLayout()
                except Exception as error:
                    WriteErrorInErrorLog(error)

        
    return game_in_session
            
def GiveChoiceRealEndingOrNot():
    print("Vous vous approchez du centre de l'arène.")
    Affichage.EntreePourContinuer()
    print("Vous pouvez absorber la Marque du Sacrifice de Jean afin d'entrer dans les profondeurs du Coliseum...")
    Affichage.EntreePourContinuer()
    print("...ou la laisser pour n'aller qu'a la fin de l'histoire de votre personnage.")
    Affichage.EntreePourContinuer()
    print("Le choix est votre.")
    Affichage.EntreePourContinuer()
    while True :
        try:
            print("1 - Absorber la Marque du Sacrifice")
            print("2 - Descendre ")
            choix = int(input("\nFaites votre choix avec les numéros :"))
            ClearConsole()
            if choix in [1, 2]:
                break
        except ValueError:
            ClearConsole()
    if choix == 1:
        print("Vous approchez votre main de la masse argentée, et celle ci fonce sur votre épaule.")
        Affichage.EntreePourContinuer()
        print("Vous sentez une agréable chaleur émettre du point d'impact.")    
        Affichage.EntreePourContinuer()
        print("Vous obtenez la Marque du Sacrifice !")
        Affichage.EntreePourContinuer()
        FloorMaker.GiveRandomArtefact("Marque du Sacrifice","Don")
    print("Vous continuez votre chemin.")
    Affichage.EntreePourContinuer()

def GetChoix():
    while True:
        try:
            choix = GetChoiceMenuColiseum()
            ClearConsole()
            if choix != 2 and Player.mode_de_jeu == "Ascension":
                print("LECHEMINVERSLASCENSIONESTDROITILESTRIGIDENETECARTEPASDUCHEMINOUTOMBEDANSLESENTRAILLESDEMONODIEUESTOMAC")
                Affichage.EntreePourContinuer()
            elif choix in [1, 2, 3, 4, 5, 6, 7, 8, 777]:
                return choix
        except ValueError:
            ClearConsole()


def DefinitNomEtage():
    if Player.numero_de_letage == 0:
        Player.nom_de_letage = "Sanctuaire du Sacrifice"
    elif Player.numero_de_letage == 1:
        Player.nom_de_letage = "Ruines Abandonnées"
    elif Player.numero_de_letage == 2:
        Player.nom_de_letage = "Forêt Désenchantée"
        if Player.etage_alternatif:
            Player.nom_de_letage = "Jungle Cruelle"
    elif Player.numero_de_letage == 3:
        Player.nom_de_letage = "Champs de Sables"
    elif Player.numero_de_letage == 4:
        Player.nom_de_letage = "Tour de l'Esprit"
    elif Player.numero_de_letage == 5:
        Player.nom_de_letage = "Carnaval de Rouille"
    elif Player.numero_de_letage == 6:
        Player.nom_de_letage = "Bidonville du Clocher"
    elif Player.numero_de_letage == 7:
        Player.nom_de_letage = "Cachots de l'Immonde"
        if Player.etage_alternatif:
            Player.nom_de_letage = "Douves du Pénitent"
    elif Player.numero_de_letage == 8:
        Player.nom_de_letage = "Arène du Zénith"
    elif Player.numero_de_letage == 9:
        Player.nom_de_letage = "Chemins Coalescents"
    elif Player.numero_de_letage == 10:
        Player.nom_de_letage = "Dédale Frontière"
        if Player.etage_alternatif:
            Player.nom_de_letage = "Limbes Flétrissants"
    elif Player.numero_de_letage == 11:
        Player.nom_de_letage = "Rivages Distants"
    Player.etage_alternatif = False


def PlayMusicDeLetage():
    nom_de_la_musique = str(Player.numero_de_letage)
    if Player.nom_de_letage in ["Jungle Cruelle", "Limbes Flétrissants", "Douves du Pénitent"]:
        nom_de_la_musique += "_alt"
    if Player.numero_de_letage == -1 and  Sove.ModifieTagsDansSove("Checke", "Village Nuit"):
        nom_de_la_musique += "_alt"
    if Player.nom_de_letage == "Dédale Frontière" or Player.mode_jukebox :
        PlayMusic(Player.musique_etage_10)
    else:
        PlayMusic(f"etage_{nom_de_la_musique}")


def GetNomEtageEtDebugValues():
    try:
        dictionnaire = {}
        dir_path = os.path.dirname(os.path.realpath(__file__))
        # fichier de sauvegarde (temporaire)
        chemin_du_fichier_save = dir_path + "\\save.txt"
        with open(chemin_du_fichier_save, "r") as fichier:
            reader = csv.DictReader(fichier, delimiter="|")
            for line in reader:
                dictionnaire[line["Caracteristique"]] = line[
                    "Valeur"
                ]
        Player.nom_de_letage = dictionnaire["Nom de l'étage"]

        # debug
        for value_name in DEBUG_OPTIONS:
            setattr(Player, DEBUG_OPTIONS[value_name], dictionnaire[DEBUG_OPTIONS[value_name]])

    except KeyError:
        pass
    except FileNotFoundError:
        pass

def SetupGameMode():
    dir_path = os.path.dirname(os.path.realpath(__file__))
    chemin_sove = dir_path + "\\s0ve.txt"
    chemin_sive = dir_path + "\\s1ve.txt"

    dictionnaire_de_choses_permanentes = {}
    # fichier de sauvegarde (permanant)
    if os.path.isfile(chemin_sive):
        chemin_du_fichier_save = dir_path + "\\s1ve.txt"
    else:
        chemin_du_fichier_save = dir_path + "\\s0ve.txt"
    with open(chemin_du_fichier_save, "r") as fichier:
        reader = csv.DictReader(fichier, delimiter="|")
        for line in reader:
            dictionnaire_de_choses_permanentes[line["Caracteristique"]] = line[
                "Valeur"
            ]
    
    if dictionnaire_de_choses_permanentes["486241597531"] == "Jean.rar":
        Player.battu_le_sacrifie = True

    if Player.battu_le_sacrifie and os.path.isfile(chemin_sove):
        Player.mode_de_jeu = "Véritable Descente"
    elif not Player.battu_le_sacrifie and os.path.isfile(chemin_sive):
        Player.mode_de_jeu = "Ascension"
    elif not Player.battu_le_sacrifie and os.path.isfile(chemin_sove):
        Player.mode_de_jeu = "Descente"
    else:
        Player.mode_de_jeu = "Erreur"

    







def DoJukebox():
    dictionnaire_musiques_jukebox = {
        1 : {"Nom" : "Exploratio", "Nom Réel" : "etage_1"},
        2 : {"Nom" : "Les Joies du Combat", "Nom Réel" : "battle_theme_1"},
        3 : {"Nom" : "Revenant", "Nom Réel" : "boss_1"},
        4 : {"Nom" : "Conte de Fée", "Nom Réel" : "etage_2"},
        5 : {"Nom" : "Epineuses Rencontres", "Nom Réel" : "battle_theme_2"},
        6 : {"Nom" : "Le Chevalier Qu'on Ne Veut Pas Rencontrer", "Nom Réel" : "boss_2"},
        7 : {"Nom" : "Affreux Fertile", "Nom Réel" : "etage_2_alt"},
        8 : {"Nom" : "Clair de Sang", "Nom Réel" : "battle_theme_2_alt"},
        9 : {"Nom" : "Néophobie Alimentaire", "Nom Réel" : "boss_2_alt"},
        10 : {"Nom" : "Ruines d'Antan", "Nom Réel" : "etage_3"},
        11 : {"Nom" : "Sables Mouvants", "Nom Réel" : "battle_theme_3"},
        12 : {"Nom" : "Euthanasie Régalienne", "Nom Réel" : "boss_3"},
        13 : {"Nom" : "Pāramitā", "Nom Réel" : "etage_4"},
        14 : {"Nom" : "Nerd Party", "Nom Réel" : "battle_theme_4"},
        15 : {"Nom" : "Jeux d'Enfants", "Nom Réel" : "boss_4"},
        16 : {"Nom" : "Pantomime", "Nom Réel" : "boss_4_phase_2"},
        17 : {"Nom" : "Carnaval", "Nom Réel" : "etage_5"},
        18 : {"Nom" : "Piñata", "Nom Réel" : "battle_theme_5"},
        19 : {"Nom" : "Tragicomique", "Nom Réel" : "boss_5"},
        20 : {"Nom" : "Combler les Vides", "Nom Réel" : "etage_6"},
        21 : {"Nom" : "Systèmes Défaillants", "Nom Réel" : "battle_theme_6"},
        22 : {"Nom" : "Sa Majesté Des Mouches", "Nom Réel" : "boss_6"},
        23 : {"Nom" : "Divin Karma", "Nom Réel" : "etage_7"},
        24 : {"Nom" : "Folie Furieuse", "Nom Réel" : "battle_theme_7"},
        25 : {"Nom" : "Comment Tuer le Grand Méchant Loup", "Nom Réel" : "boss_7"},
        26 : {"Nom" : "Le Prix des Larmes", "Nom Réel" : "etage_7_alt"},
        27 : {"Nom" : "Noblesse Oblige", "Nom Réel" : "battle_theme_7_alt"},
        28 : {"Nom" : "Coeur, Ego, Tango.", "Nom Réel" : "boss_7_alt"},
        29 : {"Nom" : "Ossuaire Immaculé", "Nom Réel" : "etage_8"},
        30 : {"Nom" : "Dissonance Cognitive", "Nom Réel" : "battle_theme_8"},
        31 : {"Nom" : "Faux Semblants", "Nom Réel" : "boss_8"},
        32 : {"Nom" : "La Hache et le Grimoire", "Nom Réel" : "boss_8_phase_2"},
        33 : {"Nom" : "Fièvre du Samedi Soir", "Nom Réel" : "dance"},
        34 : {"Nom" : "S1mul4crum", "Nom Réel" : "etage_0"},
        35 : {"Nom" : "Cruc1fix1on", "Nom Réel" : "boss_0"},
        36 : {"Nom" : "V3tus S4nct0rum", "Nom Réel" : "battle_theme_0"},
        37 : {"Nom" : "Réarr4ng3ment L1m1nal", "Nom Réel" : "etage_9"},
        38 : {"Nom" : "4rythm1e", "Nom Réel" : "battle_theme_9"},
        39 : {"Nom" : "Au Dé7our D’un S3nti3r Une Ch4rogn3 Infâme", "Nom Réel" : "boss_9"},
        40 : {"Nom" : "Th3 L4byr1nth Génés1s", "Nom Réel" : "etage_10"},
        41 : {"Nom" : "Sur l3 S3nt1er de l4 Gu3rr3", "Nom Réel" : "battle_theme_10"},
        42 : {"Nom" : "Endorphines", "Nom Réel" : "tutorial"},
        43 : {"Nom" : "Dangereuses Mélancolies", "Nom Réel" : "alfredproto"},
        44 : {"Nom" : "L'Orage avant la Tempête", "Nom Réel" : "boss_introV2"},
        45 : {"Nom" : "Sillages Sur Une Mer de Rêves", "Nom Réel" : "gravestone"},
        46 : {"Nom" : "Bêtise Humaine", "Nom Réel" : "reconfort"},
        47 : {"Nom" : "Esotériques Réflexions", "Nom Réel" : "debug"},
        
    }
    print("Vous frappez le sol de l'arène, et au lieu de monstres, une étrange machine sort du sol.")
    Affichage.EntreePourContinuer()
    print("Sur sa devanture, vous pouvez observer deux cadres régulant respectivement la musique actuelle de l'étage et sa musique de combat, ainsi qu'une vitre en dessous.")
    print("Placardé sur un des côtés de la machine, vous trouvez un papier jaunissant sur laquelle se trouve une liste de musiques ainsi que des codes qui leurs sont associés.")
    Affichage.EntreePourContinuer()
    print("Vous pouvez changer les musiques en sélectionnant un cadre et en entrant un code sur un pavé numérique a coté.")
    Affichage.EntreePourContinuer()
    
    while True:
        while True:
            try:
                # attribue le code actuel a un nom
                for cle in dictionnaire_musiques_jukebox:
                    if dictionnaire_musiques_jukebox[cle]["Nom Réel"] == Player.musique_etage_10:
                        nom_musique_etage = dictionnaire_musiques_jukebox[cle]["Nom"]
                        break
                for cle in dictionnaire_musiques_jukebox:
                    if dictionnaire_musiques_jukebox[cle]["Nom Réel"] == Player.musique_combat_10:
                        nom_musique_combat = dictionnaire_musiques_jukebox[cle]["Nom"]
                        break

                # affichage
                print(f"Musique de l'étage : [{nom_musique_etage}]")
                print(f"Musique des combats : [{nom_musique_combat}]")
                print("\n1 - Changer la musique de l'étage")
                print("2 - Changer la musique des combats")
                print("3 - Partir")
                print("4 - Désactiver le mode jukebox et partir")
                choix = int(input("(Faites votre choix avec les numéros :) "))
                ClearConsole()

                if choix in [1, 2, 3, 4]:
                    break
            except ValueError:
                ClearConsole()
        
        if choix == 3:
            print("Vous laissez le jukebox derrière vous, et il retourne dans le sol de l'arène.")
            Affichage.EntreePourContinuer()
            break

        elif choix == 4:
            print("Mode Jukebox Désactivé")
            Player.mode_jukebox = False
            PlayMusicDeLetage()
            print("Vous laissez le jukebox derrière vous, et il retourne dans le sol de l'arène.")
            Affichage.EntreePourContinuer()
            break

        elif choix == 2:
            choix_effectue = False
            while not choix_effectue:
                while True:
                    try:
                        print("Choix de la musique des combats :")
                        for numero in dictionnaire_musiques_jukebox:
                            print(f"{numero} - {dictionnaire_musiques_jukebox[numero]['Nom']}")
                        choix = int(input("\n(Faites votre choix avec les numéros :) "))
                        ClearConsole()
                        if choix in range (1, len(dictionnaire_musiques_jukebox)+1):
                            break
                    except ValueError:
                        ClearConsole()
                PlayMusic(dictionnaire_musiques_jukebox[choix]['Nom Réel'])
                while True:
                    try:
                        print(f"Vous avez choisi la musique de combat suivante : [{dictionnaire_musiques_jukebox[choix]['Nom']}]")
                        print("\nValidez-vous votre choix ?")
                        print("1 - Oui")
                        print("2 - Non")
                        choix_validation = int(input("(Faites votre choix avec les numéros :) "))
                        ClearConsole()
                        if choix_validation == 1 :
                            choix_effectue = True
                            Player.musique_combat_10 = dictionnaire_musiques_jukebox[choix]["Nom Réel"]
                            PlayMusicDeLetage()
                            print("A travers la vitre, vous voyez un bras méchanique prendre un disque noir comme le charbon et le poser sous la plaque.")
                            print("Une pointe venue d'en bas se pose dessus.")
                            print("Mais curieusement, le disque ne tourne pas.")
                            Affichage.EntreePourContinuer()
                            break
                        elif choix_validation == 2:
                            PlayMusicDeLetage()
                            break
                    except ValueError:
                        ClearConsole()
                    
        elif choix == 1:
            choix_effectue = False
            while not choix_effectue:
                while True:
                    try:
                        print("Choix de la musique de l'étage :")
                        for numero in dictionnaire_musiques_jukebox:
                            print(f"{numero} - {dictionnaire_musiques_jukebox[numero]['Nom']}")
                        choix = int(input("(Faites votre choix avec les numéros :) "))
                        ClearConsole()
                        if choix in range (1, len(dictionnaire_musiques_jukebox)+1):
                            break
                    except ValueError:
                        ClearConsole()
                PlayMusic(dictionnaire_musiques_jukebox[choix]["Nom Réel"])
                while True:
                    try:
                        print(f"Vous avez choisi la musique d'étage suivante : [{dictionnaire_musiques_jukebox[choix]['Nom']}]")
                        print("\nValidez-vous votre choix ?")
                        print("1 - Oui")
                        print("2 - Non")
                        choix_validation = int(input("(Faites votre choix avec les numéros :) "))
                        ClearConsole()
                        if choix_validation == 1 :
                            choix_effectue = True
                            Player.musique_etage_10 = dictionnaire_musiques_jukebox[choix]["Nom Réel"]
                            print("A travers la vitre, vous voyez un bras méchanique prendre un disque noir comme le charbon et le poser sur la plaque.")
                            print("Le disque tourne, et une pointe se pose dessus.")
                            print("La musique remplit alors l'étage.")
                            Affichage.EntreePourContinuer()
                            break
                        elif choix_validation == 2:
                            PlayMusicDeLetage()
                            break
                    except ValueError:
                        ClearConsole()

def DoBossZero():
    if not "Combattant le Gardien" in Player.player_tags:
        while True:
            while True:
                try:
                    print("blablabla")
                    print("\n1 - J'y vais.")
                    print("2 - Qui es-tu ?")
                    print("3 - C'est quoi cet endroit ?")
                    print("4 - A propos des pages...")
                    print("5 - Pourquoi faire tout ca ?")
                    print("6 - Le véritable ennemi...")
                    print("7 - J'ai pas tellement envie de t'écouter parler, tu peux tout me résumer ?")
                    print("8 - J'ai très envie de t'écouter parler, tu peut tout me raconter dans les moindres détails ?")
                    print("9 - Tu as vu l'heure ? Il est temps de te sortir de là !")
                    choix = int(input("\nFaire votre choix avec les nombres : "))
                    ClearConsole()
                    if choix in range(1, 10):
                        break
                except ValueError:
                    ClearConsole()
            if choix == 1:
                print("*Mais... mais non !*\n*Revient !*")
                Affichage.EntreePourContinuer()
                break
            elif choix == 2:
                pass
            elif choix == 3:
                pass
            elif choix == 4:
                pass
            elif choix == 5:
                pass
            elif choix == 6:
                pass
            elif choix == 7:
                pass
            elif choix == 8:
                pass
            elif choix == 9:
                print("*Eh bien...c'est parti alors.*")
                Affichage.EntreePourContinuer()
                Player.player_tags.append("Combattant le Gardien")

                Player.affronte_un_boss = True
                control = controleur.Control(Player, Trader, FloorMaker, Sove)
                try:
                    CHANNELMUSIQUEDEBASE.set_volume(0)
                    time.sleep(0.01)
                    CHANNELMUSIQUEDEBASE.stop()
                    control.Battle()
                    StopAllMusic()
                except Exception as error:
                    WriteErrorInErrorLog(error)
                RemiseAZeroDesVariablesPourProchainEtage()
                try:
                    FloorMaker.SetupFloorLayout()
                except Exception as error:
                    WriteErrorInErrorLog(error)
                PlayMusicDeLetage()
                print("Le monde se met a tourner, tourner, et vous ne reconnaissez plus l'étage dans lequel vous êtes.")
                print("La bombe fumigène vous a laissé confus, et vous en oubliez presque que le Gardien s'est enfui ! Allez le chercher dans l'étage !")
                Player.affronte_un_boss = False
                Affichage.EntreePourContinuer()
                break
    else:
        if Player.position_x == 0 and Player.position_y == 0:
            print("Le gardien n'est pas ici.")
            Affichage.EntreePourContinuer()
        else:
            print("Vous retrouvez le gardien entrain de soigner ses blessures, et votre confusion s'estompe !")
            print("Des petits êtres de lumière tournent autour de lui...")
            Affichage.EntreePourContinuer()
            print("Vous regardez ce spectacle attendrissant...")
            print("...et le gardien vous remarque.")
            Affichage.EntreePourContinuer()
            RemiseAZeroDesVariablesPourProchainEtage()
            Player.affronte_un_boss = True
            control = controleur.Control(Player, Trader, FloorMaker, Sove)

            try:
                CHANNELMUSIQUEDEBASE.set_volume(0)
                time.sleep(0.01)
                CHANNELMUSIQUEDEBASE.stop()
                control.Battle()
                StopAllMusic()
            except Exception as error:
                WriteErrorInErrorLog(error)

            try:
                FloorMaker.SetupFloorLayout()
            except Exception as error:
                WriteErrorInErrorLog(error)

            if Player.vies_du_gardien == 0:
                StopAllMusic()
                print("*Ca y est !*\n*Tu m'a absorbé !*")
                Observation.AddSoulToS0ve()
                dir_path = os.path.dirname(os.path.realpath(__file__))
                chemin_du_fichier_save = dir_path + "\\save.txt"
                os.remove(chemin_du_fichier_save)
                Affichage.EntreePourContinuer()
                print("*Je fais maintenant parti de toi...*")
                Affichage.EntreePourContinuer()
                print("*...")
                Affichage.EntreePourContinuer()
                print("*...on peut vous aider ?*")
                Affichage.EntreePourContinuer()
                print("Les esprits élémentaires flottent autour du gardien, et vous regardent en silence.")
                Affichage.EntreePourContinuer()
                print("Vous les regardez...")
                Affichage.EntreePourContinuer()
                print("Ils vous regardent...*")
                Affichage.EntreePourContinuer()
                print("Vous les regardez...")
                Affichage.EntreePourContinuer()
                print("Ils vous regardent...*")
                Affichage.EntreePourContinuer()
                print("Vous les regardez...")
                Affichage.EntreePourContinuer()
                print("Ils vous regardent...*")
                Affichage.EntreePourContinuer()
                print("Vous approchez votre main de votre arme...")
                Affichage.EntreePourContinuer()
                print("...et ils déguerpissent aussitôt en bas des escaliers de l'arène.")
                Affichage.EntreePourContinuer()
                print("*Oh. Je crois qu'ils viennent de se répandre dans les étages inferieurs.*\n*Tu risque de les recroiser assez souvent.*")
                Affichage.EntreePourContinuer()
                print("*Enfin bref.*")
                Affichage.EntreePourContinuer()
                print("*Je fais maintenant parti de toi...*")
                Affichage.EntreePourContinuer()
                print("*Mais pour éviter de disparaitre si tu meurs...*")
                Affichage.EntreePourContinuer()
                print("*...je vais devoir aller ailleurs.*")
                Affichage.EntreePourContinuer()
                print("*Dans le fichier de sauvegarde permanent.*")
                Affichage.EntreePourContinuer()
                print("*Je devrais pouvoir y arriver tout seul. J'ai juste besoin que...*")
                Affichage.EntreePourContinuer()
                print("*...*")
                Affichage.EntreePourContinuer()
                print("*...tu viens de louper le combat petit bonhomme.*")
                Affichage.EntreePourContinuer()
                print("*Un autre esprit, Voluntad Tin Tuukul, s'approche du gardien avec un air un peu groggy.*")
                Affichage.EntreePourContinuer()
                print("*Ils sont déjà partis en bas, tu devrais les suivre.*")
                Affichage.EntreePourContinuer()
                print("L'esprit fait quelques tours autour de Jean, puis file en direction des escaliers.")
                Affichage.EntreePourContinuer()
                print("*On a dela chance de pas l'avoir eu celui-là.*\n*C'est l'esprit de l'âme. Tu sais ce que ca signifie ?*")
                Affichage.EntreePourContinuer()
                print("*Magie illimitée*")
                Affichage.EntreePourContinuer()
                print("*Enfin bref.*")
                Affichage.EntreePourContinuer()
                print("*J'ai juste besoin que tu disparaisse quelques instants.*")
                Affichage.EntreePourContinuer()
                print("*Ca sera pas douloureux, promis juré !*")
                Affichage.EntreePourContinuer()
                print("*Et j'ai failli oublier : sans moi, le système d'ascension n'existe plus. Tu devrait renommer s1ve.txt en s0ve.txt, tu risque d'avoir une erreur sinon.*")
                time.sleep(10)
                sys.exit()
            else:
                #prendre les coordonnees d'une salle au pif
                salle_aleatoire = random.randint(1,6)
                caracteristique_de_la_salle = FloorMaker.FloorBlueprint[salle_aleatoire]

                #affecter ces coordonnéees au joueur
                Player.position_x = caracteristique_de_la_salle["position_x"]
                Player.position_y = caracteristique_de_la_salle["position_y"]
                Player.numero_de_la_salle = salle_aleatoire

                PlayMusicDeLetage()
                print("Le Gardien s'est enfui ! Allez le chercher dans l'étage !")
                Player.player_tags.append("Sort du Combat contre le Gardien")
                Player.affronte_un_boss = False
                Affichage.EntreePourContinuer()

            

    #si ya pas "Combattant le Gardien" dans les tags:
    #   -faire le menu ou on peut parler et tt
    #   -faire option pour combattre
    #   - clear la map de letage, mettre "Combattant le Gardien" dans les tags, commencer le combat
    #   - quand le combat se finit, pas oublier de garder la variable "nombre de vie du gardien"
    #   - quand le combat se finit, on reset le layout de l'étage, sans afficher de description ou autre
    #sinon :
    #   -si on est aux coordonnees 0 0,:
    #       on lance r (ya personne, va chercher le mob)
    #   -sinon:
    #       -on clear la map
    #       -on relance le fight avec les vies du gardien et tout.
    #       -quand combat finit, si les vies du mob == 0:
    #           -fin combat, explications, et puis kaboom.
    #       -sinon:
    #           - on reset la map, on change les coordonnnées du joueur, on l'amène aux nouvelles coordonnées.
    #
    #a faire;
    # -interdire le combat de mob, combat de boss, marchand, sauvegarde, item, recoin, quand tag dans les tags.
    # -bien setup genre 6 salles avec 5 monstres et 1 boss si on tente de screer un etage alors que ya tag dans tags
    # -setup les mobs basiques 

def CheckForKIA():
    if "KIA" in Player.player_tags:
        Player.player_tags.remove("KIA")
        Affichage.ShowDeath()

def PrepareTheVillage():
    #affiche l'arrivée
    StopAllMusic()
    print("[AVATAR DETECTE]")
    print("[REPRISE DU SYSTEME]")
    Affichage.EntreePourContinuer()
    print("Vous avez l'impression de flotter dans le vide.")
    Affichage.EntreePourContinuer()
    print("Soudainement, vous vous sentez écrasé, frappé, jeté contre les barreaux gluants d'une cage invisible.")
    Affichage.EntreePourContinuer()
    if Player.stigma_negatif == "Indigérable":
        print("Vous commencez a sentir vos items et votre être tout entier être réduit en bouillie, transformés en déchets, mais parce que vous êtes Indigérable, tout est entièrement détruit.")
    else:
        print("Vous commencez a sentir vos items et votre être tout entier être réduit en bouillie, transformés en déchets.")
    Affichage.EntreePourContinuer()
    print("Et puis..")
    Affichage.EntreePourContinuer()
    print("..plus rien.")
    Affichage.EntreePourContinuer()
    print("Vous entendez alors un son particulier, celui du vent contre le sol, et le bruit de pas des gens qui déambulent.")
    Affichage.EntreePourContinuer()
    print("Alors, vous ouvrez les yeux.")
    Affichage.EntreePourContinuer()
    time.sleep(2)
    
    #changer le numero et nom de l'étage, amener les characteristiques du perso a 0.
    #garder artefacts, nombre de monstre vaincus, redcoin et gold, materiaux
    Player.numero_de_letage = -1
    Player.nom_de_letage = "Champs du Crépuscule"

    Player.points_de_vie = 0

    Player.points_de_mana = 0
    Player.points_dendurance = 0
    
    Player.taux_coup_critique = 0
    Player.taux_sort_critique = 0
    Player.degat_coup_critique = 0
    Player.degat_sort_critique = 0
    Player.taux_desquive = 0
    Player.sorts_possedes = []
    Player.techniques_possedes = []
    Player.talents_possedes = []
    Player.stigma_bonus = ""
    Player.stigma_negatif = ""
    Player.stigma_positif = ""
    Player.position_x = 0
    Player.position_y = 0


        
    Player.affronte_un_boss = False
    Player.quete = "None"
    Player.possede_la_cle = False
    if FloorMaker.carte_ouverte:
        clear()
    FloorMaker.FloorBlueprint = ({1: {'position_x': 0, 'position_y': 0, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'ENTREE'}, 
                            #base
                            2: {'position_x': 2, 'position_y': 0, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'VILLAGE_QUARTIERS'}, 
                            3: {'position_x': -2, 'position_y': 0, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'VILLAGE_CHAMPS'}, 
                            4: {'position_x': 0, 'position_y': 2, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'VILLAGE_ARENE'}, 
                            5: {'position_x': 0, 'position_y': -2, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'VILLAGE_COMMERCIAL'}, 
                            6: {'position_x': 3, 'position_y': 0, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_QUARTIERS'}, 
                            7: {'position_x': -3, 'position_y': 0, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_CHAMPS'}, 
                            8: {'position_x': 0, 'position_y': 3, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_ARENE'}, 
                            9: {'position_x': 0, 'position_y': -3, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_COMMERCIAL'}, 
                            #chamsp a louest
                            10: {'position_x': -4, 'position_y': 0, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_CHAMPS'}, 
                            11: {'position_x': -5, 'position_y': 0, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'FABRICATEUR'}, 
                            12: {'position_x': -6, 'position_y': 0, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_CHAMPS'}, 
                            13: {'position_x': -4, 'position_y': 1, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_CHAMPS'}, 
                            14: {'position_x': -5, 'position_y': 1, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_CHAMPS'}, 
                            15: {'position_x': -6, 'position_y': 1, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'ANCIEN'}, 
                            16: {'position_x': -4, 'position_y': -1, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_CHAMPS'}, 
                            17: {'position_x': -5, 'position_y': -1, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_CHAMPS'}, 
                            18: {'position_x': -6, 'position_y': -1, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_CHAMPS'}, 
                            19: {'position_x': -7, 'position_y': 0, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'DECHARGE'}, 
                            #arene au nord
                            20: {'position_x': 0, 'position_y': 4, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_ARENE'}, 
                            21: {'position_x': -1, 'position_y': 4, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_ARENE'}, 
                            22: {'position_x': -1, 'position_y': 5, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_ARENE'}, 
                            23: {'position_x': -2, 'position_y': 5, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_ARENE'}, 
                            24: {'position_x': -1, 'position_y': 6, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_ARENE'}, 
                            25: {'position_x': 1, 'position_y': 4, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_ARENE'}, 
                            26: {'position_x': 1, 'position_y': 5, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_ARENE'}, 
                            27: {'position_x': 2, 'position_y': 5, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_ARENE'}, 
                            28: {'position_x': 1, 'position_y': 6, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_ARENE'}, 
                            29: {'position_x': 0, 'position_y': 6, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_ARENE'}, 
                            30: {'position_x': 0, 'position_y': 7, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_ARENE'}, 
                            31: {'position_x': 0, 'position_y': 5, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'ARENE'}, 
                            #zone commerciale au sud
                            32: {'position_x': 0, 'position_y': -4, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_COMMERCIAL'},
                            33: {'position_x': 0, 'position_y': -5, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'BANQUIER'}, 
                            34: {'position_x': -1, 'position_y': -4, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_COMMERCIAL'}, 
                            35: {'position_x': -1, 'position_y': -5, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'SORCIERE'}, 
                            36: {'position_x': -2, 'position_y': -4, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_COMMERCIAL'}, 
                            37: {'position_x': -2, 'position_y': -5, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'ARMURIER'}, 
                            38: {'position_x': 1, 'position_y': -4, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_COMMERCIAL'}, 
                            39: {'position_x': 1, 'position_y': -5, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'MAITRE_ARTEFACT'}, 
                            40: {'position_x': 2, 'position_y': -4, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_COMMERCIAL'}, 
                            41: {'position_x': 2, 'position_y': -5, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'HERBORISTE'}, 
                            #quartiers a lest
                            42: {'position_x': 4, 'position_y': 0, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_QUARTIERS'}, 
                            43: {'position_x': 5, 'position_y': 0, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_QUARTIERS'}, 
                            44: {'position_x': 6, 'position_y': 0, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_QUARTIERS'}, 
                            45: {'position_x': 7, 'position_y': 0, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CHEMIN_QUARTIERS'}, 
                            46: {'position_x': 4, 'position_y': 1, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'MAGE'}, 
                            47: {'position_x': 5, 'position_y': -1, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'JARDIN'}, 
                            48: {'position_x': 6, 'position_y': 1, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'CARTOGRAPHE'}, 
                            49: {'position_x': 7, 'position_y': -1, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'HOTEL'},

                            50: {'position_x': 0, 'position_y': -6, 'marqué sur la carte': False, 'terminé par joueur': False, 'type': 'ANCIENNE'}})

    #transforme le personnage et ses artefacts en materiaux si ce n'est pas le Voyageur
    if Player.stigma_negatif != "Indigérable":
        Player.liste_de_materiaux["Essence de Vitalitée"] = Player.points_de_vie_max // 50
        Player.liste_de_materiaux["Essence de Magie"] = Player.points_de_mana_max // 50
        Player.liste_de_materiaux["Essence de Fortitude"] = Player.points_de_force // 25
        Player.liste_de_materiaux["Essence de Sagesse"] = Player.points_dintelligence // 25
        Player.liste_de_materiaux["Essence de Résistance"] = Player.points_de_defence // 15
        Player.liste_de_materiaux["Essence Dorée"] = Player.nombre_de_gold // 100
        Player.liste_de_materiaux["Essence Carmine"] = Player.nombre_de_red_coin // 10
        Player.liste_de_materiaux["Essence Astrale"] = Player.nombre_de_monstres_tues // 25

        for artefact in Player.liste_dartefacts_optionels:
            if artefact in ARTEFACTMELIORATIF:
                Player.liste_de_materiaux["Fragment Mélioratif"] += 1
            elif artefact in ARTEFACTFATALITE:
                Player.liste_de_materiaux["Fragment de Fatalité"] += 1
            elif artefact in ARTEFACTSOPHIQUE:
                Player.liste_de_materiaux["Fragment Sophiste"] += 1

    else:
        Player.BringBackListeMateriauxToZero()

    Player.liste_dartefacts_optionels = []
    Player.points_de_defence = 0
    Player.points_de_force = 0
    Player.points_dintelligence = 0
    Player.points_de_mana_max = 0
    Player.points_de_vie_max = 0
    Player.nombre_de_gold = 0
    Player.nombre_de_red_coin = 0
    Player.nombre_de_monstres_tues = 0

    if Sove.ModifieTagsDansSove("Checke","Livraison En Attente"):
        Sove.ModifieTagsDansSove("Enleve","Livraison En Attente")
        Sove.ModifieTagsDansSove("Ajout","Livraison Terminée")
    
    #sauvegarde
    Save.SaveTheGameSansAffichage()

    #fin
    Player.player_tags.remove("Fantome")
    PlaySound("wind")

def FuseMaterials(materiau_a, materiau_b):
    mixer.music.set_volume(0.1)
    print("Des bruits d'engrenages en mouvements et de vapeur sous pression se font entendre.")
    print("Puis, tout s'arrete, la porte de la deuxieme cabine s'ouvre, et...")
    Sove.ModifieDechetsDansSove("Enleve", materiau_a, 1)
    Sove.ModifieDechetsDansSove("Enleve", materiau_b, 1)
    for materiau in DICTIONNAIREMATERIAUFUSION:
        recette_fusion = DICTIONNAIREMATERIAUFUSION[materiau]
        if materiau_a in recette_fusion and materiau_b in recette_fusion:
            Sove.ModifieDechetsDansSove("Ajout", materiau, 1)
            PlaySFX("fusion_y")
            time.sleep(5)
            print(f"...il y a quelque chose à l'interieur !")
            Affichage.EntreePourContinuer()
            print(f"Vous obtenez [{materiau}] !")
            Affichage.EntreePourContinuer()
            mixer.music.set_volume(1)
            return None
    PlaySFX("fusion_n")
    time.sleep(5)
    print(f"...il n'y a rien d'utilisable a l'interieur.")
    Affichage.EntreePourContinuer()
    mixer.music.set_volume(1)

class SoveManagement:

    def __init__(self):
        pass

    def ModifieArtefactDansSove(self, type_de_action, artefact):

        donnees_de_s0ve = Observation.GetPermanentThingsFromS0ve()

        chaine_de_caractere = donnees_de_s0ve["Artefact Debloques"]
        liste_de_artefact = ast.literal_eval(chaine_de_caractere)


        if type_de_action == "Ajout":
            liste_de_artefact.append(artefact)

        elif type_de_action == "Checke":
            if artefact in liste_de_artefact:
                return True
            else:
                return False
            
        elif type_de_action == "Donne":
            return liste_de_artefact
            
        donnees_de_s0ve["Artefact Debloques"] = liste_de_artefact

        Observation.SetPermanentThingsToS0ve(donnees_de_s0ve)

    def ModifieRumeursDansSove(self, type_de_action, numero_de_la_rumeur):

        donnees_de_s0ve = Observation.GetPermanentThingsFromS0ve()

        chaine_de_caractere = donnees_de_s0ve["Rumeurs"]
        liste_de_rumeurs = ast.literal_eval(chaine_de_caractere)


        if type_de_action == "Ajout":
            liste_de_rumeurs.append(numero_de_la_rumeur)

        elif type_de_action == "Checke":
            if numero_de_la_rumeur in liste_de_rumeurs:
                return True
            else:
                return False
            
        elif type_de_action == "Donne":
            return liste_de_rumeurs
            
        donnees_de_s0ve["Rumeurs"] = liste_de_rumeurs

        Observation.SetPermanentThingsToS0ve(donnees_de_s0ve)

    def ModifieRecettesDansSove(self, type_de_action, numero_de_la_recette):

        donnees_de_s0ve = Observation.GetPermanentThingsFromS0ve()

        chaine_de_caractere = donnees_de_s0ve["Recettes"]
        liste_de_recettes = ast.literal_eval(chaine_de_caractere)


        if type_de_action == "Ajout":
            liste_de_recettes.append(numero_de_la_recette)

        elif type_de_action == "Checke":
            if numero_de_la_recette in liste_de_recettes:
                return True
            else:
                return False
            
        elif type_de_action == "Donne":
            return liste_de_recettes
            
        donnees_de_s0ve["Recettes"] = liste_de_recettes

        Observation.SetPermanentThingsToS0ve(donnees_de_s0ve)

    def ModifieArtefactProposeDansSove(self, type_de_action, artefact):

        donnees_de_s0ve = Observation.GetPermanentThingsFromS0ve()

        chaine_de_caractere = donnees_de_s0ve["Artefact Proposé"]
        liste_de_artefact = ast.literal_eval(chaine_de_caractere)


        if type_de_action == "Ajout":
            liste_de_artefact.append(artefact)

        elif type_de_action == "Enleve":
            liste_de_artefact.remove(artefact)

        elif type_de_action == "Donne":
            return liste_de_artefact
            
        donnees_de_s0ve["Artefact Proposé"] = liste_de_artefact

        Observation.SetPermanentThingsToS0ve(donnees_de_s0ve)

    def  ModifieActionsConnuesDansSove(self, type_de_action, action="None"):

        donnees_de_s0ve = Observation.GetPermanentThingsFromS0ve()

        chaine_de_caractere = donnees_de_s0ve["Actions Connues"]
        liste_de_actions = ast.literal_eval(chaine_de_caractere)


        if type_de_action == "Ajout":
            liste_de_actions.append(action)

        elif type_de_action == "Enleve":
            liste_de_actions.remove(action)

        elif type_de_action == "Checke":
            if action in liste_de_actions:
                return True
            else:
                return False

        elif type_de_action == "Donne":
            return liste_de_actions
            
        donnees_de_s0ve["Actions Connues"] = liste_de_actions

        Observation.SetPermanentThingsToS0ve(donnees_de_s0ve)
        
    def ModifieTagsDansSove(self, type_de_action, tag):

        donnees_de_s0ve = Observation.GetPermanentThingsFromS0ve()

        chaine_de_caractere = donnees_de_s0ve["Tags Permanents"]
        liste_de_tags = ast.literal_eval(chaine_de_caractere)


        if type_de_action == "Ajout":
            liste_de_tags.append(tag)

        elif type_de_action == "Enleve":
            liste_de_tags.remove(tag)

        elif type_de_action == "Checke":
            if tag in liste_de_tags:
                return True
            else:
                return False

        elif type_de_action == "Donne":
            return liste_de_tags
            
        donnees_de_s0ve["Tags Permanents"] = liste_de_tags

        Observation.SetPermanentThingsToS0ve(donnees_de_s0ve)

    def  ModifieDechetsDansSove(self, type_de_action, objet, nombre=None):

        donnees_de_s0ve = Observation.GetPermanentThingsFromS0ve()

        chaine_de_caractere = donnees_de_s0ve["Déchets"]
        dictionaire_de_dechets = ast.literal_eval(chaine_de_caractere)
        liste_de_dechets = dictionaire_de_dechets

        if type_de_action == "Ajout":
            liste_de_dechets[objet] += nombre
            

        elif type_de_action == "Enleve":
            liste_de_dechets[objet] -= nombre

        elif type_de_action == "Limite":
            if liste_de_dechets[objet] >= nombre:
                return True
            else:
                return False
            
        elif type_de_action == "Donne":
            return liste_de_dechets
            
        elif type_de_action == "Nombre":
            return liste_de_dechets[objet]
            
        donnees_de_s0ve["Déchets"] = liste_de_dechets

        Observation.SetPermanentThingsToS0ve(donnees_de_s0ve)

    def  ModifieLivraisonDansSove(self, type_de_action, objet, nombre=0):

        donnees_de_s0ve = Observation.GetPermanentThingsFromS0ve()

        chaine_de_caractere = donnees_de_s0ve["Livraison"]
        dictionaire_de_dechets = ast.literal_eval(chaine_de_caractere)
        liste_de_dechets = dictionaire_de_dechets

        if type_de_action == "Ajout":
            liste_de_dechets[objet] += 1
            
        elif type_de_action == "Nombre":
            return liste_de_dechets[objet]
        
        elif type_de_action == "Limite":

            if liste_de_dechets[objet] >= nombre:
                return True
            else:
                return False
            
        donnees_de_s0ve["Livraison"] = liste_de_dechets

        Observation.SetPermanentThingsToS0ve(donnees_de_s0ve)

    def  PutInSove(self):
        donnees_de_s0ve = Observation.GetPermanentThingsFromS0ve()  
            
        dictionaire_de_entree = {}
        
        donnees_de_s0ve["Cigogne Blanche"] = dictionaire_de_entree

        Observation.SetPermanentThingsToS0ve(donnees_de_s0ve)

    def  ModifieCigogneBlancheDansSove(self, theme, type_de_action, entree="None"):

        donnees_de_s0ve = Observation.GetPermanentThingsFromS0ve()

        chaine_de_caractere = donnees_de_s0ve["Cigogne Blanche"]
        dictionaire_de_entree = ast.literal_eval(chaine_de_caractere)

        liste_de_entree = dictionaire_de_entree[theme]

        if type_de_action == "Donne":
            return liste_de_entree

        if type_de_action == "Checke":
            if entree in liste_de_entree:
                return True
            else:
                return False

        if type_de_action == "Ajout":

            liste_de_entree.append(entree)

            dictionaire_de_entree[theme] = liste_de_entree

        donnees_de_s0ve["Cigogne Blanche"] = dictionaire_de_entree

        Observation.SetPermanentThingsToS0ve(donnees_de_s0ve)

    def RajouteEntreeAuLivreCigogneBlancheSiOnAPas(self, theme, entree):
        if not self.ModifieCigogneBlancheDansSove(theme,"Checke",entree):
            self.ModifieCigogneBlancheDansSove(theme,"Ajout",entree)


def RecupereMaledictionEnCours(type_of_demand="base"):
    liste_malediction = [
        "Apyre",
        "Infrigérable",
        "Isolant",
        "Arénacé",
        "Anoxique",
        "Exsangue",
        "Impotent",
        "Chronophage",
        "Sparifique",
        "Ascétique",
        "Pur",
        "Ordinaire",
    ]
    if type_of_demand != "base": 
        return liste_malediction
    else:
        liste_tags =  Sove.ModifieTagsDansSove("Donne",None)
        for tag in liste_tags:
            if tag in liste_malediction:
                return tag
        return "Aucun"
    
def RegardeSiBenedictionDisponible(benediction):
    if  Sove.ModifieTagsDansSove("Checke", "Debloque Incandescent") and benediction == "Incandescent":
        return True
    elif  Sove.ModifieTagsDansSove("Checke", "Debloque Glaciaire") and benediction == "Glaciaire":
        return True
    elif  Sove.ModifieTagsDansSove("Checke", "Debloque Conducteur") and benediction == "Conducteur":
        return True
    elif  Sove.ModifieTagsDansSove("Checke", "Debloque Rocailleux") and benediction == "Rocailleux":
        return True
    elif  Sove.ModifieTagsDansSove("Checke", "Debloque Musclé") and benediction == "Musclé":
        return True
    elif  Sove.ModifieTagsDansSove("Checke", "Debloque Sain") and benediction == "Sain":
        return True
    elif  Sove.ModifieTagsDansSove("Checke", "Debloque Omnipotent") and benediction == "Omnipotent":
        return True
    elif  Sove.ModifieTagsDansSove("Checke", "Debloque Accumulateur de Tachyon") and benediction == "Accumulateur de Tachyon":
        return True
    elif  Sove.ModifieTagsDansSove("Checke", "Debloque Polyvalent") and benediction == "Polyvalent":
        return True
    elif  Sove.ModifieTagsDansSove("Checke", "Debloque Materiel") and benediction == "Materiel":
        return True
    elif  Sove.ModifieTagsDansSove("Checke", "Debloque Augmenté") and benediction == "Augmenté":
        return True
    elif  Sove.ModifieTagsDansSove("Checke", "Debloque Extraordinaire") and benediction == "Extraordinaire":
        return True
    else:
        return False

def RecupereBenedictionEnCours(type_of_demand="base"):
    liste_benediction = [
        "Incandescent",
        "Glaciaire",
        "Conducteur",
        "Rocailleux",
        "Musclé",
        "Sain",
        "Omnipotent",
        "Accumulateur de Tachyon",
        "Polyvalent",
        "Materiel",
        "Augmenté",
        "Extraordinaire",
    ]
    if type_of_demand != "base": 
        return liste_benediction
    else:
        liste_tags = Sove.ModifieTagsDansSove("Donne",None)
        for tag in liste_tags:
            if tag in liste_benediction:
                return tag
        return "Aucun"

def RegardeSiEtageCompletementObserve(blueprint):
    for numero_de_salle in blueprint:
        salle_a_checker = blueprint[numero_de_salle]
        if salle_a_checker["type"] in ["ENTREE"]:
            continue
        elif salle_a_checker["marqué sur la carte"] == False:
            return False
    return True

def ColiseumGoto(posx, posy):
    if Sove.ModifieLivraisonDansSove("Limite", "Carte", Player.numero_de_letage - 4) and Sove.ModifieTagsDansSove("Checke","Livraison Terminée"):
        goto(posx, posy)

def PasseDeLivraisonABonus():
    print("")
    liste_de_uppgrade_a_afficher = {}
    for uppgrade in UPPGRADESPOSSIBLES:
        level_de_luppgrade = Sove.ModifieLivraisonDansSove("Nombre", uppgrade, None)
        if level_de_luppgrade != 0:
            liste_de_uppgrade_a_afficher[uppgrade] = level_de_luppgrade

    if len(liste_de_uppgrade_a_afficher) != 0:
        for uppgrade in liste_de_uppgrade_a_afficher:
            if uppgrade not in ["Clé", "Carte", "Emblème de la Fin", "Sacoche"]:
                niveau_de_luppgrade = liste_de_uppgrade_a_afficher[uppgrade]
                print(f"{uppgrade} de niveau {niveau_de_luppgrade}")
                if uppgrade == "Chapeau":
                    gain = 4 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain} points d'intelligence !\n")
                    Player.points_dintelligence += gain
                elif uppgrade == "Boucles d'Oreille":
                    gain = 2 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain}% de chance supplémentaire de faire des sorts critiques !\n")
                    Player.taux_sort_critique += gain
                elif uppgrade == "Collier":
                    gain = 2 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain}% de chance supplémentaire de faire des techniques critiques !\n")
                    Player.taux_coup_critique += gain
                elif uppgrade == "Cotte de Maille":
                    gain = 4 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain} points de défence !\n")
                    Player.points_de_defence += gain
                elif uppgrade == "Bracelet":
                    gain = 4 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain} points de force !\n")
                    Player.points_de_force += gain
                elif uppgrade == "Gants":
                    gain = 3 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain} degats supplementaires lorsque vous effectuez un coup critique !\n")
                    Player.degat_coup_critique += gain
                elif uppgrade == "Anneau":
                    gain = 3 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain} degats supplementaires lorsque vous effectuez un sort critique !\n")
                    Player.degat_sort_critique += gain
                elif uppgrade == "Bottes":
                    gain = niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain}% de chance de faire une esquive !\n")
                    Player.taux_desquive += gain
                elif uppgrade == "Fiole de Sève":
                    gain = 5 * niveau_de_luppgrade
                    print(f"     *Vous buvez immédiatement la concoction et gagnez {gain} points de mana max !\n")
                    Player.points_de_vie_max += gain
                    Player.points_de_vie += gain
                elif uppgrade == "Fiole de Rosée":
                    gain = 5 * niveau_de_luppgrade
                    print(f"     *Vous buvez immédiatement la concoction et gagnez {gain} points de vie max !\n")
                    Player.points_de_mana_max += gain
                    Player.points_de_mana += gain
                elif uppgrade == "Tisane de Racine":
                    gain = 2 * niveau_de_luppgrade
                    print(f"     *Vous buvez immédiatement la concoction et votre corps récupere désormais {gain} points de mana supplémentaires lorsque il regagne des points de mana, et ce pour toute les sources !\n")
                    Player.dictionnaire_duppgrade_qui_necessitent_plus_de_code_pour_fonctionner["Tisane de Racine"] = gain
                elif uppgrade == "Tisane d'Ecorce":
                    gain = 2 * niveau_de_luppgrade
                    print(f"     *Vous buvez immédiatement la concoction et votre corps récupere désormais {gain} points de vie supplémentaires lorsque il regagne des points de vie, et ce pour toute les sources !\n")
                    Player.dictionnaire_duppgrade_qui_necessitent_plus_de_code_pour_fonctionner["Tisane d'Ecorce"] = gain
                elif uppgrade == "Charge de Feu":
                    gain = 5 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain}% de dégat supplémentaire pour vos attaques et sorts de feu !\n")
                    Player.dictionnaire_duppgrade_qui_necessitent_plus_de_code_pour_fonctionner["Charge de Feu"] = gain
                elif uppgrade == "Charge de Glace":
                    gain = 5 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain}% de dégat supplémentaire pour vos attaques et sorts de glace !\n")
                    Player.dictionnaire_duppgrade_qui_necessitent_plus_de_code_pour_fonctionner["Charge de Glace"] = gain
                elif uppgrade == "Charge de Foudre":
                    gain = 5 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain}% de dégat supplémentaire pour vos attaques et sorts de foudre !\n")
                    Player.dictionnaire_duppgrade_qui_necessitent_plus_de_code_pour_fonctionner["Charge de Foudre"] = gain
                elif uppgrade == "Charge de Terre":
                    gain = 5 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain}% de dégat supplémentaire pour vos attaques et sorts de terre !\n")
                    Player.dictionnaire_duppgrade_qui_necessitent_plus_de_code_pour_fonctionner["Charge de Terre"] = gain
                elif uppgrade == "Charge de Chair":
                    gain = 5 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain}% de dégat supplémentaire pour vos attaques et sorts physiques !\n")
                    Player.dictionnaire_duppgrade_qui_necessitent_plus_de_code_pour_fonctionner["Charge de Chair"] = gain
                elif uppgrade == "Charge de Sang":
                    gain = 5 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain}% de dégat supplémentaire pour vos attaques et sorts de sang !\n")
                    Player.dictionnaire_duppgrade_qui_necessitent_plus_de_code_pour_fonctionner["Charge de Sang"] = gain
                elif uppgrade == "Ration Jindagee":
                    gain = 2 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain} feuille(s) jindagee !\n")
                    Player.items_possedes["Feuille Jindagee"] += gain
                elif uppgrade == "Ration Jindagee Raffinée":
                    gain = niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain} fruit(s) jindagee !\n")
                    Player.items_possedes["Fruit Jindagee"] += gain
                elif uppgrade == "Ration Aatma":
                    gain = 2 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain} feuille(s) aatma !\n")
                    Player.items_possedes["Feuille Aatma"] += gain
                elif uppgrade == "Ration Aatma Rafinée":
                    gain = niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain} fruit(s) aatma !\n")
                    Player.items_possedes["Fruit Aatma"] += gain
                elif uppgrade == "Ration Cristalline":
                    gain = 2 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain} crystaux élémentaires !\n")
                    Player.items_possedes["Crystal Elémentaire"] += gain
                elif uppgrade == "Ration d'Hydromel":
                    gain = 2 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain} bouteille(s) d'hydromel !\n")
                    Player.items_possedes["Hydromel"] += gain
                elif uppgrade == "Ration Ambroisie":
                    gain = 2 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain} bouteille(s) d'ambroisie !\n")
                    Player.items_possedes["Ambroisie"] += gain
                elif uppgrade == "Ration Explosive":
                    gain = 2 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain} unité(s) de poudre explosive !\n")
                    Player.items_possedes["Poudre Explosive"] += gain
                elif uppgrade == "Ration Explosive Raffinée":
                    gain = niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain} unité(s) de roche explosive !\n")
                    Player.items_possedes["Roche Explosive"] += gain
                elif uppgrade == "Pack de Fléchettes":
                    gain = 2 * niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain} unité(s) de fléchettes bleues/rouges !\n")
                    Player.items_possedes["Fléchette Rouge"] += gain
                    Player.items_possedes["Fléchette Bleue"] += gain
                elif uppgrade == "Pack de Flèches":
                    gain = niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain} unité(s) de flèches bleues/rouge !\n")
                    Player.items_possedes["Flèche Rouge"] += gain
                    Player.items_possedes["Flèche Bleue"] += gain
                elif uppgrade == "Pack Premier Tour":
                    gain = niveau_de_luppgrade
                    print(f"     *Vous gagnez {gain} assemblage de plusieurs objets a utiliser au premier tour !\n")
                    Player.items_possedes["Fiole de Poison"] += gain
                    Player.items_possedes["Sève d'Exorcisme"] += gain
                    Player.items_possedes["Sève d'Absolution"] += gain
                    Player.items_possedes["Mutagène Rouge"] += gain
                    Player.items_possedes["Mutagène Vert"] += gain
                    Player.items_possedes["Mutagène Bleu"] += gain
                elif uppgrade == "Médaillon de Leprechaun":
                    gain = 5 * niveau_de_luppgrade
                    print(f"     *Vous obtenez {gain}% de chance supplémentaire de gagner un materiau a la fin d'un combat !\n")
                    Player.dictionnaire_duppgrade_qui_necessitent_plus_de_code_pour_fonctionner["Médaillon de Leprechaun"] = gain
                elif uppgrade == "Noyau d'Aurelionite":
                    gain = 10 * niveau_de_luppgrade
                    print(f"     *Vos gains de gold augmentent de {gain}% !")
                    Player.dictionnaire_duppgrade_qui_necessitent_plus_de_code_pour_fonctionner["Noyau d'Aurelionite"] = gain

    print("Une carte magique.\n")

def EnchantementAleatoire():
    liste_de_choix_possibles_sorts_ou_technique = [1, 2]

    liste_techniques_affixables = []
    for technique in Player.techniques_possedes:
        if technique in LISTETECHNIQUES or technique == "Attaque Lourde":
            liste_techniques_affixables.append(technique)
    if len(liste_techniques_affixables) == 0:
        liste_de_choix_possibles_sorts_ou_technique.remove(2)

    liste_sorts_affixables = []
    for sort in Player.sorts_possedes:
        if sort in LISTESORTS or sort == "Missile Arcanique":
            liste_sorts_affixables.append(sort)
    if len(liste_sorts_affixables) == 0:
        liste_de_choix_possibles_sorts_ou_technique.remove(1)
        

    if len(liste_de_choix_possibles_sorts_ou_technique) == 0:
        choix = 0
    else:
        choix = random.choice(liste_de_choix_possibles_sorts_ou_technique)

    
    if choix == 1:
        numero = 1
        for sort in liste_sorts_affixables :
            numero += 1
        choix = random.randint(2, numero)
        sort_choisie = liste_sorts_affixables[(choix - 2)]
        liste_affix = ["~Rouge~", # +2 vie
                    "~Carmin~", # +4 vie
                    "~Violet~", # +2 mana
                    "~Pourpre~", # +4 mana
                    "~Jaune~", # +2 endurance
                    "~Doré~", # +4 endurance
                    "~Lolipop~", # +1 vie mana endurance
                    "~Bubblegum~", # +2 vie mana endurance
                    "~Escargot~", # +1% degat technique
                    "~Limace~", # +1% degat sorts
                    "~Citronnier~", # +0.5 degat critique technique
                    "~Citron~", # +1 degat critique technique
                    "~Cerisier~", # +0.5 degat critique sort
                    "~Cerise~", # +1 degat critique sort
                    "~Mars~", # +0.5% chance de bruler
                    "~Neptune~", # +0.5% chance de geler
                    "~Pluton~", # +0.25% chance de paralyser
                    "~Lune~", # +0.5% chance de lapider
                    "~Mercure~", # +0.5% chance de drain
                    "~Ordre~", # peut bruler
                    "~Aveugle~", # peut geler
                    "~Limitation~", # peut lapider
                    "~Transcendance~", # peut paralyser
                    "~Eveil~", # peut drainer
                    "~Antithèse~", # 15% chance d'arreter le gel
                    "~Chaotique~", # 15% chance d'arreter la brulure
                    "~Tache~", # 15% chance d'arreter la blessure
                    "~Rature~", # 15% chance d'arreter la deconcentration
                    "~Brouillon~", # 15% chance d'arreter la confusion
                    "~Paragraphe~", # 6% chance d'enlever gel + brulure + blessure + deconcentration + confusion
                    "~Magnum-Opus~", # 6% chance de donner numero_etage * 5 golds
                    "~Agrume~", # 6% chance d'être béni
                    "~Raisin~", # 6% chance d'être en folie
                    "~Durian~", # 6% chance d'être en furie
                    "~Gingembre~", # 6% chance d'être jindagee 2 tours
                    "~Mandragore~", # 6% chance d'être aatma 2 tours
                    "~Nigredo~", # 2% chance reprendre full vie
                    "~Albédo~", # 2% chance reprendre full mana
                    "~Citrinitas~", # 2% chance reprendre full endurance
                    "~Chrysalide~", # 2% chance devenir invincible 2 tours
                    ]
        #enelever les effets elementaires en doublons
        sort_choisi_transformee_en_liste = list(sort_choisie.split())
        if "Faisceau" in sort_choisi_transformee_en_liste :
            liste_affix.remove("~Limitation~")
        elif "Thermosphère" in sort_choisi_transformee_en_liste :
            liste_affix.remove("~Ordre~")
        elif "Pic" in sort_choisi_transformee_en_liste :
            liste_affix.remove("~Aveugle~")
        elif "Création" in sort_choisi_transformee_en_liste :
            liste_affix.remove("~Transcendance~")
        elif "Dance" in sort_choisi_transformee_en_liste :
            liste_affix.remove("~Eveil~")

        nombre_aleatoire = random.randint(0, (len(liste_affix) - 1))
        affix_choisi = liste_affix[nombre_aleatoire]

        Player.sorts_possedes.remove(sort_choisie)
        sort_choisie += f" {affix_choisi}"
        Player.sorts_possedes.append(sort_choisie)
        Save.SaveTheGameSansAffichage()

    elif choix == 2 :
        numero = 1
        for tut in liste_techniques_affixables :
            numero += 1
        choix = random.randint(2, numero)
        technique_choisie = liste_techniques_affixables[(choix - 2)]
        liste_affix = ["~Rouge~", # +2 vie
                    "~Carmin~", # +4 vie
                    "~Violet~", # +2 mana
                    "~Pourpre~", # +4 mana
                    "~Jaune~", # +2 endurance
                    "~Doré~", # +4 endurance
                    "~Lolipop~", # +1 vie mana endurance
                    "~Bubblegum~", # +2 vie mana endurance
                    "~Escargot~", # +1% degat technique
                    "~Limace~", # +1% degat sorts
                    "~Citronnier~", # +0.5 degat critique technique
                    "~Citron~", # +1 degat critique technique
                    "~Cerisier~", # +0.5 degat critique sort
                    "~Cerise~", # +1 degat critique sort
                    "~Mars~", # +0.5% chance de bruler
                    "~Neptune~", # +0.5% chance de geler
                    "~Pluton~", # +0.25% chance de paralyser
                    "~Lune~", # +0.5% chance de lapider
                    "~Mercure~", # +0.5% chance de drain
                    "~Ordre~", # peut bruler
                    "~Aveugle~", # peut geler
                    "~Limitation~", # peut lapider
                    "~Transcendance~", # peut paralyser
                    "~Eveil~", # peut drainer
                    "~Antithèse~", # 15% chance d'arreter le gel
                    "~Chaotique~", # 15% chance d'arreter la brulure
                    "~Tache~", # 15% chance d'arreter la blessure
                    "~Rature~", # 15% chance d'arreter la deconcentration
                    "~Brouillon~", # 15% chance d'arreter la confusion
                    "~Paragraphe~", # 6% chance d'enlever gel + brulure + blessure + deconcentration + confusion
                    "~Magnum-Opus~", # 6% chance de donner numero_etage * 5 golds
                    "~Agrume~", # 6% chance d'être béni
                    "~Raisin~", # 6% chance d'être en folie
                    "~Durian~", # 6% chance d'être en furie
                    "~Gingembre~", # 6% chance d'être jindagee 2 tours
                    "~Mandragore~", # 6% chance d'être aatma 2 tours
                    "~Nigredo~", # 2% chance reprendre full vie
                    "~Albédo~", # 2% chance reprendre full mana
                    "~Citrinitas~", # 2% chance reprendre full endurance
                    "~Chrysalide~", # 2% chance devenir invincible 2 tours
                    ]
        #enelever les effets elementaires en doublons
        technique_choisie_transformee_en_liste = list(technique_choisie.split())
        if "Lance" in technique_choisie_transformee_en_liste :
            liste_affix.remove("~Limitation~")
        elif "Bô" in technique_choisie_transformee_en_liste :
            liste_affix.remove("~Ordre~")
        elif "Katana" in technique_choisie_transformee_en_liste :
            liste_affix.remove("~Aveugle~")
        elif "Corne" in technique_choisie_transformee_en_liste :
            liste_affix.remove("~Transcendance~")
        elif "Dague" in technique_choisie_transformee_en_liste :
            liste_affix.remove("~Eveil~")

        nombre_aleatoire = random.randint(0, (len(liste_affix) - 1))
        affix_choisi = liste_affix[nombre_aleatoire]
        Player.techniques_possedes.remove(technique_choisie)
        technique_choisie += f" {affix_choisi}"
        Player.techniques_possedes.append(technique_choisie)
        Save.SaveTheGameSansAffichage()

    

def DonneSouvenirsDeTechniqueEtSorts():
    liste_action_souvenues = Sove.ModifieActionsConnuesDansSove("Donne")
    if len(liste_action_souvenues) != 0:
        print("Vous prenez un instant pour vous souvenir de ce que vous avez vu dans le Colysée du Champ du Crépuscule...")
        Affichage.EntreePourContinuer()
        print("Vous vous rappelez...")
        for action in liste_action_souvenues:
            if action in LISTETECHNIQUES:
                print(f"...de la technique [{action}] !")
                Player.techniques_possedes.append(action)
            if action in LISTESORTS:
                print(f"...du sort [{action}] !")
                Player.sorts_possedes.append(action)
        Affichage.EntreePourContinuer() 

DICTIONNAIREDESCRIPTIONCIGOGNEBLANCHE = {
    "Les Salles" : {
        "salle" : "description",
        "salle" : "description",
        "salle" : "description",
        "salle" : "description",
        "salle" : "description",
        "Saloon du Croissant de Lune" : "description",
        "Boutique du Voleur d'Artefacts" : "description",
        "Jardin du Directeur" : "description",
        "Temple du Dieu Inconnu" : "description",
        "Monticule de l'Ancien" : "description",
        "La Machine" : "description",
        "Gradins des Ames" : "description",
        "Rue du Chuchoteur de Carte" : "description",
        "Tour de la Mage Hollistique" : "description",
        "Banque du Village" : "description",
        "Boutique de l'Herboriste" : "description",
        "Boutique de la Sorciere" : "description",
        "Boutique des Armuriers" : "description",
        "Décharge" : "description",
        "Marque de Tromperie" : "description",
        "Puits à Souhaits" : "description",
        "L'Arene" : "description",
        "Salle à Monstre Dopé" : "dexcription",
        "Salle Vide" : "description",
        "Salle du Boss" : "Bizarre...On dirait que la salle du boss n'est qu'un état de l'arène, après qu'un candidat possédant la clé touche la grille menant a l'étage en dessous.\nOu donc attend le boss pendant ce temps ?",
        "Salle à Monstre" : "Des monstres similaires a ceux que l'on voie dans l'arène.\nSi on considère que l'acte de frapper le sol est la seule chose qui puisse creer un monstre, peut etre que ceux la sont des survivants qui ont tué un candidat avant de s'enfuir pour au final errer dans l'étage...",
        "Tas de Gold" : "Un tas de gold immaculé arrangé de manière quasi-parfaite.\nMais qui donc laisse ces richesses ici ?",
        "Caisse à Item" : "Une vieille caisse de bois vermoulu contenant des objets sous la forme d'un booster pack.\nLe symbole du royaume est placardé sur le coté, peut etre un reste de précédentes expeditions ordonnées par le Roi ?",
        "Mimique" : "On dirait un coffre avec des jambes longues, sur lequel trone divers colliers et bijou posés négligemment sur le bois.\nOn dirait aussi que cette horreur a été priée et décorée par des fanatiques.",
        "Piege" : "Des barres de métal coulissante, projetée avec grande rapiditée sur les mains cupides qui touchent a ce qu'elle ne devrait pas.\nLes barres sont dépliables comme une matraque de police, et propulsées a l'aide de poudre a canon, alors que ces deux technologies n'étaient pas encore répendues a l'époque de la création du Colyseum.",
        "Ruine de la Cigogne Bleue" : "Une salle emplie de décombre dans laquelle se trouve le livre de la Cigogne Bleue.\nGrace a lui, on peut apprendre des sorts que l'on enregistre dans le livre de la Cigogne Rouge.\nMais d'une manière étrange, certains artefacts surpuissants peuvent aussi se retrouver dedans.\nPeut être qu'en sortant et re-rentrant de la salle, on pourrait faire apparaitre d'autres choses ?",
        "Fontaine Pétrifiante" : "Une jolie fontaine de marbre, décorée, sur laquelle se trouve une fée en état de biostase.\nSi l'on boit son eau après avoir conquit les monstres de l'arène ainsi que son boss, on gagne un énorme bonus a ses caractéristiques.",
        "Oasis de la Fortune" : "Une grande flaque d'eau qui semble disparaitre lorsque l'on s'approche d'elle.\nEn jettant des golds, on gagne des mutagène avec plus ou moins de raretée, que l'on peut augmenter pour un prix.\nL'inscription dans le reflet de l'étang me fait penser au *motto* d'une grande famille de marchand du Japon, qui assassinaient les clients qui touchaient le gros lot...",
        "Musée de la Magie" : "Une exposition de bidules et de choses magiques qui sont expliqués avec beaucoup de détails.\nLa géométrie de l'endroit semble se replier sur elle même, et la seule constante entre chaque allées est une armée de statue en or autour d'une fausse pierre philosophale.\nJe n'aimerais pas échanger toute ma vitalitée contre de l'or, ca doit etre douloureux de se changer en statue.",
        "Automate Rouillé" : "On dirait la machine dans *Le magicien d'Oz*, sauf qu'elle a l'air beaucoup plus vieille que la plupart des boss.\nElle parle de choses qui n'existent plus, et n'ont d'ailleurs jamais existé.\nComme si elle venait d'ailleurs...",
        "Boutique de Mariette" : "Mariette, vampire sympathique, propose dans sa boutique des objets absoluments divins, en échange d'un peu de sang et de caractéristiques.\nQuand j'essaye d'acheter des choses alors que je n'ai pas assez, elle me donne toujours un remède gratuit !",
        "Cage de la Cigogne Noire" : "Une cage éventrée sur laquelle sont gravés les sanglots de la personne qui y était captive, et un livre a moitié brulé qui fait oublier les techniques et sorts non enchantés contre plus de caracteristiques.\nTenir ce livre me fait ressentir des choses indescriptibles, et une énorme dose de culpabilité.",
        "Bibliothèque Royale" : "Un simple extrait de la Bibliothèque du Roi, contenant des ouvrages de tout nature et de toute fonction, comme le livre de la Cigogne Rouge dans lequel on peut inscrire des sorts que l'on retrouvera dans le livre de la Cigogne bleue.\nLa recette de cookie y est absolument divine !",
        "Demeure d'Alfred" : "Une masure entre les mondes, entre les dimensions, dont mon esprit ne peut comprendre la topographie.\nOn peut y échanger golds contre artefacts venant de la réserve personnelle d'Alfred, mais je me pose plutot une autre question : Si chaque portes derriere lui mène a un étage du Colyseum, pourquoi y en a-t-il 11 ?",
        "Porte Divine" : "Une porte spéciale derriere la cascade d'une salle qui reproduit deux champs enserrant une rivière.\nLes symboles gravés sur la pierre sont de la même facture que les fresques...",
        "Salle à Clef" : "paragraphe1",
        "Les Leys" : "paragraphe2",
        "Imbueur d'Experience" : "paragraphe3",
        "Imbueur de Connaissance" : "paragraphe4",
        "Colline aux Eclairs" : "paragraphe5",
        "Laboratoire" : "paragraphe6",
        "Monolith Marchand" : "paragraphe2",
        "Trou Bleu" : "paragraphe3",
        "Atelier" : "paragraphe4",
        "Brazier de Caeruleum" : "paragraphe5",
        "Brazier de Kókkinos" : "paragraphe6",
        "Brazier de Mávros" : "paragraphe6",
        "Brazier de Viridis" : "paragraphe6",
        "Coffret Végétal" : "paragraphe6",
        "Coffret de Pirate" : "paragraphe1",
        "Coffret de l'Empereur" : "paragraphe2",
        "Coffret de Folie" : "paragraphe3",
        "Coffret Colatéral" : "paragraphe4",
        "Autel de l'Innomable" : "paragraphe4",
        "Coffret de l'Obélisque" : "paragraphe5",
        "Mechanismes Anciens - Arbre d'Abondance" : "paragraphe6",
        "Mechanismes Anciens - Distributeur Coup-De-Pouce" : "paragraphe1",
        "Mechanismes Anciens - Levier Insondable" : "paragraphe2",
        "Mechanismes Anciens - Prison des Ames" : "paragraphe3",
        "Mechanismes Anciens - Buffet Equivalent" : "paragraphe4",
        "Mechanismes Anciens - Canigou" : "paragraphe5",
        "Mechanismes Anciens - Super-Chargeur" : "paragraphe6",
        "Mechanismes Anciens - Jaccuzi" : "paragraphe6",
        "Mechanismes Anciens - Bol de Malchance": "paragraphe6",
        "Mechanismes Anciens - Plaque de Pression" : "paragraphe6",
        "Lame dans la Pierre : Mirage" : "paragraphe6",
        "Lame dans la Pierre : Execution" : "paragraphe6",
        "Joyau de l'âme : Haine" : "paragraphe6",
        "Joyau de l'âme : Regret" : "paragraphe6",
    },
    "Les Artefacts" : {
        "Graine de Grenade": ("Cette graine d'un fruit apprécié des dieux augmente votre vitalité.\nVie + 15"),  # vie t
        "Eau du Styx": ("Cette fiole imprégnée de l'essence des morts augmente votre réservoir de mana.\nMana + 15"),  # mana t
        "Aile de Cire d'Icare": ("Ce bout du chef d'oeuvre de Dédale augmente votre capacité a esquiver les attaques.\nTaux esquive + 6"),  # esquive t
        "Griffe de Lion": ("Cette griffe contient l'essence d'une bête féroce abattue par le Roi Singe, et augmente votre attaque.\nAttaque + 8"),  # attaque t
        "Statue d'Angerona": ("Angerona, la déesse de la Concentration, veille sur tout ses fidèles, et vous octroie la vue qui discerne les faiblesses.\nTaux coup critique + 6, Taux sort critique + 6"),  # taux critique t
        "Collier de Mithril": ("Ce collier est le tout premier artefact crée par les tout premiers nains, pour résister aux attaques des tout premiers monstres pendant l'Age du Chaos.\nDefence + 8"),  # defence t
        "Elixir du Sage": ("Cette bouteille contient toutes les réalisations du doyen de la Grande Bibliothèque d'Alexandrie, sous forme liquide.\nIntelligence + 8"),  # intelligence
        "Petite Pierre Philosophale": ("Ce prototype permet de transmuter une quantitée limitée de choses en or.\nGold + 1000"),  # gold t
        "Anneau Cramoisi": ("Cet anneau forgé pendant la Guerre de l'Interdit a bu le sang de nombreux dieux et déesses afin de conferer leur endurance a son porteur.\nEndurance + 20"),  # endurance t
        "Orbe de Disruption": (
            "Cet orbe vient de l'Ains Terra Net, le monde des voyageurs, et perturbe le mana environnant.\nLes monstres avec un réservoir de mana brisé perdent 10 pv supplémentaires par tour !"),  # degat quand ennemi plus mana
        "Plume de Munin": ("Cette plume vient de Munin, un des corbeaux d'Odin qui voyage a travers les neufs mondes, et confère a son porteur une certaine aisance a esquiver les attaques.\nTaux esquive + 6"),  # esquive t
        "Collier des Brísingar": ("Ce collier porté par Freya élève le corps et son réservoir de mana a une condition optimale pour le rendre plus charismatique.\nVie + 8, Mana + 8"),  # vie et mana t
        "Draupnir": ("D'après les légendes, cet anneau est sensé se multiplier par 9 toute les 9 nuits.\nIl n'a pas l'air de réagir pour le moment..."),  # gold t
        "Magatama": (
            "Cette perle passée de générations en générations par les plus grands empereurs du monde contient une partie de leur âme et confère a son porteur de multiples augmentations.\nAttaque + 2, Defence + 2, Intelligence + 2, Vie + 4, Mana + 4, Endurance + 5"),  # attaque, intelligence, defence, vie, mana, endurance
        "Voile de Ino": ("Le voile porté brièvement par Ulysse, et qui protege des attaques (permanent) et de la mort (une seule fois).\nDefence + 2"),  # defence t
        "Megingjord": ("La ceinture de Thor qui lui donne une grande puissance pendant les moments critiques, ainsi que la capacité de soulever son marteau.\nDegat coup critique + 10, Degat sort critique + 10"),  # degat critiques t
        "Manne Céleste": ("La seule source de nourriture des hébreux pendant 40 ans, gracieusement offerte par le Ciel, et qui leur a permit de marcher jusqu'a trouver leur terre d'adoption.\nEndurance + 10, Vie + 10"),  # endurance + vie t
        "Nœud Gordien": ("Le cordage compliqué défait seulement par le Maitre de l'Asie, mais finalement tranché par Alexandre le Grand, et qui a gardé depuis une partie de sa force.\nAttaque + 5"),  # attaque t
        "Don de Terre": ("Un simple sac contenant les Redcoins d'une divinité de la Terre.\nRed coin + 2"),  # donne redcoin
        "Don de Foudre": ("Un simple sac contenant les Redcoins d'une divinité de la Foudre.\nRed coin + 2"),  # donne redcoin
        "Don de Feu": ("Un simple sac contenant les Redcoins d'une divinité du Feu.\nRed coin + 2"),  # donne redcoin
        "Don de Glace": ("Un simple sac contenant les Redcoins d'une divinité de Glace.\nRed coin + 2"),  # donne redcoin
        "Don Sanguin": ("Un simple sac contenant les Redcoins d'une divinité de Sang.\nRed coin + 2"),  # donne redcoin
        "Don Physique": ("Un simple sac contenant les Redcoins d'une divinité de l'Effort.\nRed coin + 2"),  # donne redcoin
        "Don Astral": ("Un simple sac contenant les Redcoins d'une divinité de l'Ame.\nRed coin + 2"),  # donne redcoin
        "Nimbe Divine": ("Un cadeau des dieux symbolisant la divinité et la sacralité de ceux qui ont accomplit de grandes choses.\nIntelligence + 5"),  # intelligence t
        "Couronne Sacrée": (
            "La Couronne d'Epine de Jésus, un symbole absolu de dévotion, l'incarnation de l'esprit au dessus du corps.\nVos points d'endurance peuvent maintenant aller dans le négatif."
        ),  # endurance peut aller dans le négatifs
        "Gant de Midas": (
            "Le gant isolant d'un roi de Phrygie qui transformait tout ce qu'il touche en or.\nRéagit à la magie dans un crystal élémentaire pour enlever l'altération d'état [Gelure]."
        ),  # enleve la gelure quand utilise un crystal élémentaire
        "Gant d'Héphaïstos": (
            "Le gant isolant d'un dieu des Arts de la Forge.\nRéagit à la magie dans un crystal élémentaire pour enlever l'altération d'état [Brulure]."
        ),  # enleve la brulure quand utilise un crystal élémentaire
        "Plaquette du Souvenir": (
            "Une plaquette sur laquelle sont inscrites les postures d'une ancienne version de l'attaque légère, trop forte pour son propre bien.\nL'Attaque Légère fait maintenant bien plus de dégâts."
        ),  # degats de l'attaque légère * 3
        "Monocle de Vérité": (
            "Une race de servants royaux travaillant dans l'ombre, surentrainés, et massacrés par leurs maitres apeurés.\nCe bijou magique né de leur torture vous fait trouver 5 golds par nouvelle salle observée (incompatible avec le Schmilblick.)"
        ),  # gagne 5 gold quand observe salle
        "Sabre du Roi de Glace": (
            "Un bout de glace a moitié fondu, ayant appartenu a un Roi reposant dans sa tombe, inutilisable en combat.\nSa magie vous protège cepandant des pièges."
        ),  # immunisé face aux pièges
        "Bocle de Philoctète": (
            "Un petit bouclier a fixer au niveau de la paume, ayant appartenu a un faiseur de légende.\nVotre défence augmente encore plus lorsque vous vous protégez."
        ),  # defence quand se protege * 1.5
        "Ecaille d'Ouroboros": (
            "L'écaille d'un divin serpent signifiant le renouveau et l'infini.\nVous regagnez 2 points de vie a chaque utilisation de sorts."
        ),  # Rend 2 pv par utilisation de sort
        "Serment d'Heimdall": (
            "La marque du serment d'un dieu omniscient envers le peuple qui a continué a le prier dans le pire des moments.\nIl y a de très faibles chance qu'un sort utilise son mana au lieu du votre."
        ),  # 3% de chance de ne pas utiliser de mana quand jette un sort
        "Masque d'Oblivion": (
            "Un masque blanc, sans expressions, qui semble faire oublier la présence même de son porteur.\nLa fuite d'un combat normal est garantie."
        ),  # fuite garantie
        "Chapelet de Moine": (
            "Le chapelet ayant appartenu a un pelerin faisant route vers l'Ouest, accompagné d'un roi singe, un porc-démon, et un moine de sable.\nVous gagnez l'altération d'état [Béni] après avoir passé votre tour. La prochaine attaque sera alors critique."
        ),  # beni quand on passe son tour
        "Oeuil de Phénix": (
            "Une gemme représentant l'oeil d'un phénix, dans lequel on peut voir une tempête de feu noir figée.\nVous reprenez tout vos points de mana lors d'une résurrection."
        ),  # Reprend 100% mana quand resurection
        "Echarde de Pinocchio": (
            "Un éclat de la poupée de bois qui trompe la réalitée elle même avec ses mensonges.\nVous avez une très très faible chance de revenir a la vie lorsque vous mourrez, même sans objet pour."
        ),  # Faible pourcentage de chance de ne pas mourir
        "Voeu Cristallisé": (
            "La forme cristallisée du voeu du plus monstreux des hommes qui n'a formulé qu'une seule demande au génie en face de lui : Devenir une meilleure personne.\nVotre stigma négatif disparait a son contact."
        ),  # Efface le stigma négatif
        "Haricot Magique": (
            "La graine d'une plante monstreuse amenant son planteur dans une dimension remplie de ses semblables, affamés et en manque de nutriments, cachée dans les nuages.\nSes racines tentaculaires cherchant le sang ne peuvent être stoppées que par une lame plantée dans la graine originelle.\nInvoque des roches depuis sa dimension d'origine, augmentant les dégâts de l'effet [Lapidation]."
        ),  # 20% de degats supplémentaires par lapidation
        "Miette de Pain Congelée": (
            "La seule trace d'enfants emmenés dans les sombres forêts du continent pour y être perdus par leurs parents en manque d'argent.\nLa rancoeur d'âmes pures englouties par ce qui se cache dans les bois fait durer l'altération d'état [Gelure] pendant 2 tours supplémentaires."
        ),  # gelure reste 2 tours de plus
        "Chaperon Rouge": (
            "Un vêtement traditionnel médiéval, dont l'interieur est marqués de profondes griffures.\nRéduit le cout en vie des techniques lorsque vous êtes sous l'effet de altération d'état [Blessé]."
        ),  # Cout en vie reduit quad on est blessé
        "Morceau de Plomb": (
            "Un morceau de plomb en forme de goutte, appartenant a un soldat de plomb lancé dans les braises du feu qui a brulé son amante : une danseuse de papier.\nLes échos de l'amour profond qu'il a ressenti dans ses derniers moments aident a rester concentré, et réduit le malus de mana de l'altération d'état [Déconcentré]."
        ),  # Cout en mana reduit quand déconcentré
        "Bague de l'Âne": (
            "La bague d'une princesse fiancée a son propre père a son insu, que ce dernier a pu reconnaitre avant de finaliser l'union incestueuse.\nVos pensées s'éclaircissent lorsque vous tenez l'anneau, et l'altération d'état [Confus] ne vous affecte plus."
        ),  # Confusion s'arrete en 1 tour
        "Pièce Fondue": (
            ("Une pièce de monnaie représentant la vengeance, maudissant les ennemis de son porteur.\nLes coups critiques maudissent les ennemis, les ennemis maudits perdent 2 pm par tour.")
        ),
        "Tiare de Suie": (
            ("Un bibelot vénéré par un clan de voleur, porté par sa dernière cheffe pendant un régicide.\nAccorde la bénédiction du feu sacré a son porteur pour chaque coups esquivés.")
        ),
        "Chaine de Main": (
            ("Un bijou magique qui se porte au niveau des mains, et qui transforme une prothèse en véritable main connectée au système nerveux.\nLes sorts critiques font deux fois plus de dégâts.")
        ),
        "Larme d'Yggdrasil": (
            ("Une perle de sève venant d'un arbre magestueux qui communique une grande tristesse a ceux qui dorment sous ses branches.\nEn combat, les feuilles et fruits Jindagee et Aatma durent 2 fois plus longtemps")
        ),
        "Collier de Nephilim": (
            ("Un artefact témoignant de l'amour entre un paysant devenu démon et une papesse devenue ange, laissée a leur enfant avant de mourir.\nRecouvrir des pm permet de recouvrir des pv, avec un ratio 2/1 (2pm regagnés ==) 1 pv regagné en plus)")
        ),
        "Cape Victorieuse": (
            ("Une cape macabre cousue avec les fils d'un drapeau pirate et les ailes du Ministre du Mana.\nChaque ennemi tué augmente de 0.5% les dégâts totaux.")
        ),
        "Schmilblick": (
            ("Un bidule bizarre crée par une inventrice farfelue.\nA l'entrée d'un nouvel étage, toutes ses salles sont directement dessinées sur la carte (annule les effets du Monocle de Vérité)")
        ),
        "Contrat de Travail": (
            ("Un bout de papier promettant la puissance aux économes afin qu'ils ne se fassent plus martyriser par le système.\nVous gagnez 2% de dégâts totaux supplementaire par paquets de 50 pièces possédé.")
        ),
        "Dessin Nostalgique": (
            ("Un dessin au charbon d'un vieil homme en plein sommeil, adossé contre une louve.\nPasser son tour donne l'altération d'état *Concentration* pendant 2 tours, qui réduit le nombre de pm nécéssaire pour chaque sorts.")
        ),
        "Vide Interieur": (
            ("Un sentiment de malaise, comme si vous étiez passé a coté de quelque chose, et que votre aventure avec ce personnage n'a pas livré tout ses secrets.\nEnlève le stigma négatif [Incontrollable], ainsi que 15 points de mana maximum.")
        ),
        "Badge Terni": (
            ("Un morceau de métal terni par le temps, les éléments, et les tentations, mais qui reste solide et droit.\nRéduit les prix du marchand de 30%, lorsque il ne reste plus d'ennemis a affronter dans l'arène de l'étage en cours (boss compris).")
        ),
        "Perle de Pluie": (
            ("Un crystal serein, symbole de la libération des chaines de l'esprit.\nChance de faire un sort critique : +33%.")
        ),
        "Syra": (
            ("Une verre divin de lait fermenté apprécié par un certain dieu nordique jeté hors de son throne par une *valkyrie inutile au combat*.\nLes nouvelles techniques apprises donnent 10pm max supplémentaires.\nLes nouveaux sorts appris donnent 10pv max supplémentaires.")
        ),
        "Pin's Extincteur": (
            ("Un joli pin's a accrocher sur un vêtement, représentant un extincteur rouge.\nLorsque l'effet Brulûre se termine, redonne 10pv et 10pm.")
        ),
        "Bandeau Teinté": (
            ("Une relique de Thémis, l'esprit de la Justice, marqué d'un curieux éclat doré.\nEn combat, vous gagnez 1 pièce a chaque tours.")
        ),            
        "Hors Stock": (
            ("Un petit bout de papier sur lequel est écrit *Plus d'artefact a donner*.\nNe fait rien.")
        ),  
        "Âme de la Bête": (
            ("Un reste de quelque chose que vous ne pouvez pas décrire.\nVous gagnez 5 points de force !")
        ), 
        "Ecaille de la Bête": (
            ("Le dernier témoin de l'existence d'une bête féroce dans le Coliseum, laissée derriere a la poursuite de la liberté.\nVous gagnez 10 points de défence !")
        ), 
        "Lame Spectrale": (
            ("Une lame misérable, souillée par la sève malade et l'écume des jours passés.\nLorsqu'un ennemi brise son réservoir de mana, vous retrouvez jusqu'à 30% de vos points de mana maximum !")
        ), 
        "Marque du Tyrant": (
            ("Un symbole potent du roi aux yeux bleu qui prend tout ce que ses sujets lui offrent. \nLorsque vous finissez un combat avec toute votre vie, vous gagnez un point de vie max supplémentaire !")
        ), 
        "Jade Impardonnable": (
            ("La cristallisation de centaines d'années de culpabilité.\nLorsque vous passez votre tour avec tout vos points de mana, vous entrez dans un état de folie pendant 1 tour !")
        ), 
        "Basalte Immonde": (
            ("Une roche impure, ayant absorbée les joies d'une colère sans limite pendant des centaines d'années.\nLorsque vous passez votre tour avec tout vos points de mana, vous entrez dans un état de furie pendant 1 tour !")
        ), 
        "Char Leclerc 3ème Génération à Dispositif GALIX, Canon Principal 120mm et Armement Secondaire à Mitrailleuse 12,7 mm Coaxiale et Mitrailleuse de 7,62 mm en Superstructure": (
            ("Une authentique réplique d'un char d'assaut moderne, a l'échelle 1/100eme.\nFait de gros dégâts aux ennemis au début du combat.")
        ), 
        "Element [Foudre] Surchargé": (
            ("Moins un artefact, et plus un effet, obtenu après avoir bu une étrange boisson gazeuse.\nL'élément [Foudre] à plus de chance de paralyser !")
        ), 
        "Element [Feu] Surchargé": (
            ("Moins un artefact, et plus un effet, obtenu après avoir bu une étrange boisson pimentée.\nL'élément [Feu] à plus de chance de bruler !")
        ), 
        "Element [Terre] Surchargé": (
            ("Moins un artefact, et plus un effet, obtenu après avoir bu un étrange breuvage au cacao.\nL'élément [Terre] à plus de chance d'infliger la lapidation !")
        ), 
        "Element [Glace] Surchargé": (
            ("Moins un artefact, et plus un effet, obtenu après avoir bu un étrange sirop a la menthe.\nL'élément [Glace] à plus de chance de geler !")
        ), 
        "Element [Sang] Surchargé": (
            ("Moins un artefact, et plus un effet, obtenu après avoir bu une boisson orange a la texture étrange.\nL'élément [Sang] à plus de chance de faire un drain !")
        ), 
        "Element [Corps] Surchargé": (
            ("Moins un artefact, et plus un effet, obtenu après avoir bu un étrange smoothie protéiné. \nVous reprenez 4 points d'endurance supplémentaire quand vous ne faites pas de techniques !")
        ), 
        "Element [Ame] Surchargé": (
            ("Moins un artefact, et plus un effet, obtenu après avoir bu un dégoutant alcool de poire. \nGagner un combat fait augmenter le compteur de monstres tués de 2 !")
        ), 
        "Médaillon de Platine": (
            ("Un magnifique médaillon de platine estampillé avec le symbole des traders dimensionels (tm).\nLes objets du marchand coutent 30% moins cher !")
        ), 
        "Totem de la Force": (
            ("Un totem en bois rouge, don divin d'un feu ancestral contre une offrande remplie de vitalité.\nVous commencez tout les combats avec l'effet [Jindagee] pendant 3 tours !")
        ), 
        "Totem de la Sagesse": (
            ("Un totem en bois bleu, don divin d'un feu ancestral contre une offrande remplie de spiritualité.\nVous commencez tout les combats avec l'effet [Aatma] pendant 3 tours !")
        ), 
        "Totem du Courage": (
            ("Un totem en bois vert, don divin d'un feu ancestral contre une offrande remplie de défiance.\nVous commencez tout les combats avec une petite augmentation aléatoire d'appliquer un effet élémentaire !")
        ), 
        "Regard de la Bête": (
            ("La marque psychologique indélébile d'un prédateur sur sa proie. \nCe n'est pas vraiment un artefact, mais le stress a fait battre votre coeur tellement vite que vous gagnez 4 points d'endurance !")
        ), 
        "Epée de Damocles": (
            ("Une épée suintant l'anxiété, ayant appartenue a un ancien roi.\nLes dégâts de vos techniques augmentent de 25%, mais il y a une faible probabilité que l'artefact vous tombe dessus, se brisant sur votre crane et vous infligeant de lourds dégâts.")
        ), 
        "Morceau d'Ether Fragile": (
            ("Un catalyste pour les sorts très fragile, extrait directement de la fabrique de la réalité.\nLes dégâts de vos sorts augmentent de 25%, mais il y a une faible probabilité que l'artefact se brise spontanément, vous vidant alors de tout vos points de mana.")
        ), 
        "Eau Bénite": (
            ("Une fiole légendaire devant laquelle des papes dévoués ont prié jours et nuits pendant 50 ans d'affilée.\nVous avez une faible chance d'être béni par le Feu Divin à la fin de chaque tours.")
        ), 
        "Bandeau Catharsis": (
            ("Un bandeau magique a se mettre devant les yeux, afin d'affuter les sens.\nVos chances d'esquive augmentent, ainsi que les dégats que l'on vous inflige.")
        ), 
        "Charbon Primordial": (
            ("Un reste du tout premier feu de bois, enseigné par Promethée aux humains.\nL'effet Brulure que vous infligez dure 1 tour de plus.")
        ), 
        "Saphir de Gel": (
            ("La culmination de millénaires de pression par la neige sur un morceau de neige du tout premier age glaciaire .\nL'effet Gel que vous infligez dure 1 tour de plus.")
        ), 
        "Fossile Figé": (
            ("Le fossile d'un animal rare vivant il y a des millions d'années de ca, débordant de vitalité, que seul le processus de diagénèse autour de lui a su arrêter.\nL'effet Lapidation a un peu plus de chance de réussir.")
        ), 
        "Fiole des Eclairs": (
            ("Un des éclairs de Zeus, jalousement gardé par un humain qui avait réussi a l'enfermer dans une amphore vide de vin, que le dieu de la foudre à oublié sur terre lors de sa dernière échappée avec la femme de l'humain en question.\nL'effet Paralysie a un peu plus de chance de réussir.")
        ), 
        "Assurance Distributeur": (
            ("Un bout de papier assurant a son porteur que les artefacts qu'il a acheté au distributeur ne se briseront pas pour 1 changement d'étage.\nVous pouvez en acheter plusieurs bien sur !")
        ), 
        "Canigou": (
            ("Un bon toutou que son maitre a modifié dans l'espoir qu'il survive a son cancer.\nCe chien a moitié cyborg fait des dégâts a vos ennemis a chaque fin de tour !")
        ), 
        "Larmes de Vénus": (
            ("Cette fiole emplie d'un soluté magnifique permet d'apaiser les feux de la colère et ne laisse derrière que les ombres de la culpabilité.\nLes effets des orbes de folie et furie durent un tour de plus !")
        ), 
        "Marque du Sacrifice": (
            ("La Marque Maudite que le Coliseum afflige a chacune de ses créations.\nVous empeche de sortir, vous permet de descendre dans le backstage du Coliseum, et vous rappelle a chaque instant d'un chose : vous n'êtes qu'un sacrifice, un sac de chair suintant du désir dont il a besoin pour devenir plus fort.")
        )
    },
    "Les Items" : {
        "Feuille Jindagee": "paragraphe1",
        "Fruit Jindagee": "paragraphe1",
        "Feuille Aatma": "paragraphe1",
        "Fruit Aatma": "paragraphe1",
        "Crystal Elémentaire": "paragraphe1",
        "Ambroisie": "paragraphe1",
        "Hydromel": "paragraphe1",
        "Orbe de Furie": "paragraphe1",
        "Orbe de Folie": "paragraphe1",
        "Remède": "paragraphe1",
        "Remède Superieur": "paragraphe1",
        "Remède Divin": "paragraphe1",
        "Pillule": "paragraphe1",
        "Pillule Superieure": "paragraphe1",
        "Pillule Divine": "paragraphe1",
        "Fléchette Rouge": "paragraphe1",
        "Flèche Rouge": "paragraphe1",
        "Fléchette Bleue": "paragraphe1",
        "Flèche Bleue": "paragraphe1",
        "Poudre Explosive": "paragraphe1",
        "Roche Explosive": "paragraphe1",
        "Bombe Explosive": "paragraphe1",
        "Fiole de Poison": "paragraphe1",  # [debutTour]
        "Gourde de Poison": "paragraphe1",  # [debutTour]
        "Sève d'Absolution": "paragraphe1",  # [debutTour]
        "Larme d'Absolution": "paragraphe1",  # [debutTour]
        "Soluté d'Absolution": "paragraphe1",  # [debutTour]
        "Sève d'Exorcisme": "paragraphe1",  # [debutTour]
        "Larme d'Exorcisme": "paragraphe1",  # [debutTour]
        "Soluté d'Exorcisme": "paragraphe1",  # [debutTour]
        "Mutagène Bleu": "paragraphe1",  # [debutTour]
        "Grand Mutagène Bleu": "paragraphe1",  # [debutTour]
        "Mutagène Rouge": "paragraphe1",  # [debutTour]
        "Grand Mutagène Rouge": "paragraphe1",  # [debutTour]
        "Mutagène Vert": "paragraphe1",  # [debutTour]
        "Grand Mutagène Vert": "paragraphe1",  # [debutTour]
        "Mutagène Doré": "paragraphe1",  # [debutTour]
        "Grand Mutagène Doré": "paragraphe1",  # [debutTour]
        "Mutagène Hérétique": "paragraphe1",  # [debutTour]
        "Mutagène Fanatique": "paragraphe1",  # [debutTour]
    },
    "Les Fresques (La Guerre de l'Interdit)" : {
        "Un Chateau dans le Ciel" : "paragraphe1",
        "Ingénieurs de l'Extreme" : "paragraphe2",
        "Nouvelles Visions" : "paragraphe3",
        "La Catastrophe" : "paragraphe4",
        "Au Bout du Monde" : "paragraphe5",
        "Les 5 Prodiges" : "paragraphe6",
        "Fraternel" : "paragraphe6",
        "Fratricide" : "paragraphe6",
        "La Derniere Bataille" : "paragraphe6",
        "La Chute des Dieux" : "paragraphe6",
    },
    "Les Fresques (La Chute du Royaume)" : {
        "Il Etait Une Fois" : "paragraphe1",
        "Hiérarchie" : "paragraphe1",
        "La Cours du Roi" : "paragraphe2",
        "Les Couleurs du Roi" : "paragraphe3",
        "Sanglots dans la Nuit" : "paragraphe4",
        "Déchéance" : "paragraphe5",
        "Dégénérescence" : "paragraphe6",
        "Monstrueuses Images" : "paragraphe6",
        "Dans les Abysses" : "paragraphe6",
        "Pavé de Mauvaises Intentions" : "paragraphe6",
        "Renaissance" : "paragraphe6",
        "Le Prix a Payer" : "paragraphe6",
        "Malheureux jusqu'a la Fin des Temps" : "paragraphe5"
    },
    "Les Fresques (Nouveaux Horizons)" : {
        "Les Lois de l'Homme" : "paragraphe1",
        "Propriétaire, Locataire" : "paragraphe2",
        "Chair a Canon" : "paragraphe3",
        "Le Role d'un Chevalier" : "paragraphe4",
        "Soins Palliatifs" : "paragraphe5",
        "Véritable Prodige" : "paragraphe5",
        "Esprit Brisé" : "paragraphe5",
        "Le Temps et la Faucheuse" : "paragraphe5",
        "Jusqu'a ce que la Mort nous Separe" : "paragraphe5",
        "Père et Fils" : "paragraphe5",
        "Usurpateurs" : "paragraphe6",
        "Machinerie" : "paragraphe6",
        "Aller plus loin" : "paragraphe6",
        "Obsession" : "paragraphe6",
        "Isekai" : "paragraphe6",
        "Rat en Cage" : "paragraphe6",
        "Mode Créatif" : "paragraphe6",
        "l'Oie et la Liberte" : "paragraphe6",
        "A Travers les Murs" : "paragraphe6",
        "Eidolon" : "paragraphe6",
        "L'Oie et l'Oisillon" : "paragraphe6",
        "L'Oie et le Diable" : "paragraphe6",
        "Plume d'Oie" : "paragraphe6",
        "Nouvelles Victimes" : "paragraphe6",
        "Mirroir Mirroir" : "paragraphe6",
    },
    "Les Personnages" : {
        "Saumel" : "paragraphe1",
        "Elma" : "paragraphe2",
        "Auguste" : "paragraphe3",
        "Saria" : "paragraphe4",
        "Vesperum" : "paragraphe5",
        "Lucien" : "paragraphe6",
        "Élémia" : "paragraphe6",
        "Samantha" : "paragraphe6",
        "Emy" : "paragraphe6",
        "Terah" : "paragraphe6",
        "Peralta" : "paragraphe6",
        "Redde" : "paragraphe6",
        "Valfreya" : "paragraphe6",
        "Bob" : "paragraphe6",
        "Voyageur" : "paragraphe6",
        "Neil" : "paragraphe6",
    },
    "Les Ennemis" : {
        "Drone de Sécurité YucaTech Inc." : "paragraphe1",
        "Gluant" : "paragraphe1",
        "Feu Follet" : "paragraphe1",
        "Golem de Terre" : "paragraphe1",
        "Ombre Tangible" : "paragraphe1",
        "Clone de Verre" : "paragraphe1",
        "Métroïde" : "paragraphe1",
        "Trienun" : "paragraphe1",
        "Phénix Juvénile" : "paragraphe1",
        "Rochemikaze" : "paragraphe1",
        "Loup de Glace" : "paragraphe1",
        "Voleur Félin" : "paragraphe1",
        "Siffloteur" : "paragraphe1",
        "Lapin du Désastre" : "paragraphe1",
        "Cerf Voleur" : "paragraphe1",
        "Aspiratrésor Blindé" : "paragraphe1",
        "Gluant de Crystal" : "paragraphe1",
        "Sixenun" : "paragraphe1",
        "Siffloteur de Jade" : "paragraphe1",
        "Chinasous" : "paragraphe1",
        "Sacatrésor" : "paragraphe1",
        "Mimique" : "paragraphe1",
    },
    "Les Boss" : {
        "Ah Kin" : "paragraphe1",
        "Clone d'Obsidienne" : "paragraphe1",
        "Chevalier Pourpre" : "paragraphe1",
        "Coquille Vide" : "paragraphe1",
        "Roi Amonrê" : "paragraphe1",
        "Apprentie" : "paragraphe1",
        "Bouffon" : "paragraphe1",
        "Prince des Voleurs" : "paragraphe1",
        "Roi Déchu" : "paragraphe1",
        "Maitre Mage" : "paragraphe1",
        "Amalgame" : "paragraphe1",
        "Coliseum" : "paragraphe1",
        "Cauchemard" : "paragraphe1",
        "AstonRe" : "paragraphe1",
        "Ahmed (Entrée)" : "paragraphe1",
        "Roi Gluant" : "paragraphe1",
        "Obo la Cryobarbare" : "paragraphe1",
        "Mercenaire" : "paragraphe1",
        "Volontée Immortelle" : "paragraphe1",
        "Eris (?)" : "paragraphe1",
        "Spectre" : "paragraphe1",
        "Aurore" : "paragraphe1",
        "Yvan" : "paragraphe1",
        "El Baron" : "paragraphe1",
        "Armée des Anges" : "paragraphe1",
        "Doug Trudy" : "paragraphe1",
        "Thémis" : "paragraphe1",
        "Alfred" : "paragraphe1",
    },
    "Les Etages" : {
        "Sanctuaire du Sacrifice" : "paragraphe1",
        "Ruines Abandonnées" : "paragraphe2",
        "Forêt Désenchantée" : "paragraphe3",
        "Jungle Cruelle" : "paragraphe4",
        "Champs de Sables" : "paragraphe5",
        "Tour de l'Esprit" : "paragraphe6",
        "Bidonville du Clocher" : "paragraphe6",
        "Cachots de l'Immonde" : "paragraphe6",
        "Douves du Pénitent" : "paragraphe6",
        "Arène du Zénith" : "paragraphe6",
        "Chemins Coalescents" : "paragraphe6",
        "Dédale Frontière" : "paragraphe6",
        "Limbes Flétrissants" : "paragraphe6",
        "Rivages Distants" : "paragraphe6",
        "Champs du Crépuscule" : "paragraphe6",
    },
    "???" : {
        "jegardeleseigneurdevantmoisansrelâche;ilestàmadroite:jesuisinébranlable" : "paragraphe1",
        "MORS|ACERBIOR|EST|CUM|IN|NEGATIONE|ADHAESISTI|SICUT|MUSCAE|IN|CARNIVOR|PLANTAE|" : "paragraphe2",
        "INTERMINABLE" : "paragraphe3",
        "Montagnes d'or" : "paragraphe4",
        "Sérendipité" : "paragraphe5",
        "ERRORLOG" : "paragraphe6",
    },
}


def DecodeurPourLesAccents(chaine):
    chaine = chaine.replace('é',"e")
    chaine = chaine.replace('é',"e")
    chaine = chaine.replace('ê',"e")
    chaine = chaine.replace('ê',"e")
    chaine = chaine.replace('à',"a")
    chaine = chaine.replace('â',"a")
    chaine = chaine.replace('ï',"i")
    return chaine


def EcrireDansLivreCigogneBlanche():
    dir_path = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
    chemin_du_fichier = dir_path + "\Livre_De_La_Cigogne_Blanche.txt"
    with open(chemin_du_fichier, "w") as fichier:
        fichier.write(f"                           -=Livre de la Cigogne Blanche=-\n\n*Le dernier espoir, que la Volontee donne a celles et ceux qui se battent encore,\nse nomme connaissance.*\n")
        fichier.write("\n================================================================================")
        fichier.write("\n================================================================================\n")

        for theme in DICTIONNAIREDESCRIPTIONCIGOGNEBLANCHE:

            liste_de_entree_dans_le_theme = Sove.ModifieCigogneBlancheDansSove(theme, "Donne")

            if len(liste_de_entree_dans_le_theme) == 0:
                continue
            else:
                fichier.write(f"\n                                 -={theme}=-\n\n")

                for entree in liste_de_entree_dans_le_theme:
                    description_de_lentree = DICTIONNAIREDESCRIPTIONCIGOGNEBLANCHE[theme][entree]

                    description_de_lentree = DecodeurPourLesAccents(description_de_lentree)
                    entree = DecodeurPourLesAccents(entree)

                    fichier.write(f"\n\n{entree} : {description_de_lentree}\n\n")
                    

            fichier.write("\n--------------------------------------------------------------------------------")
            fichier.write("\n--------------------------------------------------------------------------------\n")

        
    


        










StopAllMusic()
Sove = SoveManagement()
Save = SaveManagement()
Observation = Observe()
Player = PlayerCaracteristics()
Draw = DrawInTurtle()
Affichage = Affiche()
FloorMaker = Floor()
Ending = EndingAndGift()
Trader = TraderUsage()


#donnees_de_s0ve = Observation.GetPermanentThingsFromS0ve()
#donnees_de_s0ve["Livraison"] = TEMP
#Observation.SetPermanentThingsToS0ve(donnees_de_s0ve)

SetupGameMode()
AffichageSecretPage3()
GetNomEtageEtDebugValues()
if Player.mode_de_jeu == "Erreur":
    print("ERREUR 404: FICHIER DE SAUVEGARDE PERMANENT INTROUVABLE")
    print("ASSUREZ VOUS D'AVOIR UN FICHIER NOMME S0VE.TXT DANS COLISEUMDEPENDENCIES")
    Affichage.EntreePourContinuer()
    sys.exit()
else:
    MenuDeDemarrage(Player)
    game_in_session = True

#try:
#    EcrireDansLivreCigogneBlanche()
#    Affichage.EntreePourContinuer()
#except Exception as error:
#    WriteErrorInErrorLog(error)


#Player.techniques_possedes = LISTETECHNIQUES
#Player.sorts_possedes = LISTESORTS
#for artefact in ARTEFACTFATALITE:
#    Player.liste_dartefacts_optionels.append(artefact)
#for artefact in ARTEFACTMELIORATIF:
#    Player.liste_dartefacts_optionels.append(artefact)
#for artefact in ARTEFACTSOPHIQUE:
#    Player.liste_dartefacts_optionels.append(artefact)
#Ending.DoEnding()
if Player.numero_de_letage == -1:
    StopAllMusic()
    PlayMusic("wind")
else:
    PlayMusicDeLetage()
while game_in_session:
    Draw.__init__()
    #Player.player_tags.append("Fantome")
    # choix de laction
    choix = GetChoix()
    # application de l'action
    if Player.numero_de_letage == -1:
        if choix == 1:
            FloorMaker.ShowFloor()
        elif choix == 2:
            Save.SaveTheGame()
        elif choix == 3:
            if Sove.ModifieTagsDansSove("Checke", "Village Jour"):
                Affichage.ParleAuPnj()
            else:
                Affichage.ParleAuPnjNuit()
    else:

        if choix == 1:
            if Player.nom_de_letage == "Limbes Flétrissants":
                print("Vous cherchez une arène, ou quelque chose dans le genre, et ne trouvez que le champ de terre battu.")
                Affichage.EntreePourContinuer()
                print("Frapper le sol stérile ne fait rien apparaitre.")
                Affichage.EntreePourContinuer()
            elif Player.numero_de_letage == 0 :
                print("Vous frappez le sol de l'arène, mais rien ne se passe.")
                Affichage.EntreePourContinuer()
            elif Player.numero_de_letage != 10:
                DoFight()  # DONE
            else:
                DoJukebox()

        elif choix == 2:
            if Player.numero_de_letage == 0 and not Player.battu_le_sacrifie:
                DoBossZero()
            else:
                game_in_session = DoBossOrGoDown()  # DONE

        elif choix == 3:
            if Player.numero_de_letage == 0 :
                print("Vous vous approchez de l'endroit ou se trouve le marchand...")
                print("...mais il n'y a personne.")
                Affichage.EntreePourContinuer()
            elif Player.nom_de_letage == "Limbes Flétrissants" : 
                print("Vous cherchez le marchand...")
                print("...mais ne trouvez personne.")
                Affichage.EntreePourContinuer()
            else:
                Trader.DoTrading()  # DONE

        elif choix == 4:
            FloorMaker.ShowFloor()

        elif choix == 5:
            if "Combattant le Gardien" in Player.player_tags:
                print("Vous sortez votre sacoche, mais vous n'arrivez pas a vous souvenir comment utiliser vos objets ou vos sorts avec votre esprit confus, alors vous la raccrochez à sa place.")
                Affichage.EntreePourContinuer()
            else:
                Player.ShowPlayerCaracteristicsAndItems()  # DONE

        elif choix == 6:
            if "Combattant le Gardien" in Player.player_tags:
                print("Vous cherchez vos redcoins, mais votre esprit confus vous empeche de trouver quoi que ce soit.")
                Affichage.EntreePourContinuer()
            else:
                DoRedcoin()  # DONE

        elif choix == 7:
            if "Combattant le Gardien" in Player.player_tags:
                print("[ERREUR :", end=' ', flush=True)
                for i in range(200):
                    print("ERREUR :", end=' ', flush=True)
                    time.sleep(0.01)
                print("]", flush=True)
                ClearConsole()
            else:
                Save.SaveTheGame()  # DONE

        # Menu de Debug
        elif choix == 8:
            ShowDebugMenu()
            Save.SaveTheGameSansAffichage()

        elif choix == 777:
            if not Player.mode_jukebox:
                print("Mode Jukebox Activé")
                Player.mode_jukebox = True
                PlayMusicDeLetage()
                Affichage.EntreePourContinuer()
            DoJukebox()
        if "Fantome" in Player.player_tags:
            try:
                PrepareTheVillage()
            except Exception as error:
                WriteErrorInErrorLog(error)
        
Ending.DoEnding()




# Lance un debug pour la méthode GetUserChoice du controlleur
# control.DebugGetUserChoice()
# control.PatternDesignConstantUpdater()
# control.Cat_astrophe()
